API to manage sales order configurations | NewStore Documentation
Skip to main content
ðŸš€ User docs have moved
to a new docs experience platform!
.
This site will now host ONLY the API docs
.
API Explorer
Search
API Explorer
Integration APIs
Configuration APIs
Inventory and fulfillment
Fulfillment requests
Order management
Availability Config API
Capacity-based Routing
API to get, create and update NOM configurations
Order Injection configuration
Order status notifications API
Configuration API for the refund request service
API to manage sales order configurations
Shipment notification configuration API
Checkout
Payment
NOM and app
Fiscalization and taxes
Promotions
Webhooks
New Generation APIs
External OMS configuration
get
Get external OMS configuration
post
Enable external OMS configuration
Sales order configuration
get
Get order ID sequence parameters
post
Set order ID sequence parameters
get
Get grace period for orders
post
Create grace period for orders
get
List locations from which orders can be canceled
post
Set locations from which orders can be canceled
get
Get limits on items for large orders
post
Set limits on items for large orders
External order webhook
get
Get webhook configuration
post
Set webhook configuration
API docs by Redocly
API to manage sales order configurations
(
0.1.0
)
Download OpenAPI specification
:
Download
team-order-management
:
team-order-management@newstore.com
Use these APIs to manage order configurations in the NewStore platform.
External OMS configuration
Use this resource to configure NewStore as a secondary
order management system
for retailers, to
allow them to continue using their
legacy order management system (OMS) for primary order fulfillment tasks.
When NewStore is the secondary OMS for your business, it provides the
following features from the perspective of order routing and fulfillment:
Order placement and returns via NewStore Associate App. Orders placed via the app
are then routed to the external OMS for fulfillment.
Managing payments for all orders.
In-store purchase
Endless Aisle and Mixed Cart purchases
Store fulfillment
and handling shipping
for orders fulfilled via stores.
Inventory management of stores, as NewStore will be the
inventory master
for your business in the stores.
When NewStore is secondary OMS, the primary OMS is responsible for the following in your business:
ATP
,
order routing
,
order modifications, and customer support.
Rerouting
rejected store fulfillment orders.
Handling shipping for orders fulfilled from a
DC or warehouse
.
Managing payments for all order that need fulfillment.
Please note that it is possible to capture payments with NewStore for in-store (no additional configuration required),
endless aisle and mixed cart orders (configuration required).
More information in:
Mixed Cart support for 3rd party OMS
.
Get external OMS configuration
Retrieves the current configuration for the external
order management system
enabled for the retailer.
Note:
To understand what NewStore is responsible for when it is the secondary
OMS for your business and an external OMs is integrated with the platform,
see the
resource definition
.
Authorizations:
newStoreAccessToken
Responses
200
External OMS Configuration Setting.
500
Internal Server Error.
default
Unexpected Error
get
/config/sales_order/external_oms
/v0
/config/sales_order/external_oms
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"enabled"
:
false
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Enable external OMS configuration
Specify that the retailer will use an external
order management system
configuration for
order fulfillment
.
If you want to disable the external OMS for the retailer, in the request payload,
specify
false
as the value for the
enabled
property.
Note:
To understand what NewStore is responsible for when it is the secondary
OMS for your business, see the
resource definition
.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
object
enabled
required
boolean
Specifies if the tenant is using an external OMS.
Responses
200
External OMS Configuration Setting.
400
Bad Request Error.
409
Conflict Error.
500
Internal Server Error.
default
Unexpected Error
post
/config/sales_order/external_oms
/v0
/config/sales_order/external_oms
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"enabled"
:
true
}
}
Response samples
400
409
500
Content type
application/problem+json
Copy
{
"error_code"
:
"bad_request"
,
"message"
:
"Value provided should be a string."
,
"request_id"
:
"ec2f3c9bb016ba971bf6074098363"
}
Sales order configuration
Use this resource to configure sales order parameters and their behavior in the NewStore
platform.
Get order ID sequence parameters
Retrieves order ID sequence parameters, that are used to generate human-readable order
identifiers. These are required for order processing, as unique IDs are assigned to orders
in the NewStore platform via these parameters.
Authorizations:
newStoreAccessToken
Responses
200
Parameters of the sequence used for generating human-readable order identifiers.
404
Config key does not exist (it is not a case when key exists but just not set)
500
Internal Server Error.
default
Unexpected Error
get
/config/sales_order/sales_order_generator_sequence
/v0
/config/sales_order/sales_order_generator_sequence
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"prefix"
:
"NS"
,
"size"
:
16
,
"start"
:
1
,
"step"
:
2
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Set order ID sequence parameters
Sets or creates order ID sequence parameters for the retailer, that are used to generate human-readable order
identifiers. These are required for order processing, as unique IDs are assigned to orders
in the NewStore platform via these parameters. Once the configuration was applied, it can't be changed.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
object
prefix
string
Prefix for human-readable order identifiers.
size
integer
>= 1
Size of human-readable order identifiers.
start
integer
>= 1
Start of human-readable order identifiers, any value
greater than
0.
step
integer
>= 1
Step of human-readable order identifiers, any value
greater than
0.
Responses
200
Parameters of the sequence used for generating human-readable order identifiers.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
default
Unexpected Error
post
/config/sales_order/sales_order_generator_sequence
/v0
/config/sales_order/sales_order_generator_sequence
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"prefix"
:
"NS"
,
"size"
:
16
,
"start"
:
1
,
"step"
:
2
}
}
Response samples
200
400
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"prefix"
:
"NS"
,
"size"
:
16
,
"start"
:
1
,
"step"
:
2
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Get grace period for orders
Retrieves the
grace period
for orders in your business.
This is the duration for an on hold order in seconds, after which it is routed for fulfillment.
Note
: You can also set the grace period for orders via the
fulfillment configuration
set up for your business.
This configuration only sets a grace period for orders that do not have a grace period assigned
already. A grace period for an order is usually assigned when an order is imported into
NewStore from an external system, with no default routing and a
service level
already assigned to it.
For more information on how routing works, see
About order routing
and the
Checkout configuration
.
Authorizations:
newStoreAccessToken
Responses
200
Timer duration for on hold orders.
404
Config key does not exist (This is different from when the config key has not been set).
500
Internal Server Error.
default
Unexpected Error
get
/config/sales_order/on_hold_timer_duration
/v0
/config/sales_order/on_hold_timer_duration
Response samples
200
500
Content type
application/json
Copy
{
"value"
:
20
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Create grace period for orders
Sets the
grace period
for orders in your business.
This is the duration for an on hold order in seconds, after which it is routed for fulfillment.
Note
: You can also set the grace period for orders via the
fulfillment configuration
set up for your business.
This method only sets a grace period for orders that do not have a grace period assigned
already. A grace period for an order is usually assigned when an order is imported into
NewStore from an external system, with no default routing and a
service level
already assigned to it.
For more information on how routing works, see
About order routing
and the
Checkout configuration
.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
integer
Timer duration in seconds
Responses
200
Parameters of the sequence used for generating human-readable order identifiers.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
default
Unexpected Error
post
/config/sales_order/on_hold_timer_duration
/v0
/config/sales_order/on_hold_timer_duration
Request samples
Payload
Content type
application/json
Copy
{
"value"
:
20
}
Response samples
200
400
500
Content type
application/json
Copy
{
"value"
:
20
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
List locations from which orders can be canceled
Retrieves the locations from which orders in your business can be canceled.
Note
: By default, orders routed to stores can be canceled by all retailers, unless it is
excluded from this configuration. If not specified in a configuration, orders cannot be
canceled from
DCs
.
Authorizations:
newStoreAccessToken
Responses
200
Defines from which location type orders can be cancelled.
404
Config key does not exist (it is not a case when key exists but just not set)
500
Internal Server Error.
default
Unexpected Error
get
/config/sales_order/cancellation_allowed_from
/v0
/config/sales_order/cancellation_allowed_from
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
[
"store"
,
"dc"
]
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Set locations from which orders can be canceled
Sets the locations from which orders in your business can be canceled.
Note
: By default, orders routed to stores can be canceled by all retailers, unless it is
excluded from this configuration. If not specified in a configuration, orders cannot be
canceled from
DCs
.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
Array of
strings
non-empty
[ items
non-empty
]
Items
Enum
:
"store"
"dc"
Defines from which location type orders can be canceled. By default (if no config is set) orders routed to stores can be canceled by every tenant, unless it is excluded from this list.
Responses
200
Array of providers which allow cancellation.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
default
Unexpected Error
post
/config/sales_order/cancellation_allowed_from
/v0
/config/sales_order/cancellation_allowed_from
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
[
"store"
,
"dc"
]
}
Response samples
200
400
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
[
"store"
,
"dc"
]
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Get limits on items for large orders
Retrieves the order item limits that determine if the order is routed or is considered a
big order and placed on hold.
You can set specific limits for items that orders can contain in your business. For example,
you can specify the maximum number of items an order can contain (such as 300 items), exceeding which
it is put on hold.
Authorizations:
newStoreAccessToken
Responses
200
The order item limits that determine if the order is routed or is considered a big order and placed on hold.
404
Config key does not exist (it is not a case when key exists but just not set)
500
Internal Server Error.
default
Unexpected Error
get
/config/sales_order/big_sales_order
/v0
/config/sales_order/big_sales_order
Response samples
200
500
Content type
application/problem+json
Copy
Expand all
Collapse all
{
"value"
:
{
"soft_limit_for_big_orders"
:
300
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Set limits on items for large orders
Specifies the order item limits that determine if the order is routed or is considered a big order
and placed on hold.
You can set specific limits for items that orders can contain in your business. For example,
you can specify the maximum number of items an order can contain (such as 300 items), exceeding which
it is put on hold.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
object
soft_limit_for_big_orders
required
integer
The order item limits that determine if the order is routed or is considered a big order and placed on hold. If the limit if not set, 100 is used as the default value.
Responses
200
The order item limits that determine if the order is routed or is considered a big order and placed on hold.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
default
Unexpected Error
post
/config/sales_order/big_sales_order
/v0
/config/sales_order/big_sales_order
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"soft_limit_for_big_orders"
:
300
}
}
Response samples
200
400
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"soft_limit_for_big_orders"
:
300
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
External order webhook
Get webhook configuration
Retrieves the current webhook configuration that enables NewStore to retrieve order details
and customer purchase history from an external order management system. For more information,
see the
integration guide
.
Authorizations:
newStoreAccessToken
Responses
200
Returns information from an external system.
500
Internal Server Error.
default
Unexpected Error
get
/config/sales_order/external_order_webhook
/v0
/config/sales_order/external_order_webhook
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"url"
:
"
https://example.com/
"
,
"api_key"
:
"API_KEY"
,
"timeout"
:
20
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Set webhook configuration
Sets up the webhook configuration to enable NewStore to retrieve order details
and customer purchase history from an external order management system. For more information,
see the
integration guide
.
Note
: The provided URL is a base URL, the platform will add respective routes accordingly.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
object
url
required
string
<
uri
>
non-empty
The URL used to send the request to.
api_key
required
string
non-empty
The API key used for authentication.
timeout
integer
<= 25
Timeout in seconds, the default is 15 and the maximum allowed value is 25.
Responses
200
Stores webhook configuration from an external system.
400
Bad Request Error.
409
Conflict Error.
500
Internal Server Error.
default
Unexpected Error
post
/config/sales_order/external_order_webhook
/v0
/config/sales_order/external_order_webhook
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"url"
:
"
https://example.com/
"
,
"api_key"
:
"API_KEY"
,
"timeout"
:
20
}
}
Response samples
400
409
500
Content type
application/problem+json
Copy
{
"error_code"
:
"bad_request"
,
"message"
:
"Value provided should be a string."
,
"request_id"
:
"ec2f3c9bb016ba971bf6074098363"
}
Previous
Configuration API for the refund request service
Next
Shipment notification configuration API
Copyright Â© 2025 NewStore, Inc.