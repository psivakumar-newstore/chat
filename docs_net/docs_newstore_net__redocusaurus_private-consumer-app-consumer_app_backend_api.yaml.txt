consumes:
  - application/json
produces:
  - application/json
schemes:
  - https
swagger: '2.0'
info:
  description: |
    This is the WIP documentation for the Highstreet API.
title: Backend API
  version: '3.9'
paths:
  /account:
    get:
      description: >-
        Even though we require a `first_name` on registration, Demandware does
        not. The `first_name` may be empty for accounts registered on the
        merchantâ€™s website.
      tags:
        - Accounts
      summary: View account
      operationId: ViewAccount
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Account'
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
    post:
      description: >
        The `email` field is optional. When it is omitted the server assumes
        `handle` is an e-mail address and use it as such.


        **NOTE**: *When verification is required an e-mail is sent out to the
        customer*.
      tags:
        - Accounts
      summary: Create account
      operationId: CreateAccount
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/optional_access_token'
        - name: CreateAccountBody
          in: body
          required: true
          schema:
            type: object
            required:
              - handle
              - password
              - first_name
              - last_name
            properties:
              custom:
                description: Custom account attributes
                type: object
                default: {}
              email:
                description: E-mail address
                type: string
                format: email
                minLength: 1
                example: bobby@tables.com
              first_name:
                description: First name
                type: string
                minLength: 1
                example: Robert'); DROP
              handle:
                description: The login identifier, usually an e-mail address.
                type: string
                minLength: 1
                example: bobby@tables.com
              last_name:
                description: Last name
                type: string
                minLength: 1
                example: TABLE Students;--
              password:
                description: Desired password
                type: string
                minLength: 8
                example: pwpwpwpw
      responses:
        '201':
          description: Account was successfully created
          schema:
            $ref: '#/definitions/Account'
        '400':
          description: Request body has invalid or missing properties
          schema:
            $ref: '#/definitions/AccountError'
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          description: Verification required
          schema:
            $ref: '#/definitions/AccountVerificationError'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
    patch:
      tags:
        - Accounts
      summary: Update account
      operationId: UpdateAccount
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - name: UpdateAccountBody
          in: body
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Account'
        '400':
          description: Request body has invalid or missing properties
          schema:
            $ref: '#/definitions/AccountError'
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /account/loyalty:
    get:
      tags:
        - Loyalty Membership
      summary: View membership
      operationId: GetLoyaltyMembership
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          $ref: '#/responses/loyalty_account'
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          $ref: '#/responses/invalid_loyalty_membership'
        '404':
          $ref: '#/responses/no_loyalty_membership'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
    post:
      description: |
        Loyalty programs may require additional information such as the gender
        or date of birth of a customer in order to better target customers.

        When required, this data should be set on the E-commerce account
        resource **before** creating a membership.
      tags:
        - Loyalty Membership
      summary: Create membership
      operationId: CreateLoyaltyMembership
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
      responses:
        '201':
          description: Membership was successfully created
          schema:
            $ref: '#/definitions/LoyaltyMembership'
        '202':
          description: The customer must verify their membership
          schema:
            $ref: '#/definitions/LoyaltyMembership'
        '401':
          $ref: '#/responses/invalid_token'
        '404':
          $ref: '#/responses/loyalty_disabled'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
    delete:
      description: >
        Removes the customer's membership when the customer no longer wishes to

        participate in the loyalty program.


        Loyalty programs may require the customer to confirm through, for
        example,

        e-mail.
      tags:
        - Loyalty Membership
      summary: Remove memberbership
      operationId: RemoveMembership
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: Membership was removed
          schema:
            type: object
            properties:
              verification_required:
                description: Is verification required before membership is fully removed?
                type: boolean
                default: false
          examples:
            application/json:
              verification_required: false
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          $ref: '#/responses/invalid_loyalty_membership'
        '404':
          $ref: '#/responses/no_loyalty_membership'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /account/password:
    put:
      description: >
        Sets the customer's password. This operation is not available for all
        merchants.


        **NOTE**: *When the token has expired a new e-mail will be sent to the
        customer.*
      tags:
        - Accounts
      summary: Set password
      operationId: SetPassword
      parameters:
        - $ref: '#/parameters/storefront'
        - name: SetPasswordBody
          in: body
          required: true
          schema:
            type: object
            required:
              - handle
              - password
              - token
            properties:
              handle:
                description: The login identifier, usually an e-mail address.
                type: string
                format: email
                minLength: 1
                example: bobby@tables.com
              password:
                description: The customer's desired password
                type: string
                minLength: 8
                example: pwpwpwpw
              token:
                description: A password reset token
                type: string
                minLength: 1
                example: 522e8e46-e2d4-466d-937b-bbb1cbef986f
      responses:
        '204':
          description: Success
        '400':
          description: Request body has invalid or missing properties
          schema:
            $ref: '#/definitions/AccountError'
          examples:
            application/json:
              code: invalid
              field: token
              message: reset token is invalid or expired
        '500':
          $ref: '#/responses/server_error'
        '501':
          $ref: '#/responses/not_implemented'
        '503':
          $ref: '#/responses/upstream_error'
  /account/reset:
    get:
      description: |
        Redirects to a password reset form hosted by the merchant.
      tags:
        - Accounts
      summary: Password Reset URL
      operationId: PasswordResetRedirect
      parameters:
        - $ref: '#/parameters/storefront'
      responses:
        '302':
          description: Redirect to a url containing a password reset form
          headers:
            Location:
              type: string
              description: The url to redirect to
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
    post:
      description: >
        This implements the forgot password flow. Not all merchants have a

        forgot password API so it is for that reason that this endpoint can
        either

        return a 204 and the e-commerce platform will send a password reset
        email

        to the specified handle or it will return a redirect to the merchant's

        password reset form on their website.
      tags:
        - Accounts
      summary: Reset Password
      operationId: PasswordReset
      parameters:
        - $ref: '#/parameters/storefront'
        - name: ResetPasswordBody
          in: body
          required: true
          schema:
            type: object
            required:
              - handle
            properties:
              handle:
                description: The login identifier, usually an e-mail address.
                type: string
                minLength: 1
                example: bobby@tables.com
      responses:
        '204':
          description: Account was reset
        '302':
          description: Redirect to a url containing a password reset form
          headers:
            Location:
              type: string
              description: The url to redirect to
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /augmentations/addresses:
    post:
      description: |
        Adds additional information to a partial address. The fields sent in the
        request will always be sent back.
      tags:
        - Augmentations
      summary: Address
      operationId: AugmentAddress
      parameters:
        - name: Address
          in: body
          required: true
          schema:
            type: object
            required:
              - address
            properties:
              address:
                $ref: '#/definitions/PartialAddress'
            example:
              address:
                country_id: NL
                house_number: '154'
                postal_code: 3514 AZ
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - address
            properties:
              address:
                $ref: '#/definitions/PartialAddress'
            example:
              address:
                city: Utrecht
                country_id: NL
                house_number: '154'
                postal_code: 3514 AZ
                street: Hooghiemstraplein
        '204':
          description: No additional data available
        '400':
          description: Invalid address
          schema:
            allOf:
              - description: An error related to incorrect use of API
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - invalid
              - $ref: '#/definitions/Err'
            example:
              code: invalid
              message: '#/address is a required field'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /auth/{provider}:
    get:
      description: |
        Endpoint to fetch the authorization URL of an authentication provider
        such as Facebook. This URL should be opened in a web browser.

        This endpoint is only available for customers with Single Sign-On.
      tags:
        - Authentication
      summary: Get Url to Auth provider
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/oauth_provider'
      responses:
        '200':
          description: URL successfully found
          schema:
            description: URL of the auth provider
            type: object
            required:
              - url
            properties:
              url:
                description: The URL
                type: string
                format: uri
          examples:
            application/json:
              url: https://facebook.com/login.html
        '403':
          description: Single Sign-On is disabled
          schema:
            allOf:
              - type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - disabled
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: disabled
              message: single sign-on is not enabled
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /branded_media:
    get:
      tags:
        - Branded Media
      summary: Get Branded Media
      operationId: GetBrandedMedia
      parameters:
        - $ref: '#/parameters/storefront'
        - enum:
            - splash_screen
            - account_header
          type: string
          description: >-
            Type of the Branded Media. Can only be splash_screen or
            account_header
          name: media_type
          in: query
          required: true
        - enum:
            - phone
            - tablet
          type: string
          description: The device for which the branded media should be returned
          name: device
          in: query
          required: true
        - enum:
            - blurred
            - compressed
          type: string
          description: >-
            The format of the branded media, if not set the default is
            "compressed"
          name: format
          in: query
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BrandedMedia'
  /cancel:
    post:
      description: |
        Cancel a job (either Refresh, Flush or Warm)
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Cachewarmer
      summary: Cancel Job
      operationId: Refresh
      parameters:
        - $ref: '#/parameters/purge_secret'
        - name: CacheWarmerCancelBody
          in: body
          required: true
          schema:
            type: object
            required:
              - job_id
            properties:
              job_id:
                type: string
                example: abc-def-ghi
      responses:
        '200':
          description: Cancelled
          schema:
            $ref: '#/definitions/CancelledResponse'
  /cart:
    post:
      description: Create a cart
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Carts
      summary: Create a cart
      operationId: CreateCart
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
        - name: CartUpdateBody
          in: body
          required: true
          schema:
            type: object
            required:
              - coupon_codes
              - items
              - vouchers
            properties:
              coupon_codes:
                type: array
                items:
                  $ref: '#/definitions/CartCouponCode'
                example: []
              items:
                type: array
                items:
                  $ref: '#/definitions/CartItem'
                example: []
              vouchers:
                type: array
                items:
                  $ref: '#/definitions/CartVoucher'
                example: []
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Cart'
          headers:
            Etag:
              type: string
              description: Etag header
          examples:
            application/json:
              _errors: []
              _messages: []
              id: 59166f6b52f6
              items: []
              tax_included: true
              totals:
                discount: 0
                grand_total: 0
                shipping: 0
                sub_total: 0
                tax: 0
              vouchers: []
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          description: The customer already has a cart.
          headers:
            Location:
              type: string
              description: The full URL of the existing cart.
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /cart/{cart_id}:
    get:
      description: View a cart
      tags:
        - Carts
      summary: View a cart
      operationId: ViewCart
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/cart_id'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Cart'
          headers:
            ETag:
              type: string
              description: Etag header
          examples:
            application/json:
              _errors: []
              _messages: []
              coupon_codes: []
              id: 59166f6b52f6
              items:
                - configuration:
                    child_product_id: simple-6fadecdb
                  id: 269b06181dfd
                  prices:
                    custom: {}
                    effective: 12
                    effective_tax_free: 10
                    original: 12
                    total: 24
                  product_id: configurable-21e3f6a7
                  quantity: 2
                - bundle_configuration:
                    - option: 12
                      quantity: 1
                      selection: simple-41f64298
                  id: 646d9734c0bc
                  prices:
                    custom: {}
                    effective: 109.99
                    effective_tax_free: 91.65
                    original: 109.99
                    total: 109.99
                  product_id: bundle-0332f5af
                  quantity: 1
              loyalty_totals:
                discount: 10
              tax_included: true
              totals:
                discount: 20
                grand_total: 116.94
                shipping: 2.95
                sub_total: 133.99
                tax: 19.33
              vouchers:
                - id: c0822948-717e-4fde-8f7a-09d6dee9e29a
                  voucher_id: '100000231'
        '401':
          $ref: '#/responses/invalid_token'
        '404':
          $ref: '#/responses/cart_not_found'
    put:
      description: Update a cart
      tags:
        - Carts
      summary: Update a cart
      operationId: UpdateCart
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/if_match'
        - $ref: '#/parameters/cart_id'
        - name: Cart update
          in: body
          required: true
          schema:
            type: object
            required:
              - coupon_codes
              - items
              - vouchers
            properties:
              coupon_codes:
                type: array
                items:
                  $ref: '#/definitions/CartCouponCode'
                example: []
              items:
                type: array
                items:
                  $ref: '#/definitions/CartItem'
                example:
                  - product_id: simple-b58057e5
                    quantity: 1
                    temp_id: af993a0d-0263-436f-a300-1bfd2931ee90
                  - configuration:
                      child_product_id: simple-6fadecdb
                    id: 269b06181dfd
                    product_id: configurable-21e3f6a7
                    quantity: 2
                  - bundle_configuration:
                      option: 12
                      quantity: 1
                      selection: simple-41f64298
                    id: 646d9734c0bc
                    product_id: bundle-0332f5af
                    quantity: 2
                  - product_id: unavailable-2d78c0cd
                    quantity: 1
                    temp_id: ce4c66ed-6673-4f3f-b205-751de9716015
              vouchers:
                type: array
                items:
                  $ref: '#/definitions/CartVoucher'
                example:
                  - id: c0822948-717e-4fde-8f7a-09d6dee9e29a
                    voucher_id: '100000231'
                  - temp_id: 0dc8dd5e-c9d1-4c11-b0d0-373c673ee281
                    voucher_id: '100000553'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Cart'
          headers:
            ETag:
              type: string
              description: Etag header
          examples:
            application/json:
              _errors:
                - code: product_unavailable
                  id: null
                  message: the product 'unavailable-2d78c0cd' is not available
                  temp_id: ce4c66ed-6673-4f3f-b205-751de9716015
                  type: cart_item_error
                - code: quantity_changed
                  id: bundle-0332f5af
                  message: quantity 2 too high, reset to 1
                  type: cart_item_error
                - code: invalid_voucher
                  message: voucher '100000553' has expired
                  temp_id: 0dc8dd5e-c9d1-4c11-b0d0-373c673ee281
                  type: voucher_error
              _messages: []
              coupon_codes: []
              id: 59166f6b52f6
              items:
                - id: 10186974b313
                  prices:
                    custom: {}
                    effective: 49.95
                    effective_tax_free: 41.63
                    original: 59.95
                    total: 49.95
                  product_id: simple-b58057e5
                  quantity: 1
                  temp_id: af993a0d-0263-436f-a300-1bfd2931ee90
                - configuration:
                    child_product_id: simple-6fadecdb
                  id: 269b06181dfd
                  prices:
                    custom: {}
                    effective: 12
                    effective_tax_free: 10
                    original: 12
                    total: 24
                  product_id: configurable-21e3f6a7
                  quantity: 2
                - bundle_configuration:
                    - option: 12
                      quantity: 1
                      selection: simple-41f64298
                  id: 646d9734c0bc
                  prices:
                    custom: {}
                    effective: 109.99
                    effective_tax_free: 91.65
                    original: 109.99
                    total: 109.99
                  product_id: bundle-0332f5af
                  quantity: 1
              tax_included: true
              totals:
                discount: 30
                grand_total: 166.89
                shipping: 2.95
                sub_total: 183.94
                tax: 27.82
              vouchers:
                - id: c0822948-717e-4fde-8f7a-09d6dee9e29a
                  voucher_id: '100000231'
        '401':
          $ref: '#/responses/invalid_token'
        '404':
          $ref: '#/responses/cart_not_found'
        '412':
          description: Cart is not in the expected state
          schema:
            $ref: '#/definitions/Cart'
          headers:
            ETag:
              type: string
              description: Etag header
          examples:
            application/json:
              _errors: []
              _messages: []
              coupon_codes: []
              id: 59166f6b52f6
              items:
                - configuration:
                    child_product_id: simple-6fadecdb
                  id: 269b06181dfd
                  prices:
                    custom: {}
                    effective: 12
                    effective_tax_free: 10
                    original: 12
                    total: 24
                  product_id: configurable-21e3f6a7
                  quantity: 2
                - bundle_configuration:
                    - option: 12
                      quantity: 1
                      selection: simple-41f64298
                  id: 646d9734c0bc
                  prices:
                    custom: {}
                    effective: 109.99
                    effective_tax_free: 91.65
                    original: 109.99
                    total: 109.99
                  product_id: bundle-0332f5af
                  quantity: 1
              tax_included: true
              totals:
                discount: 20
                grand_total: 116.94
                shipping: 2.95
                sub_total: 133.99
                tax: 19.33
              vouchers:
                - id: c0822948-717e-4fde-8f7a-09d6dee9e29a
                  voucher_id: '100000231'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /cart/{cart_id}/transfer:
    post:
      description: |
        Transfer the contents of a cart from a session belonging to a guest to a
        session belonging to a registered user. Transferring in the opposite
        direction (from registered to guest session) is not supported.
      tags:
        - Carts
      summary: Transfer a cart
      operationId: TransferCart
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/cart_id'
        - name: CartTransferBody
          in: body
          schema:
            type: object
            required:
              - access_token
            properties:
              access_token:
                description: >-
                  Access token of the session this cart should be transferred
                  to.
                type: string
                minLength: 1
      responses:
        '200':
          $ref: '#/responses/cart'
        '401':
          $ref: '#/responses/invalid_token'
        '404':
          $ref: '#/responses/cart_not_found'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /categories:
    get:
      tags:
        - Categories
      summary: Root
      operationId: GetAllCategories
      parameters:
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Category'
        '404':
          $ref: '#/responses/unknown_resource'
  /categories/tree:
    get:
      description: |
        Returns the complete category tree. The response is identical to the
        single category call invoked with the :id of the root category.
      tags:
        - Categories
      summary: Tree
      operationId: GetAllCategoryTree
      parameters:
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Category'
          examples:
            application/json:
              children:
                - id: '4'
                  include_in_menu: true
                  position: 0
                  product_count: 8
                  title: tops
                - children:
                    - id: '99'
                      include_in_menu: true
                      position: 0
                      product_count: 8
                      title: jeans
                    - id: '105'
                      include_in_menu: true
                      position: 0
                      product_count: 8
                      title: chinos
                  id: '9'
                  include_in_menu: true
                  position: 0
                  product_count: 8
                  title: bottoms
                - id: '8'
                  include_in_menu: true
                  position: 0
                  product_count: 8
                  title: shoes
              id: root
              include_in_menu: true
              position: 0
              product_count: 8
              title: Women
        '404':
          $ref: '#/responses/unknown_resource'
  /categories/{id}:
    get:
      description: Returns and Category and it's children
      tags:
        - Categories
      summary: ID
      operationId: GetAllCategoryByID
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Category'
        '404':
          $ref: '#/responses/unknown_resource'
  /checkout:
    post:
      description: |
        Starts a checkout session.

        Details *may* be pre-filled by the server or remembered from a previous
        session.
      produces:
        - application/json
      tags:
        - Checkout
      summary: Start Checkout
      operationId: StartCheckout
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - name: StartCheckoutRequestBody
          in: body
          required: true
          schema:
            type: object
            required:
              - cart_id
              - cart_etag
            properties:
              cart_etag:
                description: |
                  The last seen `ETag` value of the cart
                type: string
                minLength: 1
              cart_id:
                description: |
                  The identifier of the cart to start a checkout session for.
                type: string
                minLength: 1
              flow:
                description: |
                  The checkout flow that will be used
                type: string
                enum:
                  - applepay
            example:
              cart_etag: a836e7d92648956ga39895fd38e93f785e
              cart_id: a1b2c3d4e5f6
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Checkout'
          headers:
            ETag:
              type: string
              description: Checkout session ETag
          examples:
            application/json:
              _errors:
                - code: missing
                  field: shipping_method
                - code: missing
                  field: payment_method
              addresses:
                billing_address:
                  city: Utrecht
                  country_id: NL
                  first_name: App
                  house_number: '154'
                  last_name: Tester
                  postal_code: 3514 AZ
                  street: Hooghiemstraplein
                  telephone: 030-2769165
                shipping_address: null
              coupon_codes: []
              email: test@highstreetapp.com
              id: a1b2c3d4e5f6
              payment_method: null
              shipping_method: null
              tax_included: true
              totals:
                discount: 0
                grand_total: 104.95
                shipping: 4.95
                sub_total: 100
                tax: 20
        '400':
          description: Cart ID is missing or Apple Pay is disabled
          schema:
            allOf:
              - description: An error related to contents of the cart
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - missing
                      - disabled
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: missing
              message: cart_id is missing
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          description: An error with the cart
          schema:
            allOf:
              - description: |
                  An error related to contents of the cart. The cart could be
                  empty or contain products that have gone out of stock.
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - empty_cart
                      - invalid_cart
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: empty_cart
              message: can't create cart with empty cart
        '404':
          description: Cart does not exist
          schema:
            allOf:
              - description: An error related to contents of the cart
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - cart_not_found
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: cart_not_found
              message: cart 'a1b2c3d4e5f6' not found
        '409':
          description: Cart ETag is outdated
          schema:
            allOf:
              - description: An error related to state of the cart
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - invalid
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: invalid
              message: cart_etag is outdated
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /checkout/{checkout_id}:
    get:
      description: Views the current state of the checkout.
      produces:
        - application/json
      tags:
        - Checkout
      summary: View Checkout
      operationId: ViewCheckout
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - type: string
          description: Checkout ID.
          name: checkout_id
          in: path
          required: true
      responses:
        '200':
          $ref: '#/responses/checkout'
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
    patch:
      description: |
        Updates the checkout session. Each top-level property can be updated
        individually.

        **NOTE**: Some data implicitly depend on one another. The validity of
        the selected shipping or payment methods, for example, may depend on the
        customer's address. In other words: *the absense of an error does not
        mean the error has been permanently*.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Checkout
      summary: Update Checkout
      operationId: UpdateCheckout
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - type: string
          description: Checkout ID.
          name: checkout_id
          in: path
          required: true
        - name: CheckoutUpdateRequestBody
          in: body
          required: true
          schema:
            type: object
            minProperties: 1
            properties:
              addresses:
                $ref: '#/definitions/CheckoutAddresses'
              coupon_codes:
                $ref: '#/definitions/CouponList'
              custom:
                type: object
              email:
                $ref: '#/definitions/Email'
              payment_method:
                $ref: '#/definitions/PaymentMethod'
              shipping_method:
                $ref: '#/definitions/ShippingMethod'
      responses:
        '200':
          $ref: '#/responses/checkout'
        '401':
          $ref: '#/responses/invalid_token'
        '409':
          description: An error with the cart
          schema:
            allOf:
              - description: |
                  An error related to contents of the cart. The cart could be
                  empty or contain products that have gone out of stock.
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - invalid_cart
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: invalid_cart
              message: cart has unresolved item errors
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /checkout/{checkout_id}/finalize:
    post:
      description: >
        Finalizes a checkout session. After finalization clients are expected to
        interact with a PSP (Payment Processor).


        Starting the interaction with the PSP is done through a HTTP `GET`
        request.


        The Server expects a json hash containing tracking configuration from
        the app. Currently

        tracking with facebook and google is supported. A request to track both
        of these would look

        like the following:


        ```json

        {
          "analytics": [
            {
              "ga_ul": "en-nl",
              "ga_sr": "750x1334",
              "ga_av": "2.31.10",
              "ga_cid": "8407a770-ad5a-480a-a723-f00adc399789",
              "ga_an": "MarliesDekkers",
              "ga_tid": "UA-49257414-1",
              "hs_type": "GA"
            },
            {
              "fb_app_id": "UA-49257414-1",
              "fb_ad_id": "1111-1111-1111-1111"
              "hs_type": "facebook"
            }
          ]
        }

        ```
      tags:
        - Checkout
      summary: Finalize Checkout
      operationId: FinalizeCheckout
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - type: string
          description: Checkout ID.
          name: checkout_id
          in: path
          required: true
        - name: CheckoutFinalizationRequestBody
          in: body
          required: true
          schema:
            description: The analytics parameters to use when tracking successful orders.
            type: object
            required:
              - analytics
            properties:
              analytics:
                type: array
                items:
                  type: object
                  required:
                    - hs_type
                  properties:
                    hs_type:
                      description: The analytics tracker type.
                      type: string
                      enum:
                        - GA
                        - facebook
            example:
              analytics:
                - ga_an: Whitelabel
                  ga_av: 2.14.0
                  ga_cid: a1b2c3d4e5f6
                  ga_sr: 1920x1080
                  ga_tid: a1b2c3d4e5f6
                  ga_ul: nl-NL
                  hs_type: GA
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CheckoutFinalization'
        '400':
          description: Not ready for finalizing
          schema:
            $ref: '#/definitions/Checkout'
        '401':
          $ref: '#/responses/invalid_token'
        '409':
          description: An error with the cart
          schema:
            allOf:
              - description: |
                  An error related to contents of the cart. The cart could be
                  empty or contain products that have gone out of stock.
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - invalid_cart
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: invalid_cart
              message: cart has unresolved item errors
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /checkout/{checkout_id}/payment_methods:
    get:
      description: |
        Gets the list of available payment methods for the given checkout
        session.
      produces:
        - application/json
      tags:
        - Checkout
      summary: Available Payment Methods
      operationId: GetAvailablePaymentMethods
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - type: string
          description: Checkout ID.
          name: checkout_id
          in: path
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PaymentMethodList'
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /checkout/{checkout_id}/shipping_methods:
    get:
      description: |
        Gets the list of available shipping methods for the given checkout
        session.

        ### Pick up in store

        The special shipping method code `hs.pick-up-in-store` indicates that
        customers can pick up the products in a brick and mortar store, rather
        than have it shipped to an address.

        The pick up in store shipping method does **not** have any sub options.
        Instead, the [GET /stores](#operation/FindNearbyStores) endpoint can be
        used to fetch a list of stores close to a location. The list of stores
        can be treated as a list of sub options. The `id` of a Store can be used
        as a sub option code.

        Example:

        ```javascript
        {
          "shipping_method": {
            "code": "hs.pick-up-in-store",
            "options": [
              { "code": "02-ANTWERPEN" }
            ]
          }
        }
        ```
      produces:
        - application/json
      tags:
        - Checkout
      summary: Available Shipping Methods
      operationId: GetAvailableShippingMethods
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - type: string
          description: Checkout ID.
          name: checkout_id
          in: path
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ShippingMethodList'
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /contentpages:
    get:
      description: |
        Returns a list of content pages. As of API version 3.9 content pages
        can also be personal. This is indicated by the value of `personal`.
      produces:
        - application/json
      tags:
        - Content Pages
      summary: Get a list of content pages
      operationId: GetContentPages
      parameters:
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ContentPage'
        '500':
          $ref: '#/responses/server_error'
  /cookies:
    post:
      description: |
        Gets cookies using the customer's access token. The cookies can be used
        to continue the session on the web. This allows the user to view
        personal content that requires that would require a session.
      produces:
        - application/json
      tags:
        - Authentication
      summary: Cookies
      operationId: GetCookies
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - cookies
            properties:
              cookies:
                description: List of Set-Cookie header values.
                type: array
                items:
                  description: Set-Cookie header value
                  type: string
                  minLength: 1
          examples:
            application/json:
              cookies:
                - >-
                  frontend=foo; expires=Wed, 30-May-2018 13:52:19 GMT;
                  Max-Age=2592000; path=/; domain=merchant.com; HttpOnly
                - >-
                  frontend_cid=bar; expires=Wed, 30-May-2018 13:52:19 GMT;
                  Max-Age=2592000; path=/; domain=merchant.com; secure; HttpOnly
                - dwsecuretoken_wookie; Path=/; HttpOnly; Secure
                - dwsid=r2d2; Path=/; HttpOnly
                - __cq_dnt=0; Path=/
                - dw_dnt=0; Path=/
                - dwanonymous_c3p0; Path=/; Max-Age=15552000
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /featured_products/{recommender_id}:
    get:
      description: |
        Fetches a list of (personalized) recommended products.

        Note that not all recommenders support restricting results to a single
        category.
      tags:
        - Products
      summary: Featured
      operationId: Mixin16
      parameters:
        - $ref: '#/parameters/optional_access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/visitor_id'
        - $ref: '#/parameters/recommender_id'
        - $ref: '#/parameters/category_id'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FeaturedProductList'
        '400':
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/Err'
              - required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - missing_visitor_id
                      - invalid_category_id
          examples:
            application/json:
              code: missing_visitor_id
        '404':
          $ref: '#/responses/unknown_resource'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /jobs:
    get:
      description: >
        Get a list of jobs currently in the queue and their scheduled time from
        across all DCs
      produces:
        - application/json
      tags:
        - Cachewarmer
      summary: List Jobs
      operationId: GetJobs
      parameters:
        - $ref: '#/parameters/purge_secret'
      responses:
        '200':
          description: JobListResponse
          schema:
            $ref: '#/definitions/JobListResponse'
  /jobs/reindex-categories:
    post:
      security:
        - basic_auth: []
      description: |
        Schedules a job that refreshes the order of products within categories.

        Note that this job only refreshes the **order** of products. The product
        data itself (such as pricing) is not refreshed.
      tags:
        - Jobs
      summary: Reindex categories
      operationId: Mixin11
      parameters:
        - $ref: '#/parameters/basic_auth'
        - description: Request body to schedule a job to reindex categories
          name: ReindexCategoriesRequestBody
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReindexCategoriesRequest'
      responses:
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/ScheduledCategoriesReindexJob'
          examples:
            application/json:
              job_id: d02b7e035bd31021168e7557
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidReindexCategoriesRequest'
          examples:
            application/json:
              code: unknown_country
              message: No Highstreet environment found for 'NL'
        '401':
          $ref: '#/responses/unauthorized'
        '500':
          $ref: '#/responses/server_error'
  /jobs/stock_notifications:
    post:
      security:
        - basic_auth: []
      description: |
        Schedules a job to send back in stock notifications to customers that
        registered to receive one.

        This endpoint can be called any time the stock of a product changes from
        0 (out of stock) to greater than 0 (back in stock).

        This endpoint should only be called with product IDs of fully configured
        products. The following products types are supported:

        | Platform                  | Product types         |
        |---------------------------|-----------------------|
        | Magento 1 & Magento 2     | `simple`              |
        | Salesforce Commerce Cloud | `item` and `variant`  |
        | Self-implemented          | `fixed` and `variant` |

        Partially configured products are not supported.

        After receiving a back in stock notification the user will not receive
        a second notification for the same product (unless they explicitly
        register again).
      tags:
        - Jobs
      summary: Stock Notifications
      operationId: ScheduleStockNotifications
      parameters:
        - $ref: '#/parameters/basic_auth'
        - description: Request body for scheduling back in stock notifications
          name: StockNotificationsRequestBody
          in: body
          required: true
          schema:
            $ref: '#/definitions/StockNotificationRequest'
      responses:
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/ScheduledStockNotification'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidStockNotificationsRequest'
        '401':
          $ref: '#/responses/unauthorized'
        '500':
          $ref: '#/responses/server_error'
  /links/deeplinks/{encoded_url}:
    get:
      produces:
        - application/json
      tags:
        - Deeplink
      summary: Resolve applink
      operationId: ResolveApplink
      parameters:
        - $ref: '#/parameters/storefront'
        - type: string
          description: URL-safe base64 encoded URL.
          name: encoded_url
          in: path
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Deeplink'
          examples:
            application/json:
              deeplink: justbrands://products/16352
        '400':
          description: The provided URL is invalid
          schema:
            $ref: '#/definitions/DeeplinkURLError'
          examples:
            application/json:
              code: invalid
              message: invalid URL schema
        '404':
          description: Webpage does not contain an applink
          schema:
            $ref: '#/definitions/DeeplinkPageError'
          examples:
            application/json:
              code: no_applink
              message: webpage does not contain a deeplink
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /lookbooks:
    get:
      tags:
        - Lookbooks
      summary: Get Lookbooks
      operationId: GetLookbooks
      parameters:
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Lookbooks'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /lookbooks/{lookbook_id}/looks:
    get:
      tags:
        - Lookbooks
      summary: Get Looks
      operationId: GetLooks
      parameters:
        - $ref: '#/parameters/storefront'
        - type: string
          description: Lookbook ID.
          name: lookbook_id
          in: path
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Looks'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /loyalty/orders:
    get:
      description: Lists all orders made by the customer
      produces:
        - application/json
      tags:
        - LoyaltyOrders
      summary: History
      operationId: ListOrderHistory
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              orders:
                description: |
                  List of orders made by the customer. Orders are sorted from
                  newest to oldest.
                type: array
                items:
                  $ref: '#/definitions/LoyaltyOrder'
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          $ref: '#/responses/invalid_loyalty_membership'
        '404':
          $ref: '#/responses/no_loyalty_membership'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /loyalty/vouchers:
    get:
      description: |
        Lists the customer's collected vouchers and the currently running
        campaigns.
      tags:
        - Voucher
      summary: View vouchers
      operationId: GetVouchers
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - type: string
          description: >
            A cart ID. When given, only the *vouchers* that can be used in a
            cart

            will be returned.
          name: cart_id
          in: query
      responses:
        '200':
          description: Success
          schema:
            type: object
            required:
              - collected
              - collectable
            properties:
              collectable:
                description: List of active campaigns
                type: array
                items:
                  $ref: '#/definitions/Campaign'
              collected:
                description: List of vouchers the customer collected
                type: array
                items:
                  $ref: '#/definitions/Voucher'
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          $ref: '#/responses/invalid_loyalty_membership'
        '404':
          $ref: '#/responses/no_loyalty_membership'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /messages:
    get:
      tags:
        - Messages
      summary: Get Messages
      operationId: GetMessages
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
        - type: string
          description: Placement where the message will be shown.
          name: placement
          in: query
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MessageList'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /nativecheckout:
    get:
      description: Gets configuration options for the (native) checkout.
      tags:
        - Checkout
      summary: Checkout configuration
      operationId: GetStorefrontCheckoutConfiguration
      parameters:
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CheckoutConfig'
        '404':
          $ref: '#/responses/unknown_storefront'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /orders:
    get:
      description: Lists all orders in summary format
      produces:
        - application/json
      tags:
        - Orders
      summary: Order Summary
      operationId: OrderSummaryList
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/order_status'
        - $ref: '#/parameters/store_id'
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              next_cursor:
                description: The next cursor value, will be null if no further items
                type: integer
              orders:
                description: |
                  List of orders made by the customer. Orders are sorted from
                  newest to oldest.
                type: array
                items:
                  $ref: '#/definitions/OrderSummary'
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /orders/{id}:
    get:
      description: Shows a single order in detail
      produces:
        - application/json
      tags:
        - Orders
      summary: Order Detail
      operationId: OrderDetail
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/access_token'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Order'
        '401':
          $ref: '#/responses/invalid_token'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /orders/{order_id}/applepay:
    post:
      tags:
        - Checkout
      summary: Apple Pay
      operationId: CreateApplePayPayment
      parameters:
        - $ref: '#/parameters/storefront'
        - type: string
          description: Order ID.
          name: order_id
          in: path
          required: true
        - description: ApplePay token
          name: payload
          in: body
          required: true
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  token:
                    description: The apple pay token
                    type: string
      responses:
        '200':
          description: Payment processed
          schema:
            $ref: '#/definitions/PaymentResult'
        '403':
          description: Apple pay is disabled
          schema:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
          examples:
            application/json:
              code: disabled
              message: Apple pay is not enabled
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /products:
    get:
      description: |
        Searching and filtering products.

        ### Filters

        Products can be filtered by attribute. Three filter types are currently
        supported:

        * The **set membership filter** (`in`) only yields products where the
          value of a given attribute is present in a set of given values.
          Example: only products in the color red or orange.

        * The **range filter** (`range`) only yields products where the value of
          a particular attribute falls between a minimum and maximum.
          Example: only products in the price range 50 to 100 euros.

        * The **equality filter** (`eq`) only yields products with a particular
          value for a particular attribute.
          Example: only products with from the brand "H&M".

        The available list of attributes, the filter type and their possible
        values can be found under the `filters` property.

        ### Notes

        * `product_count` will not be guaranteed to be there any more.
      tags:
        - Products
      summary: Search
      operationId: SearchProducts
      parameters:
        - $ref: '#/parameters/optional_access_token'
        - $ref: '#/parameters/storefront'
        - maxLength: 50
          type: string
          description: A search query
          name: q
          in: query
        - $ref: '#/parameters/category_id'
        - type: number
          default: 0
          description: The cursor position
          name: cursor
          in: query
        - type: number
          default: 20
          description: Maximum number of results
          name: size
          in: query
        - type: string
          description: >
            The sort option. Value will be an id of a sorting option returned in
            the product search

            result
          name: sort
          in: query
        - type: string
          description: >
            Set membership filter. Replace `{attr}` with an attribute code.
            Values

            are separated by a pipe (`|`).


            Example: `c_size:in=S|M`.
          name: '{attr}:in'
          in: query
        - type: string
          format: ^[0-9]+,[0-9]+$
          description: >
            Range filter. Replace `{attr}` with an attribute code. The minimum
            and

            maximum are separated by a comma (`,`).


            Example: `price:range=50,100`.
          name: '{attr}:range'
          in: query
        - type: string
          description: |
            Equality filter. Replace `{attr}` with an attribute code.

            Example: `brand:eq=637`.
          name: '{attr}:eq'
          in: query
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProductSearchResultSet'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /products/{product_id}:
    get:
      description: |
        Products in detail.
      tags:
        - Products
      summary: Details
      operationId: FetchProductDetails
      parameters:
        - $ref: '#/parameters/optional_access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/product_id'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '404':
          $ref: '#/responses/unknown_resource'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /products/{product_id}/availability:
    get:
      description: Fetches up-to-date availability and pricing for a product.
      tags:
        - Products
      summary: Availability
      operationId: FetchProductAvailability
      parameters:
        - $ref: '#/parameters/optional_access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/product_id'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProductAvailabilitySet'
        '404':
          $ref: '#/responses/unknown_resource'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /products/{product_id}/related:
    get:
      description: |
        Fetch products related to a particular product. Multiple types of
        relations, such as recommendations, cross-sell, up-sell are supported.
      tags:
        - Products
      summary: Related
      operationId: FetchRelatedProducts
      parameters:
        - $ref: '#/parameters/optional_access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/product_id'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RelatedProductGroupSet'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /products/{product_id}/store-availability:
    get:
      description: |
        Fetches the availability of a product in nearby stores. Only Product IDs
        of fully configured products (i.e. `fixed` or `variant` products ) are
        supported.

        This endpoint requires a location as either a (partial) address
        (`address`) or as coordinates (`latitude` + `longitude`).
      tags:
        - Products
      summary: Store Availability
      operationId: FetchStoreAvailability
      parameters:
        - $ref: '#/parameters/optional_access_token'
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/product_id'
        - $ref: '#/parameters/store_address'
        - $ref: '#/parameters/store_max_distance'
        - $ref: '#/parameters/longitude'
        - $ref: '#/parameters/latitude'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StoreAvailabilityResultSet'
        '400':
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/Err'
              - required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - invalid
                      - missing
          examples:
            application/json:
              code: missing
              message: no address or latitude+longitude given
        '404':
          $ref: '#/responses/unknown_resource'
        '500':
          $ref: '#/responses/server_error'
        '501':
          $ref: '#/responses/not_implemented'
        '503':
          $ref: '#/responses/upstream_error'
  /purge:
    post:
      description: >
        Purges the cache for the merchant


        You may send through the X-Selected-Storefront parameter to flush only
        one storefront.


        at_timestamp must be set in the JSON body, a value of 0 means flush
        immediatey.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Cachewarmer
      summary: Purge the cache
      operationId: Purge
      parameters:
        - $ref: '#/parameters/optional_storefront'
        - $ref: '#/parameters/purge_secret'
        - name: CacheWarmerPurgeBody
          in: body
          required: true
          schema:
            type: object
            required:
              - at_timestamp
            properties:
              at_timestamp:
                type: integer
                example: 0
      responses:
        '200':
          description: Purged
          schema:
            $ref: '#/definitions/PurgeCompletedResponse'
  /push_notifications/installations:
    post:
      description: |
        Registers a device with a push provider.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Push Notifications
      summary: Register a device to recieve push notifications
      operationId: RegisterForPush
      parameters:
        - name: PushInstallationBody
          in: body
          required: true
          schema:
            $ref: '#/definitions/PushInstallation'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/InstallationId'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /push_notifications/installations/{installation_id}:
    patch:
      description: |
        Updates the device info/settings with a push provider. For example
        if a user no longer wishes to recieve push notifications.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Push Notifications
      summary: Update push notification settings
      operationId: Mixin17
      parameters:
        - type: string
          name: installation_id
          in: path
          required: true
        - name: PushInstallationBody
          in: body
          required: true
          schema:
            $ref: '#/definitions/PushInstallation'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/InstallationId'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /push_notifications/open:
    post:
      description: |
        This endpoint consumes data related to a push notifcation and sends
        an event to the relevant push provider to track an open event.
      consumes:
        - application/json
      tags:
        - Push Notifications
      summary: Track a notification open event
      operationId: TrackNotificationOpened
      parameters:
        - name: PushInstallationBody
          in: body
          schema:
            $ref: '#/definitions/PushOpen'
      responses:
        '200':
          description: OK
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /refresh:
    post:
      description: >
        Refresh (Flush and Warm) the cache for a merchant


        You may send through the X-Selected-Storefront parameter to warm only
        one storefront.


        at_timestamp must be set in the JSON body, a value of 0 means warm
        immediatey.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Cachewarmer
      summary: Refresh the cache
      operationId: RefreshMixin5
      parameters:
        - $ref: '#/parameters/optional_storefront'
        - $ref: '#/parameters/purge_secret'
        - name: CacheWarmerRefreshBody
          in: body
          required: true
          schema:
            type: object
            required:
              - at_timestamp
            properties:
              at_timestamp:
                type: integer
                example: 0
      responses:
        '200':
          description: Refreshing
          schema:
            $ref: '#/definitions/RefreshingResponse'
  /stock_subscriptions:
    post:
      description: |
        Registers a customer for receiving a push notification when a product
        comes back in stock.
      tags:
        - Stock Subscriptions
      summary: Create subscription
      operationId: CreateStockSubscription
      parameters:
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/storefront'
        - name: CreateStockSubscriptionRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateStockSubscription'
      responses:
        '201':
          description: Stock subscription was successfully created
          schema:
            $ref: '#/definitions/StockSubscription'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/StockSubscriptionRequestError'
        '500':
          $ref: '#/responses/server_error'
  /storefront:
    get:
      description: |
        Selects the best matching storefront based on language and locale.
        The locale is given more weight in the selection than the language.
      tags:
        - Storefronts
      summary: Select storefront
      operationId: SelectStorefront
      parameters:
        - $ref: '#/parameters/lang'
        - $ref: '#/parameters/locale'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Storefronts'
        '400':
          description: Invalid `lang` or `locale` parameter
          schema:
            $ref: '#/definitions/StorefrontError'
          examples:
            application/json:
              error: no locale given
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /storefronts:
    get:
      description: |
        Gets a list of all available storefronts from a Merchant
      tags:
        - Storefronts
      summary: List of Storefronts
      operationId: ListStorefronts
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Storefronts'
        '500':
          $ref: '#/responses/server_error'
  /storefronts/{storefront_id}:
    get:
      description: |
        Gets the configuration for a storefront by ID. The country parameter is
        required as Storefront settings can vary depending on the country.
        Specifically in the case of Apple Pay.
      tags:
        - Storefronts
      summary: View storefront
      operationId: ViewStorefront
      parameters:
        - type: string
          description: Storefront identifier
          name: storefront_id
          in: path
          required: true
        - type: string
          description: The country identifer
          name: country
          in: query
          required: true
      responses:
        '200':
          $ref: '#/responses/storefront'
        '404':
          description: Storefront does not exist
          schema:
            $ref: '#/definitions/StorefrontError'
          examples:
            application/json:
              error: no such storefront
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /storefronts/{storefront_id}/countries:
    get:
      description: |
        Gets the list of countries a storefront covers. For each country some
        address details are provided to help build address forms.

        Available since API version 3.7.
      tags:
        - Storefronts
      summary: Countries
      operationId: GetStorefrontCountries
      parameters:
        - type: string
          description: Storefront identifier
          name: storefront_id
          in: path
          required: true
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/CountryList'
        '404':
          description: Storefront does not exist
          schema:
            $ref: '#/definitions/StorefrontError'
          examples:
            application/json:
              error: no such storefront
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /stores:
    get:
      description: |
        Find stores close to a postal code. It's possible to fetch a list of
        stores filtered by their purpose. Currently the only purpose is "pick up
        in store".

        ### Pagination

        Demandware does not support filtering stores by attribute. To support
        fetching a filtered list of stores the plan is as follows:

        * add a `start` query string parameter
        * add a `length` / `size` query string parameter
        * add query string parameters for the latitude and longitude

        Response bodies will include a key `next` in the response holding a URL
        that clients can use to fetch the next batch of `length` stores with the
        middleware making sure unwanted stores are filtered out.

        Most likely we'll also want to avoid fetching the latitude and longitude
        on the next page. The URL in `next` can add the longitude and latitude
        to the query string to avoid that.

        **Pagination will not be part of the initial implementation.** The above
        are notes on how this will be implemented.
      produces:
        - application/json
      tags:
        - Stores
      summary: Find nearby stores
      operationId: FindNearbyStores
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/store_address'
        - $ref: '#/parameters/store_max_distance'
        - $ref: '#/parameters/longitude'
        - $ref: '#/parameters/latitude'
        - $ref: '#/parameters/store_tags'
        - $ref: '#/parameters/store_type'
        - type: string
          description: Postal code. **DEPRECATED** use `address`.
          name: postal_code
          in: query
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StoreList'
        '400':
          description: Invalid or missing input parameters
          schema:
            allOf:
              - description: An error with the query string
                type: object
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - invalid
                      - missing
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: invalid
              message: max_distance is not a valid number
        '500':
          $ref: '#/responses/server_error'
        '501':
          $ref: '#/responses/not_implemented'
        '503':
          $ref: '#/responses/upstream_error'
  /stores/{id}:
    get:
      description: |
        Finds a store by it's id.
      produces:
        - application/json
      tags:
        - Stores
      summary: Find Store by id
      operationId: FindStorebyId
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/id'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Store'
        '400':
          description: Invalid or missing input parameters
          schema:
            allOf:
              - description: An error with the query string
                type: object
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - invalid
                      - missing
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: invalid
              message: id is not present
        '500':
          $ref: '#/responses/server_error'
        '501':
          $ref: '#/responses/not_implemented'
        '503':
          $ref: '#/responses/upstream_error'
  /token:
    post:
      description: |
        Requests an access token.

        **NOTE**: The grant type `authorization_code` is only available for
        customers with single sign-on enabled.

        **NOTE**: The grant type `sign_in_with_apple` is only available for
        customers with Sign in with Apple enabled.
      tags:
        - Authentication
      summary: Token endpoint
      operationId: Mixin3
      parameters:
        - $ref: '#/parameters/oauth_request'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OAuthToken'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/OAuthTokenError'
          examples:
            application/json:
              error: invalid_grant
              error_description: The user or authorization server denied the request
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /visitor_id:
    post:
      description: >
        A personal recommendation engine will require a unique identifier for a
        visitor.

        This identifier will be used in the tracking of events as well as of
        course for fetching

        product recommendations. The  origin of the unique identifier will be
        the middleware as it

        will depend on the recommendation platform as to how this identifier is
        fetched / generated.


        The app should get a visitor identifier from the following endpoint.
        This identifier should

        then be stored by the app.


        The endpoint expects the user's access token to be present in the
        Authorization header.


        In the case of a login event the current visitor id should be passed in
        the request body.

        Depending on the recommendation engine this could be used to sync
        accounts.
      tags:
        - Visitor
      summary: Create Visitor ID
      operationId: CreateVisitorID
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/optional_access_token'
        - name: VisitorID
          in: body
          schema:
            type: object
            properties:
              visitor_id:
                description: Unique identifier for the visitor
                type: string
                minLength: 1
      responses:
        '201':
          description: Visitor ID successully created
          schema:
            $ref: '#/definitions/Visitor'
        '401':
          $ref: '#/responses/invalid_token'
        '403':
          description: Feature disabled
          schema:
            $ref: '#/definitions/RecommendationsDisabledError'
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /wall:
    get:
      description: Fetches the home wall
      produces:
        - application/json
      tags:
        - Wall
      summary: Home
      operationId: FetchHomeWall
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Wall'
          examples:
            application/json:
              gutter_size: 2
              rows:
                - config:
                    height: 3
                  tiles:
                    - content:
                        parallax: true
                        url: https://content.highstreet-static.com/38388293.jpg
                      id: '1'
                      rect:
                        - 0
                        - 0
                        - 12
                        - 3
                      resource:
                        id: sale
                        type: category
                      type: img
                  type: grid
                - config:
                    height: 12
                  tiles:
                    - content:
                        url: https://content.highstreet-static.com/3883627882.jpg
                      id: '2'
                      rect:
                        - 0
                        - 0
                        - 6
                        - 6
                      resource:
                        id: sale-women
                        title: Women
                        type: category
                      type: img
                    - content:
                        url: https://content.highstreet-static.com/883663272.jpg
                      id: '3'
                      rect:
                        - 0
                        - 6
                        - 6
                        - 6
                      resource:
                        id: sale-men
                        title: Men
                        type: category
                      type: img
                    - content:
                        url: https://content.highstreet-static.com/3783992673.jpg
                      id: '4'
                      rect:
                        - 6
                        - 0
                        - 6
                        - 12
                      resource:
                        id: sale-kids
                        title: Kids
                        type: category
                      type: img
                  type: grid
                - config:
                    height: 12
                  tiles:
                    - content:
                        placeholder: https://studio.highstreet-static.com/73773182.jpg
                        videos:
                          mp4_360: >-
                            https://studio.highstreet-static.com/v/00037362-360.mp4
                          mp4_480: >-
                            https://studio.highstreet-static.com/v/00037362-480.mp4
                          mp4_720: >-
                            https://studio.highstreet-static.com/v/00037362-720.mp4
                      id: '5'
                      rect:
                        - 0
                        - 0
                        - 12
                        - 12
                      type: video
                  type: grid
                - config:
                    height: 12
                  tiles:
                    - content:
                        hotspots:
                          - position:
                              x: 0.75
                              'y': 0.23
                            product_slots:
                              - products:
                                  - '118842'
                              - products:
                                  - '832362'
                        image: https://studio.highstreet-static.com/7763465238.jpg
                        look: 32
                        lookbook: 19
                      id: '6'
                      rect:
                        - 0
                        - 0
                        - 4
                        - 6
                      type: look
                    - content:
                        parallax: false
                        url: https://studio.highstreet-static.com/55277811.jpg
                      id: '7'
                      rect:
                        - 4
                        - 0
                        - 4
                        - 6
                      type: img
                    - content:
                        parallax: false
                        url: https://studio.highstreet-static.com/88466283.jpg
                      id: '8'
                      rect:
                        - 8
                        - 0
                        - 4
                        - 6
                      type: look
                  type: grid
  /warm:
    post:
      description: >
        Warm the cache for the merchant


        You may send through the X-Selected-Storefront parameter to warm only
        one storefront.


        at_timestamp must be set in the JSON body, a value of 0 means warm
        immediatey.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Cachewarmer
      summary: Warm the cache
      operationId: Warm
      parameters:
        - $ref: '#/parameters/optional_storefront'
        - $ref: '#/parameters/purge_secret'
        - name: CacheWarmerWarmBody
          in: body
          required: true
          schema:
            type: object
            required:
              - at_timestamp
            properties:
              at_timestamp:
                type: integer
                example: 0
      responses:
        '200':
          description: Warming
          schema:
            $ref: '#/definitions/WarmingResponse'
  /webcheckout:
    get:
      description: Get the URL of the web checkout.
      produces:
        - application/json
      tags:
        - Checkout
      summary: Webcheckout URL
      operationId: GetWebcheckoutURL
      parameters:
        - $ref: '#/parameters/storefront'
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - url
            properties:
              url:
                description: URL to the webcheckout
                type: string
                format: uri
                minLength: 1
          examples:
            application/json:
              url: https://checkout.highstreetapp-services.com/scotch.html
        '403':
          description: Webcheckout disabled
          schema:
            allOf:
              - description: An error related to incorrectly using the webcheckout
                type: object
                required:
                  - code
                properties:
                  code:
                    description: An error code
                    type: string
                    enum:
                      - webcheckout_disabled
              - $ref: '#/definitions/Err'
          examples:
            application/json:
              code: webcheckout_disabled
              message: use POST /checkout/external
        '500':
          $ref: '#/responses/server_error'
        '503':
          $ref: '#/responses/upstream_error'
  /wishlists/{id}:
    get:
      tags:
        - Wishlists
      summary: Fetch wishlist
      operationId: GetWishlistById
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/wishlist_id'
      responses:
        '200':
          $ref: '#/responses/wishlist'
        '401':
          $ref: '#/responses/invalid_token'
        '404':
          $ref: '#/responses/unknown_wishlist'
  /wishlists/{id}/items:
    post:
      description: |
        Adds a product to a wishlist. The items is added at the end of the
        existing wishlist.
      tags:
        - Wishlists
      summary: Add wishlist item
      operationId: AddWishlistItem
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/wishlist_id'
        - $ref: '#/parameters/wishlist_item'
      responses:
        '201':
          description: Success
        '401':
          $ref: '#/responses/invalid_token'
        '404':
          $ref: '#/responses/unknown_wishlist'
        '422':
          $ref: '#/responses/invalid_add_item_request'
  /wishlists/{id}/items/{item_id}:
    delete:
      description: |
        Delete an item from a wishlist. If the item doesn't exist on the server
        the operations is treated as a success.
      tags:
        - Wishlists
      summary: Delete wishlist item
      operationId: RemoveWishlistItem
      parameters:
        - $ref: '#/parameters/storefront'
        - $ref: '#/parameters/access_token'
        - $ref: '#/parameters/wishlist_id'
        - $ref: '#/parameters/wishlist_item_id'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/responses/invalid_token'
        '404':
          $ref: '#/responses/unknown_wishlist'
definitions:
  Account:
    type: object
    required:
      - handle
      - email
      - last_name
    properties:
      address:
        $ref: '#/definitions/Address'
      card_barcode:
        $ref: '#/definitions/Barcode'
      custom:
        description: Custom account attributes
        type: object
        default: {}
      customer_identifiers:
        description: A map of third party customer identifiers
        type: object
        properties:
          google_analytics:
            description: The Google Analytics identifier of the customer.
            type: string
      email:
        description: The customer's e-mail address.
        type: string
        format: email
        minLength: 1
      first_name:
        description: Customer's first name
        type: string
        minLength: 1
      handle:
        description: The login identifier, usually an e-mail address.
        type: string
        minLength: 1
      id:
        description: Unique identifier for the account
        type: string
        minLength: 1
      last_name:
        description: Customer's last name
        type: string
        minLength: 1
      wishlist_id:
        description: The identifier of the customer's wishlist.
        type: string
    example:
      custom: {}
      custom_identifiers:
        google_analytics: 8a51ca1dcb24d5e489e35d20922b810e
      email: bobby@tables.com
      first_name: Robert'); DROP
      handle: bobby@tables.com
      id: 57982b5fecc2
      last_name: TABLE Students;--
  AccountError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An error related to writing data to an account
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - missing
              - invalid
              - duplicate
          field:
            description: The offending field name
            type: string
    example:
      code: invalid
      field: last_name
      message: can't be empty
  AccountVerificationError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An error while creating a user account
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - verification_required
    example:
      code: verification_required
      message: 'can''t create account: customer used e-mail address in store'
  AddWishlistItemError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: Unknown product
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - invalid
              - unknown_product
    example:
      code: unknown_product
      message: Can't find product with id '1234_AB/S'
  AddWishlistItemRequest:
    type: object
    required:
      - item
    properties:
      item:
        description: Item to add to the wishlist
        type: object
        required:
          - product_id
        properties:
          product_id:
            description: The ID of the product to add to the wishlist
            type: string
    example:
      item:
        product_id: 1234_AB/S
  Address:
    allOf:
      - $ref: '#/definitions/AddressFields'
      - type: object
        required:
          - street
          - house_number
          - first_name
          - last_name
          - postal_code
          - city
          - country_id
    example:
      city: Utrecht
      country_id: NL
      first_name: App
      house_number: '154'
      last_name: Tester
      postal_code: 3514 AZ
      street: Hooghiemstraplein
      telephone: 030-2769165
  AddressField:
    description: Identifier of an address field
    type: string
    enum:
      - first_name
      - last_name
      - telephone
      - company
      - vat_number
      - street
      - house_number
      - addition
      - postal_code
      - city
      - country_id
  AddressFieldConfig:
    description: Address field configuration
    type: object
    required:
      - blacklist
      - order
    properties:
      blacklist:
        description: A list of blacklisted address field identifiers
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/AddressField'
      order:
        description: An *ordered* list of address field identifiers
        type: array
        maxItems: 5
        minItems: 5
        uniqueItems: true
        items:
          type: string
          enum:
            - street
            - house_number
            - addition
            - city
            - postal_code
  AddressFields:
    description: An address
    properties:
      addition:
        description: Addition
        type: string
        minLength: 1
      city:
        description: The city name
        type: string
        minLength: 1
      company:
        description: The company name of the recipient
        type: string
        minLength: 1
      country_id:
        $ref: '#/definitions/CountryCode'
      first_name:
        description: The recipient's first name
        type: string
        minLength: 1
      house_number:
        description: House number
        type: string
        minLength: 1
      last_name:
        description: The recipient's last name
        type: string
        minLength: 1
      postal_code:
        description: Postal or ZIP code
        type: string
        minLength: 1
      state:
        description: The state code.
        type: string
        minLength: 1
      street:
        description: Street name
        type: string
        minLength: 1
      telephone:
        description: The phone number of the recipient
        type: string
        minLength: 1
  AnalyticsTracker:
    description: Description of an analytics tracker
    type: object
    required:
      - type
    properties:
      type:
        type: string
    discriminator: type
  ApplePayConfig:
    description: Apple pay configuration (if enabled)
    type: object
    required:
      - country_code
      - currency_code
      - capabilities
      - merchant_id
      - networks
    properties:
      capabilities:
        description: Supported merchant capabilities
        type: array
        minItems: 1
        items:
          type: string
          enum:
            - 3ds
            - emv
            - debit
            - credit
      country_code:
        $ref: '#/definitions/CountryCode'
      currency_code:
        $ref: '#/definitions/currency_code'
      merchant_id:
        description: Merchant identifier
        type: string
        minLength: 1
      networks:
        description: Supported payment networks
        type: array
        minItems: 1
        items:
          type: string
          enum:
            - amex
            - discover
            - mastercard
            - privatelabel
            - visa
    example:
      capabilities:
        - 3ds
        - emv
        - debit
        - credit
      country_code: GB
      currency_code: GBP
      merchant_id: merchant.com.scotchsoda.highstreet.app
      networks:
        - amex
        - discover
        - mastercard
        - privatelabel
        - visa
  AuthError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: Authorization Error
        required:
          - code
        properties:
          code:
            description: Error code
            type: string
            enum:
              - unauthorized
  Barcode:
    description: Description of a barcode.
    type: object
    required:
      - type
      - value
    properties:
      type:
        description: The barcode type.
        type: string
        enum:
          - code128
          - qr
      value:
        description: The value to encode as a barcode.
        type: string
        minLength: 1
    example:
      type: code128
      value: '100302107016259158'
  BrandedMedia:
    type: object
    required:
      - url
    properties:
      url:
        description: Image URL for Branded Media
        type: string
  Campaign:
    description: >
      A reward the customer can collect.


      Campaigns may *optionally* provide a set of `conditions` the customer has
      to fulfill in order to collect the reward.


      The conditions and reward can be omitted in order to show the customer a
      general message.
    type: object
    required:
      - id
      - description
      - validity
      - conditions
    properties:
      conditions:
        description: >-
          A set of conditions the customer has to fulfill in order to collect
          the reward. Set this to an empty array (`[]`) if there are no
          conditions.
        type: array
        default: []
        items:
          $ref: '#/definitions/CollectionCondition'
      description:
        $ref: '#/definitions/RewardDescription'
      id:
        description: >-
          Unique identifier for the campaign. The identifer is NOT displayed to
          the customer.
        type: string
      reward:
        $ref: '#/definitions/Reward'
      validity:
        allOf:
          - description: The time period the campaign is valid for.
          - $ref: '#/definitions/Period'
    example:
      barcode:
        type: code128
        value: '1000000193'
      conditions:
        - threshold: 550
          type: amount_spent
      description:
        long: This is the long description
        short: This is a summary
        title: 20% discount on your next order
      id: '1000000193'
      reward:
        product_id: 1234_A-B
        type: bonus_product
      validity:
        start: 1495432718
  CancelledResponse:
    description: A Successful Cancel Response
    type: object
    required:
      - status
    properties:
      status:
        description: Should be CANCELLED or NOT_FOUND_CLUSTER_WIDE
        type: string
        minLength: 1
        example: CANCELLED
  Cart:
    description: A cart
    type: object
    required:
      - id
      - items
      - promotional_items
      - totals
    properties:
      _errors:
        description: List of ephemeral cart errors.
        type: array
        items:
          $ref: '#/definitions/CartError'
      _messages:
        description: '**Not implemented**'
        type: array
        maxItems: 0
        items:
          type: object
      coupon_codes:
        description: List of applied coupon codes
        type: array
        items:
          $ref: '#/definitions/CartCouponCode'
      id:
        description: Unique identifier of the cart.
        type: string
        example: a1b2c3d4e5f6
      items:
        description: List of items
        type: array
        items:
          $ref: '#/definitions/CartItem'
      loyalty_totals:
        $ref: '#/definitions/CartTotalsLoyalty'
      promotional_items:
        description: List of free products that a user can pick from
        type: array
        items:
          $ref: '#/definitions/CartPromotionalItem'
      tax_included:
        description: Is tax included in prices?
        type: boolean
      totals:
        $ref: '#/definitions/CartTotals'
      vouchers:
        description: List of vouchers
        type: array
        items:
          $ref: '#/definitions/CartVoucher'
  CartCouponCode:
    description: A coupon code
    type: object
    required:
      - code
    properties:
      code:
        description: The coupon code.
        type: string
        minLength: 1
        example: 100EUROOFF
      id:
        description: Identifier of the coupon code.
        type: string
        minLength: 1
        example: a1b2c3d4e5f6
      temp_id:
        description: Temporary identifier.
        type: string
        minLength: 1
  CartError:
    type: object
    required:
      - type
    properties:
      message:
        description: Developer friendly error message
        type: string
      type:
        type: string
    discriminator: type
  CartItem:
    description: A cart item.
    type: object
    required:
      - product_id
      - quantity
      - prices
    properties:
      bundle_configuration:
        $ref: '#/definitions/CartItemBundleConfiguration'
      configuration:
        $ref: '#/definitions/CartItemConfiguration'
      custom:
        description: Custom attributes
        type: object
      id:
        description: Unique identifier of the item.
        type: string
        minLength: 1
      prices:
        $ref: '#/definitions/CartItemPrices'
      product_id:
        description: Product identifier
        type: string
        minLength: 1
      promotional_item_id:
        description: >-
          Indicates if a product is in fact a promotional product belonging to a
          specific promotion as indicated in promotional_items
        type: string
        minLength: 1
      promotions:
        description: A list of promotions applicable to this product
        type: array
        items:
          $ref: '#/definitions/Promotion'
      quantity:
        description: Quantity
        type: number
        minimum: 0
      temp_id:
        description: Temporary identifier of the item.
        type: string
        minLength: 1
  CartItemBundleConfiguration:
    description: Configuration of the bundle for bundle products
    type: array
    maxItems: 1
    minItems: 1
    items:
      description: A bundle option
      type: object
      required:
        - option
        - selection
        - quantity
      properties:
        option:
          description: Bundle option ID
          type: number
          minLength: 1
        quantity:
          description: Quantity
          type: number
          minimum: 0
        selection:
          description: Selected product ID
          type: string
          minLength: 1
      example:
        option: 12
        quantity: 1
        selection: 12345_A
  CartItemConfiguration:
    description: The configured attributes for configurable products.
    type: object
    required:
      - child_product_id
    properties:
      child_product_id:
        description: Product identifier of the child product
        type: string
        minLength: 1
    example:
      child_product_id: 6f5e4d3c2b1a
  CartItemPrices:
    description: List of prices
    type: object
    required:
      - original
      - effective
      - effective_tax_free
      - total
    properties:
      custom:
        description: Map of custom prices
        type: object
        default: {}
      effective:
        description: Effective price of the product at the unit level (taxes included)
        type: number
      effective_tax_free:
        description: Effective price of the product at the unit level (taxes excluded)
        type: number
      original:
        description: Original price of the product at the unit level
        type: number
      total:
        description: >-
          Effective price of the line item (quantity * effective price -
          discounts)
        type: number
  CartPromotionalItem:
    description: A Promotional cart item.
    type: object
    properties:
      id:
        description: The identifier of the promotion
        type: string
        minLength: 1
      product_ids:
        description: >-
          A list of product identifiers, can include configurable or simple
          product ids
        type: array
        minLength: 1
        items:
          type: string
  CartTotals:
    description: Totals
    type: object
    required:
      - discount
      - sub_total
      - tax
      - shipping
      - grand_total
    properties:
      discount:
        description: The discount **TODO** platform wide definition of discount.
        type: number
        example: 0
      grand_total:
        description: Final amount to be paid.
        type: number
        example: 104.95
      shipping:
        description: The total amount of shipping costs.
        type:
          - number
          - 'null'
        example: 4.95
      sub_total:
        description: The sub total
        type: number
        example: 100
      tax:
        description: The total amount of order tax.
        type: number
        example: 20
  CartTotalsLoyalty:
    description: Loyalty totals
    type: object
    required:
      - discount
    properties:
      discount:
        description: Total discount given through loyalty program
        type: number
        example: 10
  CartVoucher:
    description: A voucher applied in the cart
    type: object
    required:
      - id
    properties:
      id:
        description: Unique identifier of the voucher redeem claim
        type: string
        minLength: 1
      temp_id:
        description: Temporary identifier of the voucher
        type: string
        minLength: 1
      voucher_id:
        description: Unique identifier of the voucher
        type: string
        minLength: 1
    example:
      id: '10000034'
  Category:
    description: A category
    type: object
    required:
      - id
      - title
      - product_count
    properties:
      children:
        type: array
        items:
          $ref: '#/definitions/Category'
      id:
        description: The id of the Category
        type: string
      image:
        description: |
          A url to an image of the category. Currently this is not used
        type: string
      include_in_menu:
        description: defines wether to display this in the menu
        type: boolean
      position:
        type: integer
      product_count:
        description: |
          The number of products that can be found in this category. This is
          currently always set to 8
        type: integer
      recommendations:
        description: Describes a list of recommended products for this category
        type: object
        required:
          - recommender_id
          - title
        properties:
          recommender_id:
            description: |
              Recommender identifier. See the "Featured Products" endpoint.
            type: string
          title:
            description: Display title (localised) of the recommendation
            type: string
      title:
        description: The localised human readable name of the category
        type: string
  Checkout:
    description: A checkout
    type: object
    required:
      - _errors
      - addresses
      - coupons
      - email
      - id
      - payment_method
      - shipping_method
      - tax_included
      - totals
    properties:
      _errors:
        description: |
          List of errors the client has to resolve in order to convert the
          checkout session to an order.
        type: array
        items:
          $ref: '#/definitions/CheckoutError'
      addresses:
        $ref: '#/definitions/CheckoutAddresses'
      coupons:
        $ref: '#/definitions/CouponList'
      custom:
        description: A hash of custom attributes to include on the checkout
        type: object
      email:
        $ref: '#/definitions/OptionalEmail'
      id:
        description: Checkout identifier
        type: string
        minLength: 1
      payment_method:
        $ref: '#/definitions/PaymentMethod'
      shipping_method:
        allOf:
          - $ref: '#/definitions/ShippingMethod'
          - x-nullable: true
      tax_included:
        description: Is tax included in the prices?
        type: boolean
      totals:
        $ref: '#/definitions/CartTotals'
  CheckoutAddresses:
    description: |
      The customer's billing and shipping addresses.

      **NOTE**: *If the `shipping_address` is `null` and the list of
      `_errors` does not contain an error referencing the `shipping_address`
      field, the billing address will be used as the shipping address*.
    type: object
    required:
      - billing_address
      - shipping_address
    properties:
      billing_address:
        $ref: '#/definitions/OptionalAddress'
      shipping_address:
        $ref: '#/definitions/OptionalAddress'
  CheckoutConfig:
    description: Checkout configuration
    type: object
    required:
      - security_icons
      - terms
      - url_patterns
    properties:
      security_icons:
        description: |
          List of security icon asset names to be shown
        type: array
        uniqueItems: true
        items:
          type: string
          format: uri
      terms:
        description: |
          A URL to a (merchant hosted) terms and conditions web page
        type: string
        format: uri
      url_patterns:
        description: |
          List of URL patterns that can be used to detect a payment on a hosted
          payment page (such as paypal) is done.
        type: object
        required:
          - cancellation
          - dismissal
          - failure
          - success
        properties:
          cancellation:
            description: |
              List of patterns that indicate the payment was cancelled by the
              customer
            type: array
            items:
              $ref: '#/definitions/URLPattern'
          dismissal:
            description: >
              List of patterns that indicate the payment has finished and there
              is

              no need to indicate a status
            type: array
            items:
              $ref: '#/definitions/URLPattern'
          failure:
            description: List of patterns that indicate the payment failed
            type: array
            items:
              $ref: '#/definitions/URLPattern'
          success:
            description: List of patterns that indicate the payment succeeded
            type: array
            items:
              $ref: '#/definitions/URLPattern'
        additionalProperties: false
    example:
      security_icons:
        - https://www.image-host.com/thuiswinkel-waarborg.jpg
      terms: https://www.merchant.com/terms-and-conditions
      url_patterns:
        cancellation:
          - host: www.merchant.com
            path: /../checkout/cancelled
        dismissal:
          - host: www.merchant.com
            path: /../checkout/dismissed
        failure:
          - host: www.merchant.com
            path: /../checkout/failed
        success:
          - host: www.merchant.com
            path: /../checkout/success
  CheckoutError:
    description: An error in the checkout
    type: object
    required:
      - code
      - field
    properties:
      code:
        description: Error code
        type: string
        enum:
          - missing
          - invalid
      field:
        description: Field that the error refers to
        type: string
        enum:
          - billing_address
          - coupon_codes
          - email
          - payment_method
          - shipping_address
          - shipping_method
  CheckoutFinalization:
    type: object
    required:
      - hpp
      - order_id
    properties:
      hpp:
        description: |
          The URL of the hosted payment page. May be `null` indicating no
          additional steps are required for the payment.
        type:
          - string
          - 'null'
        format: uri
        x-nullable: true
      order_id:
        description: Identifier of the created order
        type: string
  CollectionCondition:
    description: >-
      A collection threshold describes an entity the customer has to collect to
      receive the reward.
    type: object
    required:
      - type
      - threshold
    properties:
      threshold:
        description: The numeric threshold the custom has to reach
        type: number
        minimum: 0
      type:
        description: >
          The entity to collect. Currently the only supported entity is
          `points_balance`.


          Additional entities may be supported in the future.
        type: string
        minLength: 1
        enum:
          - points_balance
    example:
      threshold: 500
      type: points_balance
  ContactDetails:
    description: |
      The contact details of the Store
    type: object
    properties:
      email:
        description: The Email Address of the store
        type:
          - string
          - 'null'
        x-nullable: true
      telephone:
        description: The Telephone Number of the store
        type:
          - string
          - 'null'
        x-nullable: true
    additionalProperties: false
  ContentExtension:
    description: |
      A Content Extension used to display to the user
    type: object
    properties:
      content:
        description: The Content
        type: string
      content_type:
        description: Whether the content is URL or HTML
        type: string
      id:
        description: The ID of the content extension
        type: string
      name:
        description: The Content Name
        type: string
    additionalProperties: false
  ContentPage:
    type: object
    properties:
      type:
        description: The type of content page
        type: string
        enum:
          - toc
          - page
          - separator
    discriminator: type
    example:
      - items:
          - personal: false
            show_guest: false
            show_registered_user: true
            title: About Us
            type: page
            url: https://merchant.com/nl-nl/about-us
          - personal: false
            show_guest: true
            show_registered_user: true
            title: Terms & Conditions
            type: page
            url: https://merchant.com/nl-nl/terms
          - personal: true
            show_guest: true
            show_registered_user: true
            title: Track & Trace
            type: page
            url: https://merchant.com/nl-nl/track-and-trace
          - type: separator
          - personal: false
            show_guest: true
            show_registered_user: true
            title: About This App
            type: page
            url: https://highstreetmobile.com/about-this-app
        title: Content Pages
        type: toc
  Coordinates:
    description: GPS coordinates
    type: object
    required:
      - latitude
      - longitude
    properties:
      latitude:
        description: Latitude
        type: number
        maximum: 90
        minimum: -90
      longitude:
        description: Longitude
        type: number
        maximum: 180
        minimum: -180
    example:
      latitude: 52.0986345
      longitude: 5.1251368
  Country:
    description: A country
    type: object
    required:
      - code
      - name
      - address_field_config
    properties:
      address_field_config:
        $ref: '#/definitions/AddressFieldConfig'
      code:
        $ref: '#/definitions/CountryCode'
      name:
        description: A human readable, localized country name
        type: string
        minLength: 1
      states:
        description: List of states
        type: array
        items:
          $ref: '#/definitions/State'
    example:
      - address_field_config:
          blacklist:
            - vat_number
            - company
          order:
            - house_number
            - street
            - addition
            - postal_code
            - city
        code: US
        name: United States
        states:
          - code: CA
            name: California
  CountryCode:
    description: >-
      A two character [ISO 3166-1
      Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
    type: string
    maxLength: 2
    minLength: 2
  CountryList:
    description: A list of countries
    type: object
    required:
      - countries
    properties:
      countries:
        type: array
        minItems: 1
        uniqueItems: true
        items:
          $ref: '#/definitions/Country'
  Coupon:
    description: A coupon
    type: object
    required:
      - code
    properties:
      code:
        description: Coupon code
        type: string
        minLength: 1
  CouponList:
    description: List of coupons used in the checkout session
    type: array
    items:
      $ref: '#/definitions/Coupon'
  CreateStockSubscription:
    type: object
    required:
      - product_id
      - installation_id
    properties:
      email:
        description: Customer's email address
        type: string
        format: email
      installation_id:
        description: Customer's push notification installation ID.
        type: string
      product_id:
        description: |
          A product ID. Only fully configured products are supported.
        type: string
    example:
      email: test@highstreetmobile.com
      installation_id: >-
        HS_eyJtYXJrZXRpbmdfY2xvdWQiOiI5YzdlMWI3ZS02Yzc1LTRjODMtYTZkOS0wYWYzMjlhYTBhNWEiLCJvbmVzaWduYWwiOiJjYzM5YWZkOS0zMzM5LTRiOWYtYTJiNS02ZjUyOTQ5Mzk3MmQifQ==
      product_id: 1234_AB-S
  Deeplink:
    description: A deeplink
    type: object
    required:
      - deeplink
    properties:
      deeplink:
        description: Absolute deeplink URL
        type: string
        format: uri
  DeeplinkPageError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An error related to the provided webpage
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - no_applink
  DeeplinkURLError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An error related to the provided webpage URL
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - invalid
  Email:
    description: E-mail address of the customer
    type: string
    format: email
    minLength: 1
  Err:
    description: Highstreet Error
    type: object
    properties:
      debug:
        description: |
          Debugging data. Can be anything. Only exposed in staging environments.
      message:
        description: Developer friendly error message.
        type: string
  FeaturedProductList:
    description: List of featured products
    type: object
    required:
      - results
    properties:
      results:
        description: List of product search results
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/ProductSearchResult'
  Filter:
    description: A filter with its available options
    type: object
    required:
      - type
      - name
      - id
    properties:
      id:
        description: ID of the attribute to filter on
        type: string
      name:
        description: Localized display name of the filter
        type: string
      type:
        description: The filter type
        type: string
        enum:
          - in
          - range
          - eq
    discriminator: type
    example:
      code: c_size
      name: Size
      type: in
      values:
        - name: Small
          product_count: 9
          value: S
        - name: Medium
          product_count: 14
          value: 29/32
        - name: Large
          product_count: 17
          value: 29/32
  FilterRange:
    type: object
    required:
      - min
      - max
    properties:
      max:
        description: The maximum value that can be selected
        type: number
      min:
        description: The minimum value that can be selected
        type: number
  FilterValue:
    type: object
    required:
      - id
      - name
    properties:
      id:
        description: The filter option ID
        type: string
      name:
        description: Localized display text
        type: string
      product_count:
        description: |
          Number of expected search results when this filter is applied
        type: integer
        minimum: 0
    example:
      id: 29/30
      name: 29/30
      product_count: 14
  FilterValues:
    type: object
    required:
      - values
    properties:
      values:
        description: List of available options
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/FilterValue'
  HotSpot:
    description: >
      Configuration describing the position and contents of the hotspots that
      are to be displayed on

      the image
    type: object
    properties:
      position:
        description: Coordinates describing the position to display the hotspot
        type: object
        properties:
          x:
            description: Position on the X axis
            type: number
          'y':
            description: Position on the Y axis
            type: number
      product_slots:
        description: An array of product ids used to fetch product data
        type: array
        maxItems: 4
        minItems: 1
        items:
          type: string
  InstallationId:
    type: object
    properties:
      id:
        description: |
          A base 64 encoded json hash containing the installation id
          for various push providers
        type: string
    example:
      id: HS_eyJvbmVzaWduYWwiOiI5==
  InvalidReindexCategoriesRequest:
    allOf:
      - $ref: '#/definitions/Err'
      - description: UnknownCountry
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - invalid
              - unknown_country
    example:
      code: unknown_country
      message: There is no environment configured for the country "NL"
  InvalidStockNotificationsRequest:
    allOf:
      - $ref: '#/definitions/Err'
      - description: UnknownCountry
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - invalid
              - unknown_country
              - missing_translation
    example:
      code: unknown_country
      message: There is no environment configured for the country "NL"
  Job:
    description: A Cachewarmer Job
    type: object
    properties:
      args:
        description: >-
          The args for the cache warmer, arg[0] is the mercahnt, arg[1] is the
          storefront
        type: array
        items:
          type: string
      class:
        description: The type of cache warmer job
        type: string
        example: Catalog2::Cache::Warmer
      created_at:
        description: Timestamp of when the job was created
        type: integer
        example: 1611810515
      jid:
        description: The Job ID, used to cancel the job in the future
        type: string
        example: 99a6c322c6ac41dae20b295e
      queue:
        description: The queue it is placed on. This will normally be default
        type: string
        example: default
      retry:
        description: Whether the job will be retried if it fails
        type: boolean
        example: true
      scheduled_at:
        description: Timestamp of when the job will be run
        type: integer
        example: 1611810515
  JobList:
    description: A List of Jobs
    type: array
    items:
      type: string
      example: abc-def-ghi
  JobListResponse:
    description: A list of cache warmer jobs
    type: object
    required:
      - jobs
    properties:
      jobs:
        type: array
        items:
          $ref: '#/definitions/Job'
  LayoutConfig:
    type: object
    properties:
      home_wall:
        description: Defines configuration options for the home wall
        type: object
        required:
          - background_color
          - gutter_size
          - horizontal_margin
          - shadow_alpha
          - tile_corner_radius
          - vertical_margin
        properties:
          background_color:
            $ref: '#/definitions/RGBA'
          gutter_size:
            description: >
              Distance in points between tiles inside a rectangular pattern on
              the home wall. Only

              used when 2 or more tiles are added to a rectangular grid pattern.
            type: number
            default: 2
          horizontal_margin:
            description: >
              Total horizontal distance in points between the edges of the home
              wall and the

              patterns. Since the patterns are centered horizontally the offset
              for the patterns are

              half of this value on both sides.
            type: number
            default: 0
          shadow_alpha:
            description: >
              Opacity of shadow on home wall tiles. This is the only variable on
              the tile shadow

              that is configurable.
            type: number
            default: 0
          tile_corner_radius:
            description: Corner radius of the home wall tiles.
            type: number
            default: 0
          vertical_margin:
            description: Vertical distance between adjacent patterns.
            type: number
            default: 2
      image_gallery:
        description: Defines configuration options for the image gallery on the PDV
        type: object
        required:
          - horizontal_margin
          - vertical_margin
        properties:
          horizontal_margin:
            description: The distance in points around the side of the image
            type: number
            default: 0
          vertical_margin:
            description: The distance in points around the top of the image
            type: number
            default: 0
          video_content_mode:
            description: |
              How should product videos be fitted in the reserved space?

              In `fit` mode the full video is scaled to be visible, maintaining
              the video's aspect ratio. This may lead to leaving some of the
              reserved space empty.

              In `fill` mode the video is scaled to fill the reserved space
              completely, maintaining the video's aspect ratio. This may lead to
              some parts of the video being cut off (since they end up outside
              the reserved space).
            type: string
            enum:
              - fit
              - fill
  Look:
    type: object
    properties:
      hotspots:
        type: array
        maxItems: 4
        minItems: 1
        items:
          $ref: '#/definitions/HotSpot'
      id:
        description: unique identifier of the resource
        type: string
      image:
        type: object
        properties:
          0x:
            type: string
          1x:
            type: string
      image_key:
        type: string
      images:
        type: object
        properties:
          background-568h@2x~iphone:
            type: string
          background-667h@2x~iphone:
            type: string
          background-667h@3x~iphone:
            type: string
          background-736h@3x~iphone:
            type: string
          background@2x~ipad:
            type: string
          background@2x~iphone:
            type: string
          background@2x~watch:
            type: string
          background~ipad:
            type: string
      lookbook_id:
        description: unique identifier of lookbook that this look belongs to
        type: string
  Lookbook:
    type: object
    properties:
      display_categories:
        description: >
          A list of category ids that this lookbooks is connected to. This will
          mean that the

          lookbook wil be displayed at the top of the plp page for the listed
          categories
        type: array
        items:
          type: string
      front_images:
        type: object
        properties:
          background-568h@2x~iphone:
            type: string
          background-667h@2x~iphone:
            type: string
          background-667h@3x~iphone:
            type: string
          background-736h@3x~iphone:
            type: string
          background@2x~ipad:
            type: string
          background@2x~iphone:
            type: string
          background@2x~watch:
            type: string
          background~ipad:
            type: string
      id:
        description: unique identifier of the resource
        type: string
      title:
        description: The title of the Lookbook
        type: string
  Lookbooks:
    type: array
    items:
      $ref: '#/definitions/Lookbook'
  Looks:
    type: array
    items:
      $ref: '#/definitions/Look'
  LoyaltyMembership:
    description: A loyalty membership
    type: object
    required:
      - confirmed
      - collection_counters
    properties:
      card_barcode:
        allOf:
          - description: The barcode associated with the customer's loyalty card.
          - $ref: '#/definitions/Barcode'
      collection_counters:
        description: >
          A set of counters for custom "entities" the customer has collected.
          Set this to an empty object (`{}`) if collecting custom entities is
          not part of the loyalty program.


          **TODO**: Needs a better name.

          **TODO**: Improve documentation.
        type: object
        default: {}
        additionalProperties:
          type: integer
        example:
          amount_spent: 350
          facebook_likes: 2
          instagram_likes: 3
          subscription_level: 0
      confirmed:
        description: |
          Has the customer confirmed their membership?

          Set this to `true` if confirmation is **not** required.
        type: boolean
        default: true
      membership_level:
        description: >
          Defines configuration/properties related to a customer's membership
          level
        type: object
        properties:
          id:
            description: The id of the membership level
            type: string
          title:
            description: The human readable name of the membership level
            type: string
        example:
          id: MBL1
          title: Gold
      points_balance:
        description: >-
          The number of points the customer has collected. Can be omitted if the
          loyalty program does not involve a points balance.
        type: integer
        minimum: 0
        example: 999
    example:
      card_barcode:
        type: code128
        value: '10000000123'
      collection_counters:
        amount_spent: 350
        facebook_likes: 1
        orders_placed: 3
        twitter_retweets: 3
      confirmed: true
      membership_level:
        id: MBL1
        title: Gold
      points_balance: 350
  LoyaltyMembershipError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An error related to the customer's loyalty membership
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - no_membership
              - disabled
    example:
      code: disabled
      message: loyalty platform is disabled for this merchant
  LoyaltyOrder:
    description: An order
    type: object
    required:
      - id
      - number
      - totals
    properties:
      billing_address:
        allOf:
          - description: The billing address associated with the order
          - $ref: '#/definitions/Address'
      creation_date:
        description: A UNIX timestamp of the date and time the order was created.
        type: integer
        minimum: 0
        example: 1500460060
      currency_code:
        allOf:
          - description: >-
              The three character [ISO
              4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for
              the currency the order was made with.
          - $ref: '#/definitions/currency_code'
      id:
        description: >-
          Unique identifier of the order. Identifiers **should not** be
          displayed to the customer.
        type: string
        minLength: 1
        example: PNZfEiFcNM
      items:
        description: List of purchased items.
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/LoyaltyOrderItem'
      number:
        description: Order number. Order numbers **should** be displayed to the customer.
        type: string
        minLength: 1
        example: EU000027546
      payments:
        description: List of payments associated with the order.
        type: array
        items:
          $ref: '#/definitions/Payment'
      prices_include_tax:
        description: Do the prices include tax? Applies to *all* prices for the order.
        type: boolean
        default: true
      shipments:
        description: List of shipments associated with the order.
        type: array
        items:
          $ref: '#/definitions/Shipment'
      source:
        description: Source of the order.
        type: string
        enum:
          - app
          - web
          - store
        example: app
      status:
        description: Order status
        type: string
        enum:
          - created
          - confirmed
          - cancelled
          - returned
          - completed
          - unknown
      totals:
        $ref: '#/definitions/Totals'
  LoyaltyOrderItem:
    description: A purchased item
    type: object
    required:
      - full_price
      - product_id
      - product_name
      - product_image
      - quantity
    properties:
      configuration:
        description: A list of product attributes.
        type: array
        items:
          $ref: '#/definitions/OrderItemAttribute'
      full_price:
        description: >-
          The final price of the item. The quantity and item discounts should be
          taken into account.
        type: number
        minimum: 0
      product_id:
        description: >-
          Unique identifier of the purchased product. Identifiers are **not**
          shown to the customer.
        type: string
        minLength: 1
      product_image:
        description: URL of the image to display for the purchased product.
        type: string
        format: uri
        minLength: 1
      product_name:
        description: The display name of the purchased product.
        type: string
        minLength: 1
      quantity:
        description: The quantity the customer specified for this item.
        type: number
        minimum: 0
    example:
      configuration:
        - name: color
          value: white
        - name: size
          value: M
      full_price: 19.99
      product_id: 1234_001-M
      product_image: https://images.com/basic-tshirt.jpg
      product_name: Basic T-Shirt
      quantity: 2
  Message:
    type: object
    required:
      - id
      - publish_at
      - placements
      - title
      - body
      - visual
    properties:
      body:
        description: The description of the message.
        type: string
      id:
        description: Unique identifier of the resource
        type: string
      placements:
        description: List of placements where the message should be displayed.
        type: array
        items:
          type: string
          enum:
            - cart
      publish_at:
        description: >-
          A UNIX timestamp that indicates the moment from when the message is
          published.
        type: integer
      title:
        description: The title of the message.
        type: string
      unpublish_at:
        description: >-
          A UNIX timestamp that indicates the moment until when the message is
          published.
        type: integer
      visual:
        $ref: '#/definitions/Visual'
  MessageList:
    type: object
    required:
      - messages
    properties:
      messages:
        type: array
        items:
          $ref: '#/definitions/Message'
  OAuthRequest:
    description: OAuth 2.0 request
    type: object
    required:
      - grant_type
    properties:
      grant_type:
        type: string
    discriminator: grant_type
  OAuthToken:
    description: Standard OAuth 2.0 Access Token Response
    type: object
    required:
      - access_token
      - token_type
    properties:
      access_token:
        description: The access token
        type: string
      expires_in:
        description: |
          The number of seconds the access token is valid for. Unnecessary if
          the access token cannot expire.
        type: integer
        minimum: 0
      refresh_token:
        description: |
          A refresh token that can be used to obtain a new access token.

          **Implementation notes**

          * If a `refresh_token` is given the app stores it and exchanges it
            for a new access token when the current access token is expired.
          * When refreshing a token and no *new* `refresh_token` is given the
            app assumes the original refresh token is still valid.
          * When no `refresh_token` is given when requesting a token using an
            authorization code the app assumes the access token
        type: string
      token_type:
        description: Token type
        type: string
        enum:
          - bearer
  OAuthTokenError:
    description: Standard OAuth 2.0 Error Response
    type: object
    required:
      - error
    properties:
      error:
        description: |
          An error code. See https://tools.ietf.org/html/rfc6749#section-5.2.
        type: string
        enum:
          - invalid_request
          - invalid_client
          - invalid_grant
          - unauthorized_client
          - unsupported_grant_type
          - invalid_scope
      error_description:
        description: |
          Description of the error intended for developers
        type: string
      error_uri:
        description: |
          URL to a human-readable web page with error information
          intended for developers
        type: string
        format: uri
  OnboardingConfig:
    description: Onboarding launch numbers. Launch numbers start counting at 0.
    type: object
    required:
      - account
      - push
      - loyalty
    properties:
      account:
        description: Show account onboarding on nth launch
        type: number
        minimum: 0
      loyalty:
        description: Show loyalty onboarding on nth launch
        type: number
        minimum: 0
      push:
        description: Show push onboarding on nth launch
        type: number
        minimum: 0
    example:
      account: 5
      loyalty: 0
      push: 3
  OpeningHour:
    description: An opening hour timeslot.
    type: object
    required:
      - open
      - close
    properties:
      close:
        description: Closing time
        type: string
        pattern: ^[012][0-9]:[0-5][0-9]$
        example: '16:00'
      open:
        description: Opening time
        type: string
        pattern: ^[012][0-9]:[0-5][0-9]$
        example: '10:00'
  OpeningHours:
    description: |
      Opening hours of the store. The keys are the days of the week, where 0 is
      monday. A missing key means the store is *closed*.
    type: object
    maxProperties: 7
    properties:
      '0':
        type: array
        items:
          $ref: '#/definitions/OpeningHour'
      '1':
        type: array
        items:
          $ref: '#/definitions/OpeningHour'
      '2':
        type: array
        items:
          $ref: '#/definitions/OpeningHour'
      '3':
        type: array
        items:
          $ref: '#/definitions/OpeningHour'
      '4':
        type: array
        items:
          $ref: '#/definitions/OpeningHour'
      '5':
        type: array
        items:
          $ref: '#/definitions/OpeningHour'
      '6':
        type: array
        items:
          $ref: '#/definitions/OpeningHour'
    additionalProperties: false
  OptionalAddress:
    allOf:
      - $ref: '#/definitions/AddressFields'
      - type:
          - object
          - 'null'
    x-nullable: true
  OptionalEmail:
    description: E-mail address of the customer
    type:
      - string
      - 'null'
    format: email
    minLength: 1
  Order:
    description: An order
    type: object
    required:
      - id
      - number
      - totals
    properties:
      barcode:
        $ref: '#/definitions/Barcode'
      billing_address:
        allOf:
          - description: The billing address associated with the order
          - $ref: '#/definitions/Address'
      creation_date:
        description: A UNIX timestamp of the date and time the order was created.
        type: integer
        minimum: 0
        example: 1500460060
      currency_code:
        allOf:
          - description: >-
              The three character [ISO
              4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for
              the currency the order was made with.
          - $ref: '#/definitions/currency_code'
      id:
        description: >-
          Unique identifier of the order. Identifiers **should not** be
          displayed to the customer.
        type: string
        minLength: 1
        example: PNZfEiFcNM
      items:
        description: List of purchased items.
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/OrderItem'
      number:
        description: Order number. Order numbers **should** be displayed to the customer.
        type: string
        minLength: 1
        example: EU000027546
      payments:
        description: List of payments associated with the order.
        type: array
        items:
          $ref: '#/definitions/Payment'
      prices_include_tax:
        description: Do the prices include tax? Applies to *all* prices for the order.
        type: boolean
        default: true
      shipments:
        description: List of shipments associated with the order.
        type: array
        items:
          $ref: '#/definitions/Shipment'
      source:
        description: Source of the order.
        type: string
        enum:
          - app
          - web
          - store
        example: app
      status:
        $ref: '#/definitions/OrderStatus'
      totals:
        $ref: '#/definitions/Totals'
  OrderItem:
    description: A purchased item
    type: object
    required:
      - full_price
      - product_id
      - product_name
      - product_image
      - quantity
    properties:
      configuration:
        description: Configuration options of the product
        type: array
        items:
          $ref: '#/definitions/OrderItemConfiguration'
      full_price:
        description: >-
          The final price of the item. The quantity and item discounts should be
          taken into account.
        type: number
        minimum: 0
      product_id:
        description: >-
          Unique identifier of the purchased product. Identifiers are **not**
          shown to the customer.
        type: string
        minLength: 1
      product_image:
        description: >-
          URL of the image to display for the purchased product (this may be
          served from imgix if the merchant supports this)
        type: string
        format: uri
        minLength: 1
      product_name:
        description: The display name of the purchased product.
        type: string
        minLength: 1
      quantity:
        description: The quantity the customer specified for this item.
        type: number
        minimum: 0
    example:
      full_price: 19.99
      product_id: 1234_001-M
      product_image: https://images.com/basic-tshirt.jpg
      product_name: Basic T-Shirt
      quantity: 2
  OrderItemAttribute:
    description: A product attribute.
    type: object
    required:
      - name
      - value
    properties:
      name:
        description: The name of the product attribute.
        type: string
        minLength: 1
      value:
        description: The value of the product attribute.
        type: string
        minLength: 1
    example:
      name: color
      value: black
  OrderItemConfiguration:
    description: A Configuration of an Order Item
    type: object
    required:
      - name
      - value
    properties:
      name:
        description: Name of the Configuration
        type: string
        minLength: 1
      value:
        description: Value of the Configuration
        type: string
        minLength: 1
    example:
      name: size
      value: M
  OrderStatus:
    description: Order status
    type: string
    enum:
      - cancelled
      - completed
      - confirmed
      - created
      - delivered
      - failed
      - open
      - ready_for_pick_up_in_store
      - returned
      - shipped
      - unknown
  OrderSummary:
    description: An Order Summary
    type: object
    required:
      - id
      - number
    properties:
      barcode:
        $ref: '#/definitions/Barcode'
      creation_date:
        description: A UNIX timestamp of the date and time the order was created.
        type: integer
        minimum: 0
        example: 1500460060
      id:
        description: >-
          Unique identifier of the order. Identifiers **should not** be
          displayed to the customer.
        type: string
        minLength: 1
        example: PNZfEiFcNM
      items:
        description: List of purchased items.
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/OrderItem'
      number:
        description: Order number. Order numbers **should** be displayed to the customer.
        type: string
        minLength: 1
        example: EU000027546
      status:
        $ref: '#/definitions/OrderStatus'
  PartialAddress:
    allOf:
      - $ref: '#/definitions/AddressFields'
      - type: object
  Payment:
    description: A payment
    type: object
    required:
      - method_name
      - status
    properties:
      amount:
        description: Amount paid.
        type: number
        minimum: 0
        example: 19.99
      method_name:
        description: Name of the payment method.
        type: string
        minLength: 1
        example: iDeal (ING)
      status:
        description: Status of the payment
        type: string
        enum:
          - paid
          - not_paid
          - refunded
        example: paid
  PaymentMethod:
    description: The chosen payment method
    type:
      - object
      - 'null'
    required:
      - code
    properties:
      code:
        description: The payment method code
        type: string
        minLength: 1
      options:
        description: The selected sub-option
        type: array
        maxItems: 1
        items:
          required:
            - code
          properties:
            code:
              description: The sub option code
              type: string
              minLength: 1
            price:
              description: Fee for using this sub option
              type: number
              default: 0
              minimum: 0
      price:
        description: Fee for using this payment method
        type: number
        default: 0
        minimum: 0
  PaymentMethodList:
    type: object
    required:
      - payment_methods
    properties:
      payment_methods:
        description: |
          List of payment methods. **NOTE**: *Keep in mind that this list may be
          empty*.
        type: array
        items:
          $ref: '#/definitions/PaymentMethodOption'
  PaymentMethodOption:
    description: Description of a payment method
    type: object
    required:
      - title
      - code
      - price
    properties:
      code:
        description: Identifier of the payment method
        type: string
        minLength: 1
      default:
        description: Is this the default shipping method?
        type: boolean
        default: false
      image:
        description: URL of an image representing the payment method
        type: string
        format: uri
      options:
        description: List of available sub-options
        type: array
        items:
          $ref: '#/definitions/PaymentMethodSubOption'
      price:
        description: Fee for using the payment method
        type: number
        default: 0
        minimum: 0
      title:
        description: Name of the payment method
        type: string
        minLength: 1
    example:
      code: adyen_ideal
      options:
        - code: '001'
          image: https://adyen.com/imgs/ideal_ing.png
          price: 0
          title: ING
        - code: '002'
          image: https://adyen.com/imgs/ideal_abn.png
          price: 0
          title: ABN Amro
      price: 0
      title: iDeal
  PaymentMethodSubOption:
    $ref: '#/definitions/sub_option'
  PaymentResult:
    type: object
    properties:
      status:
        type: string
        enum:
          - success
          - failure
          - cancelled
  Period:
    description: A period of time.
    type: object
    required:
      - start
    properties:
      end:
        description: >-
          A UNIX timestamps marking the end of the period. When omitted the
          period is assumed to last "forever".
        type: integer
        minimum: 0
      start:
        description: A UNIX timestamp marking the start of the period.
        type: integer
        minimum: 0
    example:
      end: 1498258328
      start: 1498731956
  Product:
    allOf:
      - $ref: '#/definitions/ProductAttributes'
      - properties:
          configuration:
            $ref: '#/definitions/ProductConfigurationOptions'
          prefill_bucket:
            description: >
              Apps store the customer's preferred configuration options, such
              that

              they can be prefilled on product detail page. The apps segment
              these

              preferred configuration options to avoid prefilling an adult size

              when viewing children's products, for example. The
              `prefill_bucket`

              is used for this segmentation.
            type: string
            example: 6a473d3e
          promotions:
            description: A list of promotions applicable to this product
            type: array
            items:
              $ref: '#/definitions/Promotion'
          variation_attribute_values:
            $ref: '#/definitions/ProductConfiguration'
  ProductAnalyticsAttributes:
    description: |
      Describes the custom fields to add when tracking product-related events.
    type: object
    properties:
      firebase:
        description: >
          Custom fields to add when tracking product-related events with
          Firebase.
        type: object
        minProperties: 1
    example:
      firebase:
        item_color: '001'
        item_on_sale: true
  ProductAttributes:
    description: A Product
    type: object
    required:
      - id
      - sku
      - name
      - pricing
    properties:
      analytics_attributes:
        $ref: '#/definitions/ProductAnalyticsAttributes'
      available:
        $ref: '#/definitions/ProductAvailabilityStatus'
      caption:
        $ref: '#/definitions/ProductCaption'
      custom_attributes:
        $ref: '#/definitions/ProductCustomAttributeList'
      description:
        $ref: '#/definitions/ProductDescription'
      id:
        $ref: '#/definitions/ProductID'
      labels:
        $ref: '#/definitions/ProductLabelList'
      media:
        $ref: '#/definitions/ProductMediaGroup'
      name:
        $ref: '#/definitions/ProductName'
      pricing:
        $ref: '#/definitions/ProductPricing'
      size_guide_url:
        $ref: '#/definitions/ProductSizeGuideURL'
      sku:
        $ref: '#/definitions/ProductSKU'
      specifications:
        $ref: '#/definitions/ProductSpecification'
      stock_notifications:
        $ref: '#/definitions/ProductStockNotificationsFlag'
      store_availability:
        $ref: '#/definitions/ProductStoreAvailabilityFlag'
      web_url:
        $ref: '#/definitions/ProductWebURL'
  ProductAvailability:
    description: Describes the availability of a product
    type: object
    required:
      - id
      - availability_class
      - available
      - qty
    properties:
      availability_class:
        description: Indicator for the stock status
        type: string
        enum:
          - available
          - low
          - unavailable
      available:
        description: |
          Can this product be ordered? Note that product may be available even
          if it's out of stock due to backorders.
        type: boolean
      id:
        description: A product ID
        type: string
      message:
        description: A short, localized availability message
        type: string
      pricing:
        $ref: '#/definitions/ProductPricing'
      promotions:
        description: A list of promotions applicable to this product
        type: array
        items:
          $ref: '#/definitions/Promotion'
      qty:
        description: The available quantity
        type: number
        minimum: 0
      qty_increment:
        description: |
          The number to increment the quantity with. Assume the default value
          when absent.
        type: number
        default: 1
      qty_min:
        description: |
          The minimum order quantity. Assume the default value when absent.
        type: number
        default: 1
        minimum: 0
    example:
      available: true
      id: 1234_AB-S
      message: Delivered in two weeks
      pricing:
        effective: 14.95
      qty: 23
      qty_max: 3
  ProductAvailabilitySet:
    description: Lists the availability of a product and its variants
    type: object
    required:
      - availabilities
    properties:
      availabilities:
        type: array
        items:
          $ref: '#/definitions/ProductAvailability'
  ProductAvailabilityStatus:
    description: |
      Is the product available? The data on the availability endpoint should
      be preferred over this data.
    type: boolean
    default: true
    example: true
  ProductCaption:
    description: Localized caption for the product.
    type: string
    minLength: 1
    example: Summer Collection
  ProductConfiguration:
    description: |
      The configured variation attributes for a product. Keys are variation
      attribute IDs and values are the variation attribute value IDs.
    type: object
    additionalProperties:
      type: string
      minLength: 1
    example:
      color: '001'
      size: m
  ProductConfigurationOptions:
    description: The configuration options of a product
    type: object
    required:
      - variation_attributes
      - variants
    properties:
      variants:
        description: List of variants
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/ProductVariant'
      variation_attributes:
        description: |
          The attribute IDs that are variation attributes. The IDs refer to
          the attributes in `#/custom_attributes`.
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/ProductVariationAttribute'
        example:
          - id: color
            name: Color
            values:
              - id: '001'
                name: Blue
              - id: '002'
                name: Red
          - id: size
            name: Size
            values:
              - id: s
                name: Small
              - id: m
                name: Medium
              - id: l
                name: Large
  ProductCustomAttribute:
    description: A custom product attribute
    type: object
    required:
      - id
      - value
    properties:
      id:
        description: Identifier of the custom attribute
        type: string
        minLength: 1
      name:
        description: Localized display name of the custom attribute
        type: string
        minLength: 1
      value:
        description: Value of the custom attribute
    example:
      id: brand
      name: Brand
      value: Whitelabel
  ProductCustomAttributeList:
    description: List of custom attributes
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/ProductCustomAttribute'
  ProductDescription:
    description: A localized product description. May contain HTML.
    type: string
    minLength: 1
    example:
You
can read me if you want to.
  ProductID:
    description: The product ID
    type: string
    minLength: 1
    example: '1234'
  ProductLabel:
    description: A label to be displayed in the app.
    type: object
    required:
      - id
    properties:
      background_color:
        $ref: '#/definitions/RGBA'
      custom:
        description: An object with custom label data
        type: object
      display_text:
        description: Localized text to display to the customer.
        type: string
        minLength: 1
      id:
        description: Label ID. The labels `new` and `sale` are standard labels.
        type: string
        minLength: 1
      text_color:
        $ref: '#/definitions/RGBA'
    example:
      background_color:
        - 255
        - 255
        - 255
        - 0.5
      custom:
        placement: top-left
      display_text: Brand New
      id: new
      text_color:
        - 0
        - 0
        - 0
        - 1
  ProductLabelList:
    description: List of labels to show. Each label must have a unique ID.
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/ProductLabel'
  ProductListContent:
    description: Describes the type of product list
    type: object
    properties:
      type:
        description: The type of product list
        type: string
        enum:
          - recommendation
          - recently_viewed
    discriminator: type
  ProductMediaGroup:
    description: List of media items
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/ProductMediaItem'
    example:
      - type: img
        url: https://merchant.imgix.net/blue-shirt-front.jpg
      - type: img
        url: https://merchant.imgix.net/blue-shirt-back.jpg
      - large: https://vimeo.com/large.mp4
        small: https://vimeo.com/small.mp4
        type: vid
  ProductMediaItem:
    description: A visual of the product.
    type: object
    required:
      - type
    properties:
      type:
        description: The type of media
        type: string
        enum:
          - img
          - vid
    discriminator: type
  ProductName:
    description: Localized name of the product.
    type: string
    minLength: 1
    example: Sweater
  ProductPricing:
    description: Describes the pricing of a product
    type: object
    required:
      - effective
    properties:
      custom:
        description: Custom prices.
        type: object
        minProperties: 1
        additionalProperties:
          description: A custom price.
          type: number
          minimum: 0
      effective:
        description: Effective price of the product
        type: number
        minimum: 0
      original:
        description: Original price of the product
        type: number
        minimum: 0
    example:
      custom:
        member_effective: 45
        member_original: 89.99
      effective: 45
      original: 109.99
  ProductSKU:
    description: The Stock Keeping Unit (SKU) of the product.
    type: string
    minLength: 1
    example: CS-4632-0001
  ProductSearchResult:
    description: A single product search result
    type: object
    required:
      - id
      - sku
      - name
      - pricing
    properties:
      available:
        $ref: '#/definitions/ProductAvailabilityStatus'
      caption:
        $ref: '#/definitions/ProductCaption'
      custom_attributes:
        $ref: '#/definitions/ProductCustomAttributeList'
      id:
        description: >
          The product ID to use when getting the details for this product.


          This is not necessarily the same as the ID of the
          `display_product_id`.
        type: string
        minLength: 1
      labels:
        $ref: '#/definitions/ProductLabelList'
      media_item:
        $ref: '#/definitions/ProductMediaItem'
      name:
        $ref: '#/definitions/ProductName'
      pricing:
        $ref: '#/definitions/ProductPricing'
      promotions:
        description: A list of promotions applicable to this product
        type: array
        items:
          $ref: '#/definitions/Promotion'
      sku:
        $ref: '#/definitions/ProductSKU'
    example:
      available: true
      caption: Summer collection
      custom_attributes:
        - id: product_type
          name: Product Soort
          value: Sweater
      id: '1234'
      labels:
        - id: sale
      media_item:
        type: img
        url: https://img.com/blue-sweater-front.jpg
      name: Sweater
      pricing:
        effective: 19.95
        original: 24.95
      sku: '1234'
  ProductSearchResultSet:
    description: Product search results
    type: object
    required:
      - results
      - filters
    properties:
      filters:
        description: Filters to refine search results.
        type: array
        items:
          $ref: '#/definitions/Filter'
      product_count:
        description: Totals number of search results for this query
        type: integer
        minimum: 0
        example: 46
      results:
        description: Product search results
        type: array
        items:
          $ref: '#/definitions/ProductSearchResult'
      sorting_options:
        description: Options to sort by
        type: array
        items:
          $ref: '#/definitions/Sorting'
  ProductSizeGuideURL:
    description: URL to a "Size Guide" webpage
    type: string
    format: uri
    minLength: 1
    example: https://merchant.com/size-guide.html
  ProductSpecification:
    description: A localized product specification. May contain HTML.
    type: string
    minLength: 1
    example:
Crew Neck
100% Cotton
ProductStockNotificationsFlag:
    description: |
      Should stock notifications be enabled for this product? This
      property will be omitted from the response when the value is `true`.
    type: boolean
    default: true
    example: false
  ProductStoreAvailabilityFlag:
    description: |
      Should the store availability feature be enabled for this product? This
      property will be omitted from the response when the value is `true`.
    type: boolean
    default: true
    example: false
  ProductVariant:
    allOf:
      - $ref: '#/definitions/ProductAttributes'
      - required:
          - variation_attribute_values
        properties:
          variation_attribute_values:
            $ref: '#/definitions/ProductConfiguration'
  ProductVariationAttribute:
    description: |
      Describes an attribute a product can be varied on, e.g. size or color.
    type: object
    required:
      - id
      - name
      - values
    properties:
      id:
        description: Identifier of the attribute
        type: string
        minLength: 1
      name:
        description: Display name of the variation attribute (localized)
        type: string
        minLength: 1
      values:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/ProductVariationAttributeValue'
  ProductVariationAttributeValue:
    description: Value of a variation attribute
    type: object
    required:
      - id
      - name
    properties:
      id:
        description: Identifier of the variation attribute value
        type: string
        minLength: 1
      name:
        description: Display name of the variation attribute value (localized)
        type: string
        minLength: 1
      swatch:
        description: |
          URL to a color swatch or preview of variations with this variation
          attribute value. [Image resizing](#tag/Image-Resizing) is supported.
        type: string
        format: uri
        minLength: 1
  ProductWebURL:
    description: Website URL the product is available on.
    type: string
    format: uri
    minLength: 1
    example: https://merchant.com/products/1234
  Promotion:
    description: A Promotion for a Product
    type: object
    properties:
      id:
        description: Identifier of the promotion
        type: string
      name:
        description: The name or label of the promotion
        type: string
  PurgeCompletedResponse:
    description: A Successful Purge Response
    type: object
    required:
      - status
    properties:
      status:
        description: Either COMPLETED or SCHEDULED
        type: string
        minLength: 1
  PushInstallation:
    type: object
    properties:
      appIdentifier:
        description: The app identifer eg com.denhamjeans.highstreet.app
        type: string
      appName:
        description: The name of the app eg Denham
        type: string
      appVersion:
        description: The version of the app
        type: string
      appVersionString:
        description: The semantic version of the app
        type: string
      backInStockNotificationsEnabled:
        description: >
          **DEPRECATED**: Can the device receive back in stock notifications?
          This

          flag is unused.
        type: boolean
      debug:
        description: Marks the device to accept test notifications
        type: boolean
      deviceModel:
        description: The brand of the device. eg iPhone
        type: string
      deviceToken:
        description: The unique identifier of the app
        type: string
      deviceType:
        description: The operating system of the device eg ios
        type: string
      email:
        description: The email adress of the user if they are logged in
        type: string
      language:
        description: The 2 digit language code of the device
        type: string
      locale:
        description: The 4 digit local code of the device. Eg country_LANGUAGE
        type: string
      notificationsEnabled:
        description: Can the device recieve notifications or not
        type: boolean
      selectedStorefront:
        description: The selected highstreet storefront
        type: string
      supportsSilentNotifications:
        type: boolean
      timeZone:
        description: The time zone of the device
        type: string
    example:
      appIdentifier: com.denhamjeans.highstreet.app
      appName: Denham
      appVersion: '29'
      appVersionString: 2.50.0
      backInStockNotificationsEnabled: false
      debug: false
      deviceModel: iPhone
      deviceToken: 29d3b2b3a603971d732df3d479e274f6497b35293dc71a3e0d3fd56da2c1f2d8
      deviceType: ios
      email: r2d2@highstreetmobile.com
      language: en
      locale: en_NL
      notificationsEnabled: true
      selectedStorefront: en-NL
      supportsSilentNotifications: false
      timeZone: Europe/Amsterdam
  PushOpen:
    type: object
    properties:
      installation_id:
        description: The installation id of the device
        type: string
      notification:
        type: object
        properties:
          _h:
            type: string
          _m:
            type: string
          _mt:
            type: integer
          _r:
            type: string
          _sid:
            type: string
          aps:
            type: object
            properties:
              alert:
                type: object
                properties:
                  body:
                    type: string
                  subtitle:
                    type: string
                  title:
                    type: string
              mutable-content:
                type: integer
              sound:
                type: string
          hs.body:
            type: string
            example: body
          hs.dl:
            type: string
          hs.title:
            type: string
    example:
      installation_id: 89yfo947fhyo8w7hgo9we97hfo8er7hvedbweb==
      notification:
        _h: tL1oxqk6wih2S2aOE0KfEwAAAAAA
        _m: MToxMTQ6MA
        _mt: 1
        _r: 17009c0b-0bf7-4b5a-b494-b5c91069a9c5
        _sid: SFMC
        aps:
          alert:
            body: Message body
            subtitle: null
            title: Message title
          mutable-content: 1
          sound: default
        hs.body: Message body
        hs.dl: hs://home
        hs.title: Message title
  RGBA:
    description: |
      A 4-element array describing a RGBA color value. The first three values
      (red, green, blue) range from `0` to `255`. The last number (opacity) from
      `0` to `1`.
    type: array
    maxItems: 4
    minItems: 4
    items:
      description: a color value.
      type: number
      maximum: 255
      minimum: 0
  RecommendationsDisabledError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: Recommendations are disabled for this merchant
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - not_enabled
    example:
      code: disabled
      message: Recommendations are not enabled for this merchant
  RefreshingResponse:
    description: A Successful Refresh Response
    type: object
    required:
      - status
      - job_ids
    properties:
      job_ids:
        type: array
        items:
          $ref: '#/definitions/JobList'
      status:
        description: Should be SCHEDULED
        type: string
        minLength: 1
        example: SCHEDULED
  RegistrationRequiredError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An error related to writing data to an account
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - registraiton_required
    example:
      code: registration_required
      message: feature only available for registered customers
  ReindexCategoriesRequest:
    description: Request to schedule a job to reindex categories
    type: object
    required:
      - countries
    properties:
      countries:
        description: List of country codes
        type: array
        items:
          $ref: '#/definitions/CountryCode'
    example:
      countries:
        - NL
        - BE
  RelatedProductGroup:
    description: A list of related products grouped by type.
    type: object
    required:
      - type
      - results
    properties:
      product_count:
        description: Totals number of related products
        type: integer
        minimum: 0
        example: 1
      results:
        description: List of product search results
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/ProductSearchResult'
      type:
        description: The type of relation
        type: string
        enum:
          - general
          - cross-sell
          - up-sell
          - accessories
        example: cross-sell
  RelatedProductGroupSet:
    type: object
    required:
      - related_product_groups
    properties:
      related_product_groups:
        type: array
        items:
          $ref: '#/definitions/RelatedProductGroup'
  Reward:
    description: Description of a reward.
    type: object
    required:
      - type
    properties:
      type:
        description: The type of reward.
        type: string
        enum:
          - bonus_product
          - money
          - percentage
    discriminator: type
  RewardDescription:
    description: User-facing description of a reward.
    type: object
    required:
      - title
      - short
      - long
    properties:
      image:
        description: |
          A URL for the voucher's image. Dimensions are 1242x510 pixels.

          Note that voucher images *may* contain text, which must be localised.
        type: string
        format: uri
        minLength: 1
      long:
        description: A **localised** detailed description of the voucher.
        type: string
        minLength: 1
      short:
        description: A **localised** short summary describing the voucher.
        type: string
        minLength: 1
      title:
        description: A **localised** title for the voucher.
        type: string
        minLength: 1
      wide_image:
        description: >
          A URL for the wide version of the voucher's image. Dimensions are
          2048x510 pixels.


          Note that voucher images *may* contain text, which must be localised.
        type: string
        format: uri
        minLength: 1
  ScheduledCategoriesReindexJob:
    description: Describes the job that has been scheduled
    type: object
    required:
      - job_ids
    properties:
      job_ids:
        description: Identifiers of the jobs. Useful to log for debugging.
        type: array
        items:
          type: string
  ScheduledStockNotification:
    description: A scheduled back in stock notification job
    type: object
    required:
      - id
    properties:
      id:
        description: Identifier of the stock notification job
        type: string
    example:
      id: 03b6c7d6bfa2
  ServerError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An internal server error
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - config_error
              - convert_error
              - fetch_error
    example:
      code: convert_error
      message: can't convert Basket to cart
  Shipment:
    description: A shipment
    type: object
    required:
      - address
      - method_name
      - status
    properties:
      address:
        allOf:
          - description: The shipping address associated with the shipment.
          - $ref: '#/definitions/Address'
      method_name:
        description: Name of the shipping method
        type: string
        minLength: 1
        example: UPS Ground Shipping
      status:
        description: Status of the shipment
        type: string
        enum:
          - not_shipped
          - shipped
          - delivered
        example: shipped
  ShippingMethod:
    $ref: '#/definitions/PaymentMethod'
  ShippingMethodList:
    type: object
    required:
      - shipping_methods
    properties:
      shipping_methods:
        description: |
          List of shipping methods **NOTE**: *Keep in mind that this list may be
          empty*.
        type: array
        items:
          $ref: '#/definitions/ShippingMethodOption'
  ShippingMethodOption:
    description: Description of an available shipping method
    type: object
    required:
      - title
      - code
      - price
    properties:
      code:
        description: Identifier of the shipping method
        type: string
        minLength: 1
      default:
        description: Is this the default shipping method?
        type: boolean
        default: false
      image:
        description: URL of an image representing the shipping method
        type: string
        format: uri
      options:
        description: List of available sub-options
        type: array
        items:
          $ref: '#/definitions/ShippingMethodSubOption'
      price:
        description: Fee for using the shipping method
        type: number
        default: 0
        minimum: 0
      title:
        description: Name of the shipping method
        type: string
        minLength: 1
    example:
      code: postnl
      image: https://postnl.nl/logo.png
      options:
        - code: a53d
          title: Ochtend
        - code: a53e
          title: Middag
        - code: a53f
          title: Avond
      price: 1.95
      title: Post NL
  ShippingMethodSubOption:
    $ref: '#/definitions/sub_option'
  SimpleStorefront:
    type: object
    properties:
      countries:
        description: A list of ISO country codes where the Storefront is valid
        type: array
        items:
          $ref: '#/definitions/CountryCode'
      id:
        description: The unique id of the storefront
        type: string
      language:
        description: The ISO Language code of the storefront
        type: string
    example:
      countries:
        - NL
        - BE
      id: nl-NL
      language: nl
  Sorting:
    description: An attribute to use for sorting
    type: object
    required:
      - name
      - id
    properties:
      id:
        description: >
          The unique id of the sorting option. Should be used as the value of
          the `sort` query

          parameter
        type: string
      name:
        description: The Localized display name of the sorting option
        type: string
    example:
      id: hightolow
      name: Price (High-Low)
  State:
    description: A state
    type: object
    required:
      - code
      - name
    properties:
      code:
        description: A two character state code.
        type: string
        maxLength: 2
        minLength: 2
      name:
        description: A human readable, localized state name
        type: string
        minLength: 1
    example:
      - code: CA
        name: California
  StockNotificationRequest:
    type: object
    required:
      - product_id
      - countries
      - title_translations
      - message_translations
    properties:
      countries:
        description: |
          One or more countries that the product has come back in stock in. If
          a product has come back in stock in The Netherlands (`NL`) but not in
          the United States (`US`) then `US` should not be included in the list.
        type: array
        items:
          description: A two character country code
          type: string
          maxLength: 2
          minLength: 2
      delivery_time:
        description: |
          The date and time the notification should be delivered to the customer
          in ISO 8601 standard format. Notifications will be sent as soon as
          possible by default.
        type: string
      max_recipients:
        description: |
          The maximum number of customers that will receive a notification. If
          the number of customers that want to receive a notification is higher
          than the maximum number of recipients the users that registered first
          are prioritised. Notifications are sent to all interested customers by
          default.
        type: number
        minimum: 1
      message_translations:
        description: |
          Translations for the body of the notification. All languages for the
          given `countries` should be included.
        type: array
        items:
          $ref: '#/definitions/Translation'
      product_id:
        description: The ID of the product that has come back in stock.
        type: string
      title_translations:
        description: |
          Translations for the title of the notification. All languages for the
          given `countries` should be included.
        type: array
        items:
          $ref: '#/definitions/Translation'
    example:
      countries:
        - NL
      delivery_time: '2019-11-04T13:25:34+00:00'
      max_receivers: 24
      message_translations:
        - language: en
          text: The Skim - Washed Up is back in stock. Be quick!
        - language: nl
          text: De Skim - Washed Up is terug. Wees er snel bij!
      product_id: 1234_AB-S
      title_translations:
        - language: en
          text: Guess What?
        - language: nl
          text: Goed nieuws
  StockSubscription:
    type: object
    required:
      - id
    properties:
      id:
        description: Identifier of the subscription
        type: string
    example:
      id: Y2MzOWFmZDktMzMzOS00YjlmLWEyYjUtNmY1Mjk0OTM5NzJkLjEyMzRfQUItUw==
  StockSubscriptionRequestError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An internal server error
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - invalid
    example:
      code: invalid
      message: the product ID is missing
  StockSubscriptionSummary:
    type: object
    required:
      - count
      - country
      - product_id
    properties:
      count:
        description: >
          The number of customers that are interested in receiving a
          notification

          when the product is back in stock
        type: number
        minimum: 0
      country:
        $ref: '#/definitions/CountryCode'
      product_id:
        description: A product ID
        type: string
  StockSubscriptionsList:
    type: object
    required:
      - stock_subscriptions
    properties:
      stock_subscriptions:
        type: array
        items:
          $ref: '#/definitions/StockSubscriptionSummary'
  Store:
    description: Description of a brick and mortar store
    type: object
    required:
      - id
      - name
      - address
      - coordinates
    properties:
      address:
        $ref: '#/definitions/PartialAddress'
      contact_details:
        $ref: '#/definitions/ContactDetails'
      content_extensions:
        type: array
        items:
          $ref: '#/definitions/ContentExtension'
      coordinates:
        $ref: '#/definitions/Coordinates'
      id:
        description: Unique identifier of the store
        type: string
        minLength: 1
      image:
        description: Image of the store
        type:
          - string
          - 'null'
        format: uri
        x-nullable: true
      name:
        description: Name of the store
        type: string
        minLength: 1
      official:
        description: Is this an official store?
        type: boolean
        default: false
      opening_hours:
        $ref: '#/definitions/OpeningHours'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
    example:
      address:
        city: Utrecht
        country_id: NL
        postal_code: 3511 KK
        street: Choorstraat 7
        telephone: 00 31 303004120
      coordinates:
        latitude: 5.1197
        longitude: 52.09123
      id: ff5e5f52-d62e-e511-80c8-02bfac10024b
      name: Scotch & Soda
  StoreAvailability:
    description: Availability of a product for a specific store
    type: object
    required:
      - availability
      - store
    properties:
      availability:
        $ref: '#/definitions/ProductAvailability'
      store:
        $ref: '#/definitions/Store'
  StoreAvailabilityResultSet:
    type: object
    required:
      - reference_location
      - results
    properties:
      reference_location:
        allOf:
          - description: The location that was used to find nearby stores
          - $ref: '#/definitions/Coordinates'
      results:
        description: List of product availabilities per store
        type: array
        items:
          $ref: '#/definitions/StoreAvailability'
  StoreList:
    description: List of stores
    type: object
    required:
      - reference_location
      - stores
    properties:
      reference_location:
        allOf:
          - description: The location that was used to find nearby stores
          - $ref: '#/definitions/Coordinates'
      stores:
        description: |
          List of stores ordered by the proximity to the reference location
        type: array
        items:
          $ref: '#/definitions/StoreListItem'
  StoreListItem:
    description: Description of a brick and mortar store
    type: object
    required:
      - id
      - name
      - address
      - coordinates
    properties:
      address:
        $ref: '#/definitions/PartialAddress'
      contact_details:
        $ref: '#/definitions/ContactDetails'
      content_extensions:
        type: array
        items:
          $ref: '#/definitions/ContentExtension'
      coordinates:
        $ref: '#/definitions/Coordinates'
      distance:
        description: Distance from the reference location in kilometres
        type: number
        minimum: 0
      id:
        description: Unique identifier of the store
        type: string
        minLength: 1
      image:
        description: Image of the store
        type:
          - string
          - 'null'
        format: uri
        x-nullable: true
      name:
        description: Name of the store
        type: string
        minLength: 1
      official:
        description: Is this an official store?
        type: boolean
        default: false
      opening_hours:
        $ref: '#/definitions/OpeningHours'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
    example:
      address:
        city: Utrecht
        country_id: NL
        postal_code: 3511 KK
        street: Choorstraat 7
        telephone: 00 31 303004120
      coordinates:
        latitude: 5.1197
        longitude: 52.09123
      distance: 0.9
      id: ff5e5f52-d62e-e511-80c8-02bfac10024b
      name: Scotch & Soda
  Storefront:
    description: A storefront
    type: object
    required:
      - identifier
      - configuration
    properties:
      configuration:
        description: The storefront configuration
        type: object
        required:
          - address_field_blacklist
          - address_field_order
          - analytics
          - app_store_id
          - appearance_attributes_filter
          - apple_pay
          - associated_product_types
          - category_view
          - checkout
          - checkout_external
          - configurable_item_buttons_always_visible
          - country
          - currency_locale
          - debug_analytics
          - default_address_country
          - event_tracking_host
          - feature_accounts
          - feature_apple_pay
          - feature_barcode_scanner
          - feature_favorite_icon_on_product_lists
          - feature_favorite_syncing
          - feature_inspirational_layout
          - feature_loyalty
          - feature_narrowcasting
          - feature_order_history
          - feature_personal_recommendations
          - firebase_cloud_messaging
          - language
          - loyalty
          - name
          - onboarding_timing
          - parse_application_id
          - parse_client_id
          - play_store_id
          - prefer_child_product_price
          - prefer_numeric_availability_info
          - prefillable_attributes_filter
          - price_decimals
          - root_category
          - sso
          - search_in_category
          - user_agent_id
          - website
        properties:
          address_field_blacklist:
            description: A list of blacklisted address fields
            type: array
            items:
              type: string
          address_field_order:
            description: An ordered list of a subset of address fields
            type: array
            maxItems: 5
            minItems: 5
            items:
              type: string
              enum:
                - street
                - house_number
                - addition
                - city
                - postal_code
            example:
              - street
              - house_number
              - addition
              - city
              - postal_code
          analytics:
            description: Analytics trackers data
            type: array
            items:
              $ref: '#/definitions/AnalyticsTracker'
          app_store_id:
            description: Apple App Store identifier
            type: number
            example: 1234567890
          appearance_attributes_filter:
            description: List of attribute codes affecting appearance.
            type: array
            items:
              type: string
            example:
              - color
          apple_pay:
            $ref: '#/definitions/ApplePayConfig'
          associated_product_types:
            description: |
              Types of associated products.

              This setting should be ignored on API v4.0 and up. The related
              products endpoint contains the types within the response.
            type: array
            items:
              type: string
              enum:
                - related
                - cross_sell
            example:
              - related
              - cross_sell
          category_view:
            description: Category view layout settings
            type: object
            required:
              - column_width_to_screensize_ratio
              - image_aspect_ratio
              - labels_height
            properties:
              column_width_to_screensize_ratio:
                description: Ratio between the column width and the screen width
                type: number
              image_aspect_ratio:
                description: Ratio between the category image height and width
                type: number
              labels_height:
                description: Height of the labels container in category view cells
                type: number
            example:
              column_width_to_screensize_ratio: 0.6
              image_aspect_ratio: 1
              labels_height: 65
          checkout:
            description: Which version of the checkout should be used?
            type: string
            enum:
              - external
              - native
              - web
          checkout_external:
            description: |
              Is an external checkout enabled? **DEPRECATED**: see `checkout`.
            type: boolean
            example: false
          configurable_item_buttons_always_visible:
            description: Should configuration popover buttons always be visible?
            type: boolean
          content:
            type: object
            properties:
              terms:
                description: Url to the terms and conditions page
                type: string
                format: uri
          country:
            $ref: '#/definitions/CountryCode'
          currency_locale:
            description: Locale to use for formatting currencies
            type: string
            example: nl_NL
          debug_analytics:
            description: Analytics trackers data for debug builds
            type: array
            items:
              $ref: '#/definitions/AnalyticsTracker'
          default_address_country:
            $ref: '#/definitions/CountryCode'
          event_tracking_host:
            description: Host name of the Events API. Can include a port.
            type: string
            example: events-staging.higshtreetapp-services.com:8080
          feature_accounts:
            description: Are accounts enabled?
            type: boolean
            example: false
          feature_apple_pay:
            description: Is Apple Pay enabled?
            type: boolean
            example: true
          feature_back_in_stock_notifications:
            description: Are back in stock notifications enabled?
            type: boolean
            example: false
          feature_barcode_scanner:
            description: Is the barcode scanner enabled?
            type: boolean
            example: false
          feature_favorite_icon_on_product_lists:
            description: Should the favorite icon be shown on product list pages?
            type: boolean
            example: true
          feature_favorite_syncing:
            description: Should favorities be synced to the server?
            type: boolean
            example: true
          feature_inspirational_layout:
            description: Is the inspirational layout enabled?
            type: boolean
            example: true
          feature_loyalty:
            description: Is there a loyalty program?
            type: boolean
            example: true
          feature_narrowcasting:
            description: Is narrowcasting enabled?
            type: boolean
            example: false
          feature_order_history:
            description: Is order history enabled?
            type: boolean
            example: false
          feature_personal_recommendations:
            description: Is the personal recommendations feature enabled?
            type: boolean
            example: true
          feature_store_availability:
            description: Is the store availability endpoint enabled?
            type: boolean
            example: false
          feature_store_locator:
            description: Is the native store locator enabled?
            type: boolean
            example: false
          firebase_cloud_messaging:
            description: Firebase cloud messaging configuration
            type: object
            required:
              - api_key
              - application_id
              - gcm_sender_id
            properties:
              api_key:
                description: The Server API key
                type: string
                minLength: 1
                example: AIzaSyDTpLUQU9wiG9EsRI5DXRoFY4r6VHPh5
              application_id:
                description: The application identifier within Firebase
                type: string
                minLength: 1
                example: lolaliza-5d32d
              gcm_sender_id:
                description: >-
                  The Google project number taken from Firebase. Sometimes
                  called (GCM) Sender ID.
                type: number
                example: 332905290874
          language:
            description: Two character language identifier
            type: string
            maxLength: 2
            minLength: 2
            example: en
          layout:
            $ref: '#/definitions/LayoutConfig'
          loyalty:
            description: Loyalty configuration
            type: object
            required:
              - feature_points_balance
              - feature_vouchers
              - feature_vouchers_in_cart
              - usps
            properties:
              feature_points_balance:
                description: Does the loyalty program have a points balance?
                type: boolean
                example: true
              feature_vouchers:
                description: Are vouchers enabled?
                type: boolean
                example: true
              feature_vouchers_in_cart:
                description: Are vouchers in the cart enabled?
                type: boolean
                example: false
              usps:
                description: Unique selling points
                type: array
                items:
                  $ref: '#/definitions/UniqueSellingPoint'
          max_number_of_coupons:
            description: |
              The maximum number of coupons that can be used in the cart /
              checkout. When the value is `null` an infinite amount of coupons
              can be used.
            type: number
            x-nullable: true
            example: 1
          name:
            description: Name of the app / merchant
            type: string
            minLength: 1
            example: Elabelz
          navigation:
            type: object
            properties:
              tab_items:
                type: array
                items:
                  $ref: '#/definitions/bottomBarItem'
          onboarding_timing:
            $ref: '#/definitions/OnboardingConfig'
          parse_application_id:
            description: Deprecated
            type: string
            example: deprecated
          parse_client_id:
            description: Deprecated
            type: string
            example: deprecated
          play_store_id:
            description: Google Play Store identifier
            type: string
            minLength: 1
            example: be.bluestores.lolaliza.highstreet.app
          prefer_child_product_price:
            description: Should the price of the child product be preferred?
            type: boolean
            example: true
          prefer_numeric_availability_info:
            description: |
              Should the exact available quantity be used to display available
              stock?
            type: boolean
            example: false
          prefillable_attributes_filter:
            description: Attributes codes of attributes that can be pre-filled
            type: array
            items:
              type: string
            example:
              - color_code
          price_decimals:
            description: Number of decimals to display for prices
            type: number
            maximum: 5
            minimum: 0
            example: 2
          root_category:
            description: Identifier of the root category
            type: string
            example: '2'
          search_in_category:
            description: Can search queries be restricted to a category?
            type: boolean
            example: true
          sso:
            description: An array of objects defining a single sign on button
            type: object
            properties:
              account_creation:
                description: A list of buttons to display on the account creation page
                type: array
                items:
                  description: The ID of the single sign on provider
                  type: string
                  example: facebook
              account_login:
                description: A list of buttons to display on the login page
                type: array
                items:
                  description: The ID of the single sign on provider
                  type: string
                  example: facebook
              feature_external_account_creation:
                description: >
                  determines wether to show a button or the form for account
                  creation
                type: boolean
          user_agent_id:
            description: User-Agent to use in in-app webview
            type: string
            example: Merchant_Highstreet
          website:
            description: Merchan't website URL
            type: string
            format: uri
            example: https://www.merchant.com
      identifier:
        description: The storefront identifier
        type: string
        minLength: 1
        example: nl-NL
  StorefrontError:
    description: An error during storefront selection
    type: object
    required:
      - error
    properties:
      error:
        description: A debug message
        type: string
  Storefronts:
    description: |
      A list of Storefronts. The value of `fallback` defines the id of the
      storefront to use as a catch all / rest of world storefront. If fallback
      is `null` then no rest of world option should be displayed in the app.
    type: object
    properties:
      fallback:
        description: |
          The id of the storefront to use as a fallback/rest of world storefront
        type: string
      storefronts:
        type: array
        items:
          $ref: '#/definitions/SimpleStorefront'
  Tag:
    description: |
      A Tag item used for searching and display
    type: object
    properties:
      id:
        description: The ID of the tag, to be used for searching
        type: string
      name:
        description: The display name of the tag, to be displayed to the user
        type: string
    additionalProperties: false
  Totals:
    description: Order totals
    type: object
    required:
      - discount
      - sub_total
      - tax
      - shipping
      - grand_total
    properties:
      discount:
        description: The total amount of order discount
        type: number
        default: 0
        minimum: 0
      grand_total:
        description: The final amount the customer paid
        type: number
        minimum: 0
      shipping:
        description: The total amount of shipping costs
        type:
          - number
          - 'null'
        default: 0
        minimum: 0
      sub_total:
        description: >
          The sub total.


          Order discounts and shipping costs should **not** be taken into
          account.
        type: number
        minimum: 0
      tax:
        description: >
          The total amount the customer paid in taxes.


          Shipping costs **should** be taken into account. Set this to `0` when
          all prices include tax already (i.e. when `prices_include_tax` is
          `true`).
        type: number
        default: 0
        minimum: 0
    example:
      discount: 19.99
      grand_total: 21.94
      shipping: 1.95
      sub_total: 19.99
      tax: 0
  Translation:
    type: object
    required:
      - language
      - text
    properties:
      language:
        description: Two characters language code
        type: string
      text:
        description: The translated text
        type: string
  URLPattern:
    type: object
    required:
      - host
      - path
    properties:
      host:
        description: Host name
        type: string
        minLength: 1
      path:
        description: The path (to be interpreted as a regexp)
        type: string
        minLength: 1
  UniqueSellingPoint:
    description: A unique selling point
    type: object
    required:
      - title
      - description
    properties:
      description:
        description: Description of the USP
        type: string
        minLength: 1
      title:
        description: Title of the USP
        type: string
        minLength: 1
    example:
      description: Very nice point
      title: First Unique Selling Point
  UnsupportedProductTypeError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An internal server error
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - invalid
    example:
      code: invalid
      message: product must be of type fixed or variant
  UpstreamError:
    allOf:
      - $ref: '#/definitions/Err'
      - description: An error related to connecting with an upstream service
        type: object
        required:
          - code
        properties:
          code:
            description: An error code
            type: string
            enum:
              - fetch_error
    example:
      code: fetch_error
      message: e-commerce platform temporarily unavailable
  Visitor:
    type: object
    required:
      - visitor_id
    properties:
      visitor_id:
        description: Unique identifier for the visitor
        type: string
        minLength: 1
    example:
      visitor_id: 1234-5678-9012-1234
  Visual:
    description: The visual content of an message.
    type: object
    required:
      - type
    properties:
      type:
        description: The type of visual element
        type: string
    discriminator: type
  Voucher:
    description: A voucher the customer has collected.
    type: object
    required:
      - id
      - description
      - validity
      - reward
    properties:
      barcode:
        $ref: '#/definitions/Barcode'
      description:
        $ref: '#/definitions/RewardDescription'
      id:
        description: >-
          Unique identifier for the voucher. Identifiers are *not* displayed to
          the customer.
        type: string
      reserved_in_cart:
        description: >-
          The identifier of the cart this voucher was redeemed in. Vouchers are
          reserved when the customer has redeemed them, but has not yet placed
          an order. This property should be omitted if the voucher is not
          reserved in any cart.
        type: string
      reward:
        $ref: '#/definitions/Reward'
      validity:
        allOf:
          - description: The time period the voucher is valid for.
          - $ref: '#/definitions/Period'
    example:
      barcode:
        type: code128
        value: '1000000192'
      description:
        image: http://images.com/voucher-1000000192.jpg
        long: This is the long description
        short: This is a summary
        title: 20% discount on your next order
      id: '1000000192'
      reserved_in_cart: 7ce9814d
      reward:
        product_id: 1234_A-B
        type: bonus_product
      validity:
        end: 1498327436
        start: 1498731956
  Wall:
    description: The home wall
    type: object
    required:
      - gutter_size
      - rows
    properties:
      gutter_size:
        description: |
          Size of the gutter to be displayed between home wall tiles in points
        type: number
      rows:
        description: List of rows
        type: array
        items:
          $ref: '#/definitions/WallRow'
  WallLookHotspot:
    description: A hotspot
    type: object
    required:
      - position
      - product_slots
    properties:
      position:
        description: |
          The position of the hotspot. The position is relative, expressed as
          an x and y coordinate in the 0 to 1 range.
        type: object
        required:
          - x
          - 'y'
        properties:
          x:
            description: The x coordinate
            type: number
            maximum: 1
            minimum: 0
          'y':
            description: The y coordinate
            type: number
            maximum: 1
            minimum: 0
      product_slots:
        type: array
        items:
          description: A list of product slots.
          type: object
          required:
            - products
          properties:
            products:
              description: A product ID
              type: array
              items:
                type: string
  WallRect:
    description: |
      A rectangle. The items in the array in order:
      - X coordinate for the top left
      - Y coordinate for the top left
      - rectangle width
      - rectangle height
    type: array
    maxItems: 4
    minItems: 4
    items:
      type: number
  WallResourceLink:
    description: Describes a linked resource
    type: object
    required:
      - type
    properties:
      type:
        description: The resource type
        type: string
        enum:
          - category
          - product
          - lookbook
          - lookbook_look
          - url
          - contentextension
    discriminator: type
  WallRow:
    description: A row on the home wall
    type: object
    required:
      - type
    properties:
      type:
        description: The row type
        type: string
    discriminator: type
  WallTile:
    description: A tile
    type: object
    required:
      - type
      - rect
    properties:
      id:
        description: Tile ID
        type: string
      rect:
        $ref: '#/definitions/WallRect'
      resource:
        $ref: '#/definitions/WallResourceLink'
      type:
        description: Tile type
        type: string
    discriminator: type
  WarmingResponse:
    description: A Successful Warming Response
    type: object
    required:
      - status
      - job_ids
    properties:
      job_ids:
        type: array
        items:
          $ref: '#/definitions/JobList'
      status:
        description: Should be SCHEDULED
        type: string
        minLength: 1
        example: SCHEDULED
  Wishlist:
    description: A wishlist
    type: object
    required:
      - items
      - item_count
    properties:
      item_count:
        description: Total number of items in the wishlist
        type: number
        example: 1
      items:
        description: List of items on the wishlist
        type: array
        items:
          $ref: '#/definitions/WishlistItem'
  WishlistItem:
    description: An item on a wishlist
    type: object
    required:
      - id
      - product
    properties:
      id:
        description: Identifier of the item
        type: string
      product:
        $ref: '#/definitions/ProductSearchResult'
  authorization_code:
    allOf:
      - $ref: '#/definitions/OAuthRequest'
      - required:
          - code
        properties:
          code:
            description: |
              The authorization code the app that obtained through the applink.
            type: string
  bonus_product:
    allOf:
      - $ref: '#/definitions/Reward'
      - description: A reward of type "bonus_product".
        type: object
        required:
          - product_id
        properties:
          product_id:
            description: Identifier of the bonus product.
            type: string
            minLength: 1
        example:
          product_id: 1234_A-B
  bottomBarItem:
    type: object
    properties:
      content:
        type: object
        properties:
          personal:
            type: boolean
          title:
            type: string
          url:
            type: string
      icon:
        type: string
      id:
        type: string
      title:
        type: string
      type:
        type: string
  cart_error:
    allOf:
      - $ref: '#/definitions/CartError'
      - type: object
        required:
          - code
        properties:
          code:
            type: string
            enum:
              - cart_full
        example:
          code: cart_full
          message: Maximum number of items is 50
  cart_item_error:
    allOf:
      - $ref: '#/definitions/CartError'
      - type: object
        properties:
          code:
            type: string
            enum:
              - product_unavailable
              - quantity_changed
              - unknown_item
              - item_id_changed
          id:
            description: Item identifier
            type: string
          previous_id:
            description: |
              The previous item identifier. Only used when the error code is
              `item_id_changed`.
            type: string
          temp_id:
            description: >
              Temporary item identifier. Only used when an item is being added
              and

              the error code is `quantity_changed` or `product_unavailable`.
            type: string
        example:
          code: product_unavailable
          message: Product is unavailable
          temp_id: a1b2c3d4e5f6
  category:
    allOf:
      - $ref: '#/definitions/WallResourceLink'
      - description: A link to a category view
        type: object
        required:
          - id
        properties:
          id:
            description: The identifier of the category.
            type: string
  contentextension:
    allOf:
      - $ref: '#/definitions/WallResourceLink'
      - description: A link to a content extension that is launched by the in-app browser
        type: object
        required:
          - title
          - url
        properties:
          title:
            description: |
              The title to display in the navigation bar
            type: string
          url:
            description: A url to the webpage
            type: string
  coupon_code_error:
    allOf:
      - $ref: '#/definitions/CartError'
      - type: object
        required:
          - code
        properties:
          code:
            type: string
            enum:
              - invalid_coupon
              - expired_coupon
              - too_many_coupons
          id:
            description: Coupon code identifier
            type: string
            minLength: 1
          temp_id:
            description: Temporary coupon code identifier
            type: string
            minLength: 1
        example:
          code: invalid_coupon
          message: Invalid coupon code
          temp_id: 08925601-ffd2-41af-b6b9-ed5325b9dd85
  currency_code:
    description: >-
      A three character [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
      currency code.
    type: string
    maxLength: 3
    minLength: 3
    example: EUR
  eq:
    allOf:
      - $ref: '#/definitions/Filter'
      - $ref: '#/definitions/FilterValues'
  facebook:
    allOf:
      - $ref: '#/definitions/AnalyticsTracker'
      - type: object
        required:
          - app_id
        properties:
          app_id:
            description: Facebook App ID
            type: string
            minLength: 1
            example: 1234567890
  google_analytics:
    allOf:
      - $ref: '#/definitions/AnalyticsTracker'
      - type: object
        required:
          - tracking_id
          - storefront_dimension_index
        properties:
          storefront_dimension_index:
            description: Index of the "storefront dimention" within Google Analytics
            type: number
            example: 2
          tracking_id:
            description: Google Analytics tracking ID
            type: string
            minLength: 2
            example: UA-11111111-1
  grid:
    allOf:
      - $ref: '#/definitions/WallRow'
      - type: object
        required:
          - config
          - tiles
        properties:
          config:
            description: Configuration of the row
            type: object
            required:
              - height
            properties:
              height:
                description: The height of the row in blocks.
                type: number
                minimum: 0
          tiles:
            description: List of tiles
            type: array
            items:
              $ref: '#/definitions/WallTile'
  guest:
    allOf:
      - $ref: '#/definitions/OAuthRequest'
      - {}
  image:
    allOf:
      - $ref: '#/definitions/Visual'
      - required:
          - url
        properties:
          url:
            description: >
              The url of the image.

              Supports resizing as described on the "Image Resizing" section of
              this docs.
            type: string
  img:
    allOf:
      - $ref: '#/definitions/ProductMediaItem'
      - type: object
        required:
          - url
        properties:
          url:
            description: >
              The URL to a product image. [Image resizing](#tag/Image-Resizing)
              is

              supported.
            type: string
            format: uri
            minLength: 1
    example:
      type: img
      url: https://merchant.imgix.net/blue-shirt.jpg
  img_:
    allOf:
      - $ref: '#/definitions/WallTile'
      - description: An image tile
        type: object
        required:
          - content
        properties:
          content:
            description: The image content
            type: object
            required:
              - url
              - parallax
            properties:
              parallax:
                description: Should the parallax effect be applied?
                type: boolean
              title:
                description: A title which should be superimposed over the image
                type: string
              url:
                description: >
                  An image URL. [Image resizing](#tag/Image-Resizing) is
                  supported.
                type: string
                format: uri
  in:
    allOf:
      - $ref: '#/definitions/Filter'
      - $ref: '#/definitions/FilterValues'
  look:
    allOf:
      - $ref: '#/definitions/WallTile'
      - description: A single item of a lookbook (a "look")
        type: object
        required:
          - content
        properties:
          content:
            description: The look content
            type: object
            required:
              - lookbook
              - look
              - image
              - hotspots
            properties:
              hotspots:
                description: The hotspots
                type: array
                maxItems: 4
                items:
                  $ref: '#/definitions/WallLookHotspot'
              image:
                description: The image URL
                type: string
                format: uri
              look:
                description: The identifier of the look
                type: string
              lookbook:
                description: The identifier of the lookbook
                type: string
  lookbook:
    allOf:
      - $ref: '#/definitions/WallResourceLink'
      - description: A link to a lookbook
        type: object
        required:
          - id
        properties:
          id:
            description: The identifier of the lookbook.
            type: string
  lookbook_look:
    allOf:
      - $ref: '#/definitions/WallResourceLink'
      - description: A single item of a lookbook (a "look")
        type: object
        required:
          - id
          - meta
        properties:
          id:
            description: The identifier of the look
            type: string
          meta:
            description: Additional data to aid in navigation
            type: object
            properties:
              index:
                description: The index of the look within the lookbook
                type: number
              lookbook_id:
                description: The id of the lookbook that the look belongs to
                type: string
  money:
    allOf:
      - $ref: '#/definitions/Reward'
      - required:
          - amount
          - currency_code
        properties:
          amount:
            description: The amount of discount.
            type: number
            minimum: 0
          currency_code:
            $ref: '#/definitions/currency_code'
  page:
    allOf:
      - $ref: '#/definitions/ContentPage'
      - description: Object describing a single content page
        type: object
        required:
          - title
          - url
        properties:
          icon:
            description: The id of an asset to display next to the title
            type: string
          logged_in:
            description: Wether to display this to logged in users or not
            type: boolean
            default: false
          personal:
            description: Wether this is a personal content page or not
            type: boolean
            default: false
          title:
            description: Display title of the content page
            type: string
            minLength: 1
          url:
            description: URL to the content page
            type: string
            format: uri
  password:
    allOf:
      - $ref: '#/definitions/OAuthRequest'
      - required:
          - username
          - password
        properties:
          password:
            description: The users password
            type: string
          username:
            description: The usersname usually an email address
            type: string
  percentage:
    allOf:
      - $ref: '#/definitions/Reward'
      - required:
          - percentage
        properties:
          percentage:
            description: The disount percentage.
            type: number
            maximum: 100
            minimum: 1
        example:
          percentage: 30
  product:
    allOf:
      - $ref: '#/definitions/WallResourceLink'
      - description: A link to a product detail page
        type: object
        required:
          - id
        properties:
          id:
            description: The identifier of the product.
            type: string
  product_list:
    allOf:
      - $ref: '#/definitions/WallTile'
      - description: A scrollable list of products
        type: object
        properties:
          content:
            $ref: '#/definitions/ProductListContent'
  range:
    allOf:
      - $ref: '#/definitions/Filter'
      - $ref: '#/definitions/FilterRange'
  recently_viewed:
    allOf:
      - $ref: '#/definitions/ProductListContent'
      - description: A list of recently viewed products
        type: object
        required:
          - type
        properties:
          title:
            description: Display title of the recently viewed product list
            type: string
  recommendation:
    allOf:
      - $ref: '#/definitions/ProductListContent'
      - description: A personal recommendation.
        type: object
        required:
          - type
          - recommender_id
        properties:
          recommender_id:
            description: ID of the recommendation to use
            type: string
          title:
            description: Display title of the product list
            type: string
  refresh_token:
    allOf:
      - $ref: '#/definitions/OAuthRequest'
      - type: object
        required:
          - refresh_token
        properties:
          refresh_token:
            description: |
              A refresh token that previously issued by the merchant.
            type: string
  separator:
    allOf:
      - $ref: '#/definitions/ContentPage'
      - description: A "separator" entry
        type: object
        additionalProperties: false
  sign_in_with_apple:
    allOf:
      - $ref: '#/definitions/OAuthRequest'
      - required:
          - token
        properties:
          token:
            description: The Apple identity token. This is a JWT.
            type: string
  sub_option:
    description: A payment method sub-option
    type: object
    required:
      - title
      - code
    properties:
      code:
        description: Identifier of the sub-option
        type: string
        minLength: 1
      default:
        description: Is this the default sub-option?
        type: boolean
        default: false
      image:
        description: URL of an image representing the sub-option
        type: string
        format: uri
      price:
        description: |
          Additional fee for using this sub option.

          **NOTE**: *When absent, assume the price of the shipping method
          itself*.
        type: number
        minimum: 0
      title:
        description: Name of the sub-option
        type: string
        minLength: 1
  toc:
    allOf:
      - $ref: '#/definitions/ContentPage'
      - description: Object describing a "sub tree" of content pages
        type: object
        required:
          - title
          - items
        properties:
          icon:
            description: The id of an asset to display next to the title
            type: string
          items:
            type: array
            minItems: 1
            items:
              $ref: '#/definitions/ContentPage'
          personal:
            description: Wether this is a personal content page or not
            type: boolean
            default: false
          show_guest:
            description: Wether to display this to guest users or not
            type: boolean
            default: false
          show_registerd_user:
            description: Wether to display this to registered users or not
            type: boolean
            default: false
          title:
            description: Display title of the "sub tree" of content pages
            type: string
            minLength: 1
  url:
    allOf:
      - $ref: '#/definitions/WallResourceLink'
      - description: An external webpage to opened by the in app browser
        type: object
        required:
          - id
        properties:
          id:
            description: The URL
            type: string
  vid:
    allOf:
      - $ref: '#/definitions/ProductMediaItem'
      - type: object
        required:
          - url
        properties:
          large:
            description: 'URL to a large version of the product video. **Since: 4.4**.'
            type: string
            format: uri
          small:
            description: 'URL to a small version of the product video. **Since: 4.4**.'
            type: string
            format: uri
    example:
      large: https://vimeo.com/large.mp4
      small: https://vimeo.com/small.mp4
      type: vid
  video:
    allOf:
      - $ref: '#/definitions/WallTile'
      - description: A video tile
        type: object
        required:
          - content
        properties:
          content:
            description: The video content
            type: object
            required:
              - placeholder
              - videos
            properties:
              placeholder:
                description: |
                  URL to an image that can be used as a placeholder while the
                  video is loading, failed to load or can't be played.

                  [Image resizing](#tag/Image-Resizing) is supported.
                type: string
                format: uri
              videos:
                description: |
                  Video URLs to different formats and resolutions.
                type: object
                required:
                  - mp4_360
                  - mp4_480
                  - mp4_720
                properties:
                  mp4_360:
                    description: |
                      URL to the video in mp4 format in the 360p resolution
                    type: string
                    format: uri
                  mp4_480:
                    description: |
                      URL to the video in mp4 format in the 480p resolution
                    type: string
                    format: uri
                  mp4_720:
                    description: |
                      URL to the video in mp4 format in the 720p resolution
                    type: string
                    format: uri
  voucher_error:
    allOf:
      - $ref: '#/definitions/CartError'
      - type: object
        required:
          - code
          - id
        properties:
          code:
            type: string
            enum:
              - invalid_voucher
              - unredeemable_voucher
              - loyalty_disabled
          id:
            description: Voucher identifier
            type: string
            minLength: 1
        example:
          code: unredeemable_voucher
          message: can't redeem more than 2 vouchers per order
parameters:
  access_token:
    type: string
    description: Access token
    name: Authorization
    in: header
    required: true
  basic_auth:
    type: string
    description: |
      Authorization header. This endpoint expects Basic Authentication
    name: Authorization
    in: header
    required: true
  cart_id:
    type: string
    description: Unique identifier of the cart.
    name: cart_id
    in: path
    required: true
  category_id:
    type: string
    description: The category to restrict results to.
    name: cat
    in: query
  id:
    type: string
    description: Unique identifier of the resource.
    name: id
    in: path
    required: true
  if_match:
    type: string
    description: The If-Match header. **TODO** Link to spec.
    name: If-Match
    in: header
  lang:
    type: string
    description: Language
    name: lang
    in: query
    required: true
  latitude:
    type: number
    description: The latitude in which to search (overrides address)
    name: latitude
    in: query
  locale:
    type: string
    description: Locale
    name: locale
    in: query
    required: true
  longitude:
    type: number
    description: The longitude in which to search (overrides address)
    name: longitude
    in: query
  oauth_provider:
    enum:
      - facebook
      - google
      - stijlpas
      - twitter
    type: string
    description: |
      Identifier of the authentication provider.

      **NOTE**: `"stijlpas"` is a Shoeby specific provider.
    name: provider
    in: path
    required: true
  oauth_request:
    description: An OAuth 2.0 Access Token Request encoded as form data
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/OAuthRequest'
  optional_access_token:
    type: string
    description: Access token
    name: Authorization
    in: header
  optional_storefront:
    type: string
    description: Identifier of the selected storefront
    name: X-Selected-Storefront
    in: header
  order_status:
    enum:
      - ready_for_pick_up_in_store
    type: string
    description: Filter orders by their status
    name: status
    in: query
  product_id:
    type: string
    description: A product ID
    name: product_id
    in: path
    required: true
  purge_secret:
    type: string
    description: A secret that provides access to the cachewarmer functionality.
    name: X-Purge-Secret
    in: header
    required: true
  recommender_id:
    type: string
    description: Identifier of the recommender to use
    name: recommender_id
    in: path
    required: true
  store_address:
    type: string
    description: A single line address query
    name: address
    in: query
  store_id:
    type: string
    description: |
      Filter orders by store they were placed in or can be picked up in
    name: store_id
    in: query
  store_max_distance:
    type: number
    description: |
      Require stores to be at most `maximum_distance` kilometres from the
      reference location. The default value is `100`.
    name: max_distance
    in: query
  store_tags:
    type: string
    description: A comma separated list of tags on which to search a store by
    name: tags
    in: query
  store_type:
    enum:
      - pick_up_in_store
    type: string
    description: |
      Limit the stores to a particular type. Omit the parameter to fetch all
      types of stores.
    name: store_type
    in: query
  storefront:
    type: string
    description: Identifier of the selected storefront
    name: X-Selected-Storefront
    in: header
    required: true
  visitor_id:
    type: string
    description: Unique visitor ID.
    name: visitor_id
    in: query
    required: true
  wishlist_id:
    type: string
    description: Unique identifier of the wishlist
    name: id
    in: path
    required: true
  wishlist_item:
    description: Wishlist item
    name: Wishlist item
    in: body
    required: true
    schema:
      $ref: '#/definitions/AddWishlistItemRequest'
  wishlist_item_id:
    type: string
    description: Unique identifier of an item on a wishlist
    name: item_id
    in: path
    required: true
responses:
  cart:
    description: Success
    schema:
      $ref: '#/definitions/Cart'
    headers:
      ETag:
        type: string
        description: Etag header
  cart_not_found:
    description: The cart with this `id` does not exist or belongs to another user.
  checkout:
    description: Success
    schema:
      $ref: '#/definitions/Checkout'
    headers:
      ETag:
        type: string
        description: The ETag value
  invalid_add_item_request:
    description: Invalid request
    schema:
      $ref: '#/definitions/AddWishlistItemError'
  invalid_loyalty_membership:
    description: Customer does not have a confirmed loyalty membership
    schema:
      allOf:
        - type: object
          properties:
            code:
              description: An error code
              type: string
              enum:
                - unconfirmed_email
        - $ref: '#/definitions/Err'
    examples:
      application/json:
        code: unconfirmed_email
        message: membership must be confirmed
  invalid_token:
    description: Access token is missing, invalid or expired.
    headers:
      WWW-Authenticate:
        type: string
        description: Reason for failure.
    examples:
      application/json:
        code: invalid
        message: invalid or expired token
  loyalty_account:
    description: Success
    schema:
      $ref: '#/definitions/LoyaltyMembership'
  loyalty_disabled:
    description: The loyalty program feature is disabled
    schema:
      allOf:
        - description: An error related to the loyalty program
          type: object
          required:
            - code
          properties:
            code:
              description: An error code
              type: string
              enum:
                - loyalty_disabled
        - $ref: '#/definitions/Err'
      example:
        code: loyalty_disabled
        message: merchant has no active loyalty program
  no_loyalty_membership:
    description: Customer does not have a loyalty membership
    schema:
      $ref: '#/definitions/LoyaltyMembershipError'
  not_implemented:
    description: Endpoint is not implemented for current merchant.
    schema:
      allOf:
        - $ref: '#/definitions/Err'
        - type: object
          properties:
            code:
              description: An error code
              type: string
              enum:
                - unimplemented
    examples:
      application/json:
        code: unimplemented
        message: endpoint is not implemented for current merchant
  server_error:
    description: An internal server error occured
    schema:
      $ref: '#/definitions/ServerError'
    headers:
      Retry-After:
        type: string
        description: |
          A suggested back off period in seconds (if the error is temporary).
  stock_subscriptions_success:
    description: Success
    schema:
      $ref: '#/definitions/StockSubscriptionsList'
    examples:
      application/json:
        stock_subscriptions:
          - count: 3
            country: NL
            product_id: 1234_AB-S
          - count: 1
            country: BE
            product_id: 1234_AB-S
          - count: 2
            country: NL
            product_id: 9876_CD-M
  storefront:
    description: Success
    schema:
      $ref: '#/definitions/Storefront'
  unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/AuthError'
    headers:
      WWW-Authenticate:
        type: string
    examples:
      application/json:
        code: unauthorized
        message: Basic Authentication are missing or invalid
  unknown_resource:
    description: Not Found
    schema:
      allOf:
        - $ref: '#/definitions/Err'
        - properties:
            code:
              enum:
                - unknown_resource
      example:
        code: unknown_resource
        message: can't find it
  unknown_storefront:
    description: Storefront does not exist
    schema:
      allOf:
        - $ref: '#/definitions/Err'
        - description: An error during storefront selection
          type: object
          required:
            - error
          properties:
            error:
              description: A debug message
              type: string
    examples:
      application/json:
        error: no such storefront
  unknown_wishlist:
    description: Wishlist doesn't exist
    schema:
      allOf:
        - $ref: '#/definitions/Err'
        - properties:
            code:
              enum:
                - unknown_resource
      example:
        code: unknown_resource
        message: wishlist '1823984823' doesn't exist
  upstream_error:
    description: An error occured when connecting to an upstream service
    schema:
      $ref: '#/definitions/UpstreamError'
    headers:
      Retry-After:
        type: string
        description: |
          A suggested back off period in seconds (if the error is temporary).
    examples:
      application/json:
        code: fetch_error
        message: 'loyalty platform temporarily unavailable: 15 consecutive errors'
  wishlist:
    description: Success
    schema:
      $ref: '#/definitions/Wishlist'
securityDefinitions:
  AccessToken:
    type: oauth2
    flow: password
    tokenUrl: http://merchant.api.highstreetapp.com/token
    scopes:
      full: There are no scopes, really
  basic_auth:
    type: basic
security:
  - AccessToken:
      - full
tags:
  - description: >
      Most image URLs returned by the Highstreet API can be requested in
      specific

      sizes by appending query string parameters. There are parameters for the

      width and height of the image. Aspect ratio's will not be distorted by

      resizing.


      The names of the width and height parameters can differ per merchant. They

      are exposed in the [Storefront Configuration](#operation/ViewStorefront)

      under the `image_url_params` key.


      ### In practice


      In practice the apps do **not** respect the `image_url_params` but instead

      hard-code the names of the parameters inside the app.
    name: Image Resizing
  - description: >
      The account resource represents a customer's account.


      ### Loyalty Programs


      When a loyalty program is active the customer's e-mail address *may*
      already

      exist in the system. This can happen, for example, when the customer
      signed

      up for the loyalty program in a physical store. **To protect the
      customer's

      privacy and their collected rewards creating an account will be refused**

      for e-mails that already exist in the system.


      After the refusal a verification e-mail will be sent to the e-mail
      address.

      The e-mail will contain a link to a web page where the customer can verify

      the e-mail address. Through an applink this webpage may be opened in the

      app. The **Set password** endpoint can be used to verify ownership of the

      account.


      The app link looks as follows:


      ```

      hs://account/password?token={verification-token}&handle={handle}

      ````
    name: Accounts
  - name: Augmentations
  - description: |
      The Highstreet API uses OAuth 2.0 for authentication.
    name: Authentication
  - description: >-
      Branded Media used by mobile apps while launching (splash screen) or when
      showing account view
    name: Branded Media
  - description: |
      Controls the cachewarmer by scheduling and cancelling jobs
    name: Cachewarmer
  - description: >
      The cart resource represents a customer's cart.


      Each cart contains coupon codes, items and vouchers.


      ### Items


      The `items` property contains a list of items the customer has added to
      their

      cart. Items consist of an identifier (`id`), a quantity (`quantity`), a
      product

      (`product_id`) and optionally a product configuration (`configuration` and

      `bundle configuration`).


      Item identifiers are assigned to an item by the server. When the
      identifier of

      an item is not known yet (e.g. when adding a new product), the client
      *must*

      send a temporary identifier (`temp_id`). The server will return this
      temporary

      identifier along with the real identifier (`id`) to ensure client and
      server

      are working with the same item.


      Once an identifier has been assigned the client should stop using the
      temporary

      identifier.


      ### Coupon codes


      Coupon codes are currently ignored entirely.


      ### Vouchers


      When the merchant has a loyalty program it is possible to redeem vouchers
      in

      the cart. To redeem a voucher it can be added to the `vouchers` list by
      its

      ID.


      Also see the `GET /loyalty/vouchers` call.


      ### State and data races


      It could be the case that two clients are managing the same cart at the
      same

      time, causing the clients to fall out of sync.


      Clients can notice this situation using the `If-Match` and `ETag` headers.
      Using

      this mechanism an error will be returned in case the client and server
      state are

      out of sync. The request header `If-Match` is *optional*: when it's not
      present

      the server ensures the state of the client will be that as specified by
      the

      client, possibly overriding the state set previously by another client.


      In case of a conflict the client is responsible for resolving it. When a

      conflict occurs, the server will respond with a `412 Precondition failed`
      and

      provide the current state of the cart as known by the server.


      ### Errors


      Each cart contains a list of errors (`_errors`). Errors provide feedback
      on the

      client's request and inform the client of failed actions performed by the

      server.


      **NOTE**: The list of errors *ephemeral* (i.e. not persisted). In practice
      this

      means that the errors will be available in `POST` and `PUT` responses
      **only**.


      Each error has an error type (`type`) and an error code (`code`). The
      following

      error *types* are available:

      refer to:


      * `cart_error` refers to the cart as a whole. **Example**: clients tries
      to add
        too many items to the cart.
      * `cart_item_error` refers to a specific items. The server will return an
      `id`
        or `temp_id` to identify the item exactly. **Example**: client tries to add a
        product that does not exist.
      * `coupon_code_error` refers to a coupon code. **Example**: client tries
      to add
        a coupon code that is invalid in combination with another coupon code.
      * `voucher_error` refers to a voucher. **Example**: client tries to redeem
      a
        non-existing voucher.

      The following error *codes* are available:


      * `cart_full`: Client attempted to add more than the maximum number of
      items.

      * `product_unavailable`: Client attempted to add a product that is
      unavailable.

      * `quantity_changed`: Desired quantity was not available and was lowered
      by the
        server.
      * `unknown_item`: Client referred to an item with an identifier (`id`)
      that does
        not exist (anymore).
      * `invalid_coupon`: Client attempted to add an invalid coupon code.

      * `expired_coupon`: Client attempted to add an expired coupon code.

      * `too_many_coupons`: Client reached maximum amount of coupon codes.


      TODO: voucher error codes.
    name: Carts
  - description: |
      The category tree is used as the bases of the navigation within the app.

      The root category can also be referred to as the category tree. With each
      category having a number of children.
    name: Categories
  - description: >
      The checkout resource exposes endpoints to manage a checkout session.


      ### Addresses

      The shipping address for a checkout session can be set to the billing

      address by setting a `billing_address` and setting the `shipping_address`
      to

      `null`.


      ```javascript

      {
        "addresses": {
          "billing_address": { ... },
          "shipping_address": null
        }
      }

      ```


      **NOTE**: In response bodies the shipping address will be `null` both when

      it's missing and when it's set to the billing address. The list of
      `_errors`

      can be used to tell the difference (i.e. there will be an error with code

      `missing` and field `shipping_address`).


      ### Data dependencies

      Updating one piece of information may invalidate a previously valid piece
      of

      information. The list of available payment and shipping methods tends to

      depend on the billing or shipping address for example. The list of
      `_errors`

      should be checked every time the checkout session has been updated.


      ### Notes

      * Invalid data (such as an invalid address) is persisted on some
      e-commerce
        platforms and discarded on others.
      * None of the checkout endpoints currently check for the `If-Match`
      request
        header, even though an `Etag` response header is returned.

      ### Order tracking


      ![Order Tracking Sequence Diagram](order-tracking.svg "Sequence Diagram")
    name: Checkout
  - description: Content pages are web pages hosted by the merchant.
    name: Content Pages
  - description: >
      Webpages can (sometimes) be translated to an applink. The following
      applinks

      are supported:


      ### Account


      * `hs://account/activate?token={verification-token}&handle={handle}`


      ### Cart


      * `hs://cart`


      ### Content extension


      *
      `hs://contentextension?url={base64-encoded-url}&title={urlencoded-title}`


      ### Categories


      * `hs://categories/{category-id}`

      * `hs://categories/{category-id}/search/{query}`


      ### Checkout (completion screens)


      * `hs://checkout/completion/success`

      * `hs://checkout/completion/failure`

      * `hs://checkout/completion/cancelled`


      ### Favorites


      * `hs://favorites`


      ### Home


      * `hs://home`

      * `hs://home/promotions/{promotion-id}` (**DEPRECATED**)


      ### Lookbooks


      * `hs://lookbooks/{lookbook-id}`


      ### Orders


      * `hs://account/orders`

      * `hs://account/orders/{order-id}`


      ### Products


      * `hs://products/{product-id}`

      * `hs://categories/{category-id}/products/{product-id}`


      *This deeplink supports filter parameters (see below).*


      ### Search


      * `hs://search/{query}`


      *This deeplink supports filter parameters (see below).*


      ### Vouchers


      * `hs://loyalty/vouchers`

      * `hs://loyalty/vouchers/{voucher-id}`


      ## Filter parameters


      The following deeplinks accept filters:


      * `hs://categories/{category-id}`: links to the products within a
      category.

      * `hs://categories/{category-id}/search/{query}`: links to a product
      search
         within a category.
      * `hs://search/{query}`: links to a global product search query.


      A filter consists of at least 2 query string parameters. The first
      parameter

      describes the attribute being filtered on:


      ```

      filter[$i][attribute]=$attribute

      ```


      The additional parameters describe the acceptable value or values. At
      least one

      acceptable value is required:


      ```

      filter[$i][in][$j]=$value

      ```


      Filters are numbered, starting from `0` (`$i`). Acceptable values
      (`$value`) are

      also numbered, starting from `0` (`$j`).


      **Example**: only return green or blue products.


      ```

      hs://products/{search}?filter[0][attribute]=color&filter[0][in][0]=green&filter[0][in][1]=blue

      ```


      **Example**: only return red products made from cotton.


      ```

      hs://categories/{category-id}/search/{search}?filter[0][attribute]=color&filter[0][in][0]=red&filter[1][attribute]=material&filter[1][in][0]=cotton

      ```


      **NOTE**: *The schema `hs` will be replaced by the merchant specific
      schema*.
    name: Deeplink
  - description: >
      Endpoints to schedule jobs.


      These endpoints are available on the following domain:


      `MERCHANTID`-`MERCHANT_ENV`.api.highstreetapp.com


      `MERCHANTID` = the configured merchant id in the app.

      `MERCHANT_ENV` = the applicable environment of the Merchant's backend. eg
      `staging`.

      Note that when the `-MERCHANT_ENV` is omitted then the production
      environment is assumed.

      Also note the `-` that should be present between `MERCHANTID` and
      `MERCHANT_ENV`. When

      `MERCHANT_ENV` is omitted then the `-` should also be omitted.
    name: Jobs
  - description: |
      Lookbooks are used by merchants to showcase their products
    name: Lookbooks
  - description: >
      When signing up for a loyalty membership, the loyalty program *may*
      require

      the customer to confirm their membership through, for example, an e-mail.

      The API will indicate this on all loyalty related enpoints.


      Some loyalty programs don't require the customer to opt-in to a loyalty

      membership, but create a membership for you when an E-commerce account is

      created.


      ### Changelog


      * 19-06-2018
        * Introduce `membership_level`
      * Replace `membership_barcode` with `card_barcode`.

      * Introduce `confirmed` flag.

      * Introduce `points_balance` (optional).

      * Introduce `collection_counters` object (optional).
    name: Loyalty Membership
  - description: |
      The Voucher resource exposes loyalty vouchers and campaigns.
    name: Voucher
  - description: >
      The Order resource exposes a customer's order history.


      ### Changelog


      * Add a `currency_code` to display the correct currency symbol.

      * Add a `prices_include_tax` to pick the correct totals.

      * Replace `date` with `creation_date` (note that `creation_date` is
      optional)

      * Replace `status` object with a string (note that `status` is optional)

      * Replace `price` of an order `items` with `full_price`

      * Remove `bundle_configuration` for order `items`

      * Replace `shipping_address` with `shipments`

      * Replace `shipping_method` with `shipments`

      * Replace `payment_method` with `payments`


      **NOTE**: There can be multiple `shipments` and multiple `payments`.
    name: LoyaltyOrders
  - description: >
      Messages are used by merchants to comunicate with their uses on specific
      parts of the application.
    name: Messages
  - description: >
      ## Notes


      * The `GET /categories/:id/products` endpoint has been deprecated in
      favour
        of a query string on product search.
    name: Products
  - description: >
      Registers a device to receive push Notifications. A endpoint to record

      push notification open events is also provided.


      Currently Highstreet has an integration with Onesignal and for some
      clients

      Marketing Cloud. The registration endpoint will register the device with

      Onesignal and if configured Marketing Cloud.
    name: Push Notifications
  - name: Stock Subscriptions
  - description: |
      Exposes configuration settings.
    name: Storefronts
  - description: |
      Exposes endpoints to find stores in the real world.
    name: Stores
  - description: >
      Information regarding a visitor. These endpoints are used in the personal
      recommendaions flow.
    name: Visitor
  - description: >
      The home wall is a collection of rows that are displayed below each other.

      A **row** is a grid of blocks. The grid is 12 blocks wide and a variable

      number of blocks tall. The grid is used to place "tiles" on.


      A **tile** is a rectangle that displays content and can optionally link to

      another screen in the app (such as a category).


      The position and size of a tile are expressed as numbers: `[x, y, w, h]`.

      * `x`: the top left corner's X position on the grid

      * `y`: the top left corner's Y position on the grid

      * `w`: the width of the tile in blocks

      * `h`: the height of the tile in blocks


      ![Home wall diagram](wall.png "Home wall diagram")


      ## Content


      There are different types of tiles for different kinds of content:


      * An `img` tile to display an image

      * A `video` tile to display a video (since version 3.7)

      * A `look` tile to display an image from a lookbook, including the
      hotspots
        (since version 3.8).
      * A `product_list` tile to display a list of products. The products to
        display are described by the `content` key.

      Tiles can be linked to a **resource**. A resource is another screen in the

      app. When a customer taps on a tile that is linked to a resource the app

      opens that screen. There are different types of resources:


      * The `category` type links a tile a specific category

      * The `product` type links a tile to a specific product

      * The `lookbook` type links a tile to a specific lookbook

      * The `lookbook_look` type links a tile a specific look *within* a
      specific
        lookbook
      * The `url` type links a tile to webpage in the in-app browser

      * The `contentextension` type links a tile to a webpage opened as if it is
        native content (available since version 3.6)

      ## Configuration


      The look and feel of the home wall can be controlled remotely. The
      following

      aspects can be configured:


      * The background color

      * The distance between tiles in a grid (the "gutter size")

      * The distance between the top and bottom of rows (the "horizontal
      margin")

      * The distance between the rows and the edges of the screen (the "vertical
        margin")
      * The corner radius of the tiles

      * The amount of shadow a tile has


      ## TODO

      * Gutter size: does the gutter size on get storefronts take precedence?

      * What is the `meta` field for resources? Does the app use it? What fields
        does it hold?
    name: Wall
  - description: >
      Wishlists are lists of products that registered customers can maintain.
      They

      can be used to implement, for example, favorites or gift registries.
    name: Wishlists
  - description: >
      ## 4.0 - 2020-08-19

      ### Added

      - Introduce `promotions` into the CartItem and ProductResult.


      ## 4.0 - 2019-08-02

      ### Added

      - Introduce `events_tracking_host` and `feature_personal_recommendations`
      to
        the storefront config. Available on all API versions.

      ## 4.0 - 2019-07-19

      ### Added

      - Introduce `max_number_of_coupons` to the storefront config. Available on
        all API versions.

      ## 4.0 - 2019-07-11

      ### Added

      - Introduce the error code `item_id_changed` for `cart_item_error`.


      ## 4.0 - 2019-04-11

      ### Changed

      - `GET /wall`: add the tile type `product_list`.


      ## Added

      - Introduce `GET /featured_products/{id}` endpoint.

      - Introduce `POST /visitor_id` endpoint.

      - Introduce `POST /jobs/reindex-categories` endpoint. Available on all API
        versions.

      ## 3.9 - 2018-06-13

      ### Changed

      - `GET /stores`: deprecate `postal_code` parameter in favour of `address`.


      ## 3.9 - 2018-06-19

      ### Added

      - Introduce `membership_level` on `GET /account/loyalty`


      ## 3.9 - 2018-05-09

      ### Added

      - Introduce `POST /cookies` endpoint.

      - Introduce `GET /auth/{provider}` endpoint.


      ### Changed

      - `POST /token`: support the grant type `authorization_code`.

      - `GET /contentpages`: add the personal, show_guest, show_registered_user
      and icon properties.


      ## 3.8 - 2018-04-11

      ### Added

      - `GET /wall`: introduce tiles of type 'look'.


      ## 3.7 - 2018-02-13

      ### Changed

      - `GET /storefront`: deprecate `checkout_external` in favor of `checkout`.

      - `GET /wall`: introduce tiles of type `video`.


      **Example**


      ```js
        {
          "rect": [0, 0, 12, 12],
          "content": {
            "videos": {
              "mp4_720": "http://highstreet.video.staging.com.global.prod.fastly.net/scotch-uk/walls/video/ilq366NPW-e8iNc08ZjWtg/video/generic_720",
              "mp4_480": "http://highstreet.video.staging.com.global.prod.fastly.net/scotch-uk/walls/video/ilq366NPW-e8iNc08ZjWtg/video/generic_480",
              "mp4_360": "http://highstreet.video.staging.com.global.prod.fastly.net/scotch-uk/walls/video/ilq366NPW-e8iNc08ZjWtg/video/generic_360"
            },
            "placeholder": "http://cms-staging-highstreetapp.imgix.net/scotch-uk/walls/video/ilq366NPW-e8iNc08ZjWtg/placeholder?fit=crop\u0026fm=jpg\u0026q=50"
          },
          "type": "video",
          "resource": {
            "type": "category",
            "id": "5"
          }
        }
      ```


      ## 3.6 - 2017-09-06

      ### Added

      - `GET /wall`: introduce tiles of type 'contextextension'.


      **Example**


      ```js
        {
          "rect": [0, 0, 12, 12],
          "content": {
            "url": "http://cms-staging-highstreetapp.imgix.net/scotch-uk/promotions/4GNKm7WosspYSgVdYbVf6Q_source?fit=crop\u0026fm=jpg\u0026q=50",
            "parallax": true
          },
          "type": "img",
          "resource": {
            "type": "contentextension",
            "title": "Stories",
            "url": "https://www.scotch-soda.com/nl/nl/FW17-ABLAUNCH.html"
          }
        }
      ```
    name: Changelog
x-logo:
  url: https://rebilly.github.io/ReDoc/petstore-logo.png