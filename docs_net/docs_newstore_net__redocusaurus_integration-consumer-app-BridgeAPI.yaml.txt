openapi: 3.0.1
info:
  title: Highstreet E-commerce Platform API
  description: |
    Contact: support@highstreetmobile.com

    This documents a JSON API that should be implemented by you so that the
    Highstreet app can integrate with your E-commerce platform.

    Unless stated otherwise the endpoints listed should accept and return JSON.

    See Usage Guide for general notes about the API and Endpoints for the actual
    implementation details.
  version: '0.9'
  x-logo:
    url: http://apidoc.highstreetapp.com/HS_logo_white.png
    backgroundColor: '#3BAEEE'
    altText: Highstreetmobile logo
servers:
  - url: https://your_domain.com/
tags:
  - name: Authentication
    description: >
      All requests apart from requests to the `POST /token` endpoint will
      contain an API token in the

      `X-Hs-Api-Token` header. This token should be provided by you and be
      unique to Highstreet.


      As well as the API token some requests will require an authenticated user.

      Such as the basket endpoints or those related to the customer endpoints.
      This

      token will be provided in the `Authorization` header of a request. The
      token will be of type

      bearer and so will be provided in the following format: `Bearer
`.
      For example with a

      token of `123`. The value of the `Authorization` header would be `Bearer
      123`

      Customer authentication is done through the OAuth 2.0 standard detailed in
      the

      [token
      endpoint](http://apidoc.highstreetapp.com/ecommerce-platform.html#tag/Authorization%2Fpaths%2F~1token%2Fpost)


      There are 2 types of users of the app. Guest users and logged in users.
      Both types of users require

      an access token.
  - name: Errors
    description: >
      Errors are represented by both the response code and the body of the
      response.

      All errors should include an error object in the response body that
      includes a code

      and a message key.


      ```json
        HTTP/1.1 400 Bad Request

        {
          "code": "invalid_email",
          "message": "Email is not valid"
        }
      ```
  - name: Response Codes
    description: |
      Only the following response codes are expected to be returned by this API:
        - 200 - OK
        - 201 - Created
        - 204 - No Content
        - 401 - Unauthorised
        - 403 - Forbidden
        - 400 - Bad Request
        - 404 - Not Found
        - 500 - Internal Server Error
  - name: Data
    description: >

      ### IDs

      All ids ie those of products, baskets etc should be url safe.


      ### Localisation

      Your e-commerce platform most likely supports multiple locales and
      currencies. This information

      will be passed on to your API implementation in the url query parameters
      of the request.

      For example: `/categories/tree?locale=nl-NL¤cy=EUR`


      You should use the value of these parameters to determine what language
      and prices to return to

      the app. Also you may use this information to determine which Catalogue to
      use, if you have

      multiple catalogues in different countries for instance.


      ### Currency codes


      Currency codes follow the [ISO 4217
      standard](https://en.wikipedia.org/wiki/ISO_4217).


      For example `EUR`, `GBP`, `USD`


      ### Locales

      A Locale is represented as a language code and a country code seperated by
      a dash (`-`).


      For example `nl-NL`


      ### Languages

      A language is represented as a 2 digit code following the [ISO
      639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)

      standard.


      ### Countries

      A country is represented by a 2 digit code following the [ISO 3166-1
      Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)

      standard.


      ### Dates and Time


      Dates and times follow the [ISO 8601
      standard](https://en.wikipedia.org/wiki/ISO_8601).

      All dates/times must be supplied in the ISO 8601 format.


      For example `2018-08-17T15:53:00+01:00`
  - name: Pagination
    description: >
      Some endpoints support pagination. Pagination should be supported using
      the

      `cursor` and `size` keys supplied in the query parameters of the url.

      The value of `size` defines how many items to return and the value of
      `cursor`

      defines the index of the first item to start counting from. Items should
      have

      a zero based index. For example

      `GET /customers/orders?cursor=0&size=10` would return the first 10 orders
      and

      `GET /customers/orders?cursor=10&size=10` would return the following 10
      orders.
  - name: Notes
    description: >
      - Not all endpoints are required, depending on what feature sets you wish
      to

      support. It is noted in the description of the endpoint as to wether the

      endpoint in question is optional or required.
  - name: Authorization
    description: |
      Describes how to authorize as a customer with your e-commerce platform.

      *Note*

      Highstreet does support a single sign on flow. i.e login via Facebook is
      supported. Please contact us for more details if you wish to support a
      single sign on flow.
  - name: Basket
    description: >
      Represents a Customer's shopping basket. A customer may only have 1 basket
      at any given time.

      Seperate endpoints are used to update each attribute of the basket. Eg to
      set the shipping address. The basket contains

      a `_errors` key that provides a list of errors on the basket that need to
      be

      resolved before it can be converted into an order. It also works as a kind
      of check list indicating what information

      is still missing. For example, if the shipping address is missing then
      there

      would be an error related to the shipping address in the array.


      A Basket contains line items not products. A line item references a
      product by it's id. A line item

      can hold multiple of the same product.


      Payment is managed through an integration with a payment provider. Eg
      Adyen. When a customer finalizes

      the basket the app will launch a web page hosted by the payment provider.
      The customer will then

      fill in all necessary payment information within this webpage before being
      returned to the app.
  - name: Categories
    description: >
      The Highstreet app uses a category tree to construct the top navigation
      bar.

      The top navigation contains a list of root categories with sub categories.

      These sub categories may also have sub categories and so on.


      **EXAMPLE**:


      ```

      Root

      ├── Men

      │   ├── Pants

      │   │   ├── Chinos

      │   │   ├── Jeans

      │   │   └── Shorts

      │   └── Shirts

      │       ├── Long Sleeved

      │       │   ├── Smart

      │       │   └── Casual

      │       └── Polo

      └── Women
          ├── Bottoms
          │   ├── Skirts
          │   ├── Jeans
          │   └── Shorts
          └── Shirts
              ├── Long Sleeved
              │   ├── Smart
              │   └── Casual
              └── Tank Tops
      ```
  - name: Customer
    description: |
      Represents a customer's account.

      A customer is identified by the access token in the Authorization header.

      There are a number of account features that are optional.
      These are:
        - Points balance. If your platform supports a kind of loyalty points system
        you can expose the number of points a user has on their account.
        Indicated by the `points_balance` key.
        - Customer Card. This lets the customer view a barcode on their account
        page within the app. This barcode can then be scanned instore to quickly indentifiy the customer.
        Indicated by the `barcode` key.
        - Membership Level. If your platform supports multiple levels of Membership
        you can expose a customer's membership level.
        Indicated by the `membership_level` key.

      If your platform supports none of the above features then you can remove
      the keys related to these from the response.
  - name: Products
    description: >
      The Product endpoints expose product information. Products are identified
      by

      a product ID.


      ## Product types


      Highstreet supports multiple types of products.


      ### Fixed Products

      Products of type *fixed* are the simplest type of product. These are
      products

      that can be bought "as is" and do not require the customer to select any

      configuration options such as a color or size.


      ### Variable Products

      Products of type *variable* are more complicated products. They require
      the

      customer to select configuration options such as a size or a color.


      The configuration options are called **variation attributes**. Highstreet

      supports up to three variation attributes per product.


      ### Variant Products

      Products of type *variant* are a specific combination of variation

      attributes. Each variant has its own product ID and SKU.


      ![Variable Product](variable-products.svg "Variable Product")
  - name: Stores
    description: >
      These endpoints are used to fetch information about your physical stores.
      And are a requirement

      if the e-commerce platform supports pick up in store as a shipping method.
  - name: Wishlists
    description: >
      Wishlists are lists of products that registered customers can maintain.
      They can be used to implement,

      for example, favorites or gift registries.
  - name: v0.10-rc3
    description: |
      # 03/10/23
      - Adds `swatches` attribute to `product details` endpoint
  - name: v0.10-rc2
    description: |
      # 04/05/20
      - Accepts `hide_in_app` attribute on category
      - Adds `stock_noficiations_enabled` attribute to product detail responses
  - name: v0.10-rc1
    description: |
      # 25/06/19
      - Adds 404 error respone to GET /baskets/:id
  - name: v0.10
    description: |
      # 21/06/19
      - Adds basic loyalty features
        - Adds GET /customer/vouchers
        - Adds GET /customer/campaigns
        - Adds POST /basket/:id/vouchers
        - Adds DELETE /basket/:id/vouchers/:voucher_id
        - Adds vouchers key to basket model
  - name: v0.9-rc14
    description: |
      # 22/05/19
      - Adds customer_email and customer_id to the CustomerOrder model
      - Adds tax to the OrderItem model
  - name: v0.9-rc13
    description: |
      # 15/05/19
      - Address Models
        - Allows all fields to be optional
  - name: v0.9-rc12
    description: |
      # 15/05/19
      - Order Model
        - updates the required fields
  - name: v0.9-rc11
    description: |
      # 12/03/19
      - Product Model
        - Adds `size_chart_url`
  - name: v0.9-rc10
    description: |
      # 06/03/19
      - BasketAddress Model
        - changes the required  and optional fields
  - name: v0.9-rc9
    description: |
      # 27/02/19
      - GET /countries
        - changes valid 401 error responses to only check the value of X-Hs-Api-Token
      - RGBA Model
        - changes model to be of type object with the keys red, green, blue and alpha
  - name: v0.9-rc8
    description: |
      # 18/02/19
      - GET /product_search
        - Adds support for sorting
  - name: v0.9-rc7
    description: |
      # 12/02/19
      - BasketTotals object
        - changes `payment_costs` and `shipping_costs` to optional
  - name: v0.9-rc6
    description: |
      # 05/02/19
      - POST /customer
        - Adds `invalid_password` error
      - GET /basket/:id/payment_methods
        - Changes `payment_methods` key to be required
  - name: v0.9-rc5
    description: |
      # 31/01/19
      - Customer object
        - renames `default_address_id` to `default_billing_address_id`
  - name: v0.9-rc4
    description: |
      # 25/01/19
      - Product object
        - Label object
          - removes `from`
          - removes `to`

        - changes `variation_attribute_values`
  - name: v0.9-rc3
    description: |
      # 17/01/19
      - Product.Label object
        - adds `background_color`
        - adds `text_color`

      - Basket.ItemPrices object
        - `original` and `effective` now represent the price of the line item not the unit
        - Adds `unit_original` and `unit_effective`
        - renames `effective_tax_free` to `unit_effective_tax_free`

      - `GET /baskets/:id/countries`
        - Moved endpoint to `GET /countries`
  - name: v0.9-rc2
    description: |
      # 08/01/19
      - Account object
        - adds optional `basket_id`

      - `POST /baskets`
        - adds basket_id to the error response
  - name: v0.9-rc1
    description: |
      # 21/12/18
      - Basket Object
          - adds `includes_tax` key
          - changes `items.prices.effective_tax_free` to be optional

      - Add a response body to `401 Unauthorized` errors

      - `POST /baskets`
        - add a `403 Forbidden` response
      - `PUT /baskets/{id}/billing_address`
        - simplify `400 Bad Request` error document
      - `PUT /baskets/{id}/shipping_address`
        - simplify `400 Bad Request` error document
      - `PUT /baskets/{id}/payment_method`
        - rename the request property 'sub_option' to `option`
        - simplify `400 Bad Request` error document
        - add a `422 Unprocessable Entity` response
      - `PUT /baskets/{id}/shipping_method`
        - rename the request property 'sub_option' to `option`
        - simplify `400 Bad Request` error document
        - add a `422 Unprocessable Entity` response
      - `POST /baskets/{id}/coupons`
        - simplify `400 Bad Request` error document
        - add a `422 Unprocessable Entity` response
      - `POST /orders`
        - add a `403 Forbidden` response
      - `Basket` document:
        - change the objects contained in `_errors`
        - remove the `id` property of addresses
        - make `_errors`, `id` and `totals` required properties
      - `Customer` document:
        - remove the `id` property from request bodies.
        - make `id` required in response bodies
      - `GET /customer/orders
        - add 401 and 500 error responses
      - `PATCH /customer/addresses/{id}`
        - add 404 error response
        - simplify 401 error response body
      - `POST /customer/addresses`
        - simplify 401 error response body
  - name: v0.8
    description: |
      - Adds `client_id` and `client_secret` to `/token` request params
      - Category object
        - removes `hidden` attribute
        - changes the `product_count` to be optional

      # 3/12/18
      - `/product_related`
          - changes `ids` parameter to a single `id`

      # 5/12/18
      - Adds `/basket/:id/countries` endpoint
paths:
  /token:
    post:
      tags:
        - Authorization
      summary: Create an access token
      description: "**This is a required endpoint**\n\nThe token endpoint is used to obtain a customer access token for the e-commerce\nplatform.\n\nThis endpoint should accept `application/x-www-form-urlencoded`\tdata as in\naccordance to the Oauth 2.0 spec\n\nOnly a token of type bearer is supported.\n"
      parameters:
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      requestBody:
        description: An OAuth 2.0 Access Token Request encoded as form data
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                required:
                  - error
                type: object
                properties:
                  error:
                    type: string
                    description: >
                      An error code. See
                      https://tools.ietf.org/html/rfc6749#section-5.2

                      for in-depth explanations of each error code.
                    enum:
                      - invalid_request
                      - invalid_client
                      - invalid_grant
                      - unauthorized_client
                      - unsupported_grant_type
                      - invalid_scope
                  error_description:
                    type: string
                    description: Description of the error intended for developers
                  error_uri:
                    type: string
                    description: URL to a human-readable web page with error information
                    format: uri
                description: Standard OAuth 2.0 Error Response
              example:
                error: invalid_grant
                error_description: The user or authorization server denied the request
      x-codegen-request-body-name: body
  /cookies:
    post:
      tags:
        - Authorization
      summary: Cookies
      description: >
        **This is a required endpoint**


        Gets frontend cookies using the customer's access token. The cookies can
        be used

        to continue the session on the web. This allows the user to view

        personal web content that would require a session.
      operationId: GetCookies
      parameters:
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - cookies
                type: object
                properties:
                  cookies:
                    type: array
                    description: List of Set-Cookie header values.
                    items:
                      minLength: 1
                      type: string
                      description: Set-Cookie header value
              example:
                cookies:
                  - >-
                    frontend=foo; expires=Wed, 30-May-2018 13:52:19 GMT;
                    Max-Age=2592000; path=/; domain=merchant.com; HttpOnly
                  - >-
                    frontend_cid=bar; expires=Wed, 30-May-2018 13:52:19 GMT;
                    Max-Age=2592000; path=/; domain=merchant.com; secure;
                    HttpOnly
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /customer:
    get:
      tags:
        - Customer
      summary: View Customer
      description: |
        **This is a required endpoint**

        Displays a customers full information
      operationId: ViewCustomer
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    post:
      tags:
        - Customer
      summary: Create Customer
      description: |
        **This is a required endpoint**

        Creates a customer using their basic information.
      operationId: CreateAccount
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateBody'
        required: true
      responses:
        '201':
          description: Account was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Request body has invalid or missing properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerRequestError'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: CreateAccountBody
    patch:
      tags:
        - Customer
      summary: Update Customer
      description: >
        **This is a required endpoint**


        Updates the customer's info. Currently a customer can only update their
        name

        and custom attributes through this endpoint.
      operationId: UpdateCustomer
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Request body has invalid or missing properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCustomerRequestError'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: UpdateAccountBody
  /customer/password/reset:
    post:
      tags:
        - Customer
      summary: Reset Password
      description: >
        **This is a required endpoint**



        This is used in the forgot password flow. It is expected that this
        endpoint

        will trigger an email to be sent to the user containing a link that the
        user

        can use to reset their password.


        The link should direct the user to the password reset page on your
        website.


        *NOTES*


        If the provided email address does not exist on the e-commerce platform
        then a `204` should

        still be returned.
      operationId: PasswordReset
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: han@thefalcon.com
        required: true
      responses:
        '204':
          description: Password reset email has been sent
          content: {}
        '400':
          description: The request contains invalid or missing data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: An error code
                        enum:
                          - invalid_email
                    description: A bad request error
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: ResetPasswordBody
  /customer/addresses/{id}:
    delete:
      tags:
        - Customer
      summary: Delete Address
      description: |
        Deletes a customer's address
      operationId: DeleteCustomerAddress
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
          content: {}
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    patch:
      tags:
        - Customer
      summary: Update Address
      description: |
        **This is a required endpoint**


        Updates a customer's address. Updates the address specified by the id.
      operationId: UpdateCustomerAddress
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      requestBody:
        description: An address
        content:
          application/json:
            schema:
              required:
                - address
              type: object
              properties:
                address:
                  $ref: '#/components/schemas/AddressRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: address
  /customer/addresses:
    get:
      tags:
        - Customer
      summary: View Addresses
      description: |
        **This is a required endpoint**

        View a customer's addresses.
      operationId: ViewCustomerAddresses
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    post:
      tags:
        - Customer
      summary: Create Address
      description: |
        **This is a required endpoint**

        Creates a new customer address.
      operationId: CreateAddress
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      requestBody:
        description: An address
        content:
          application/json:
            schema:
              required:
                - address
              type: object
              properties:
                address:
                  $ref: '#/components/schemas/AddressRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: address
  /customer/orders:
    get:
      tags:
        - Customer
      summary: |
        View Customer Orders (opt)
      description: |
        **Optional**

        Displays a Customer's order history.

        The response should be paginated. See Pagination for details on how this
        should be implemented.
      operationId: ViewOrderHistory
      parameters:
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: The number of items to return
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          description: The position of the cursor
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /customer/vouchers:
    get:
      tags:
        - Customer
      summary: |
        View Customer Vouchers (opt)
      description: |
        **Optional**

        Displays a Customer's vouchers.
      operationId: ViewVouchers
      parameters:
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: basket_id
          in: query
          description: >
            A basket ID. When given, only the *vouchers* that can be used in a
            basket

            will be returned.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vouchers'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /customer/campaigns:
    get:
      tags:
        - Customer
      summary: |
        View Customer Campaign (opt)
      description: |
        **Optional**

        Displays campaigns that are applicable to a customer.
      operationId: ViewCampaigns
      parameters:
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaigns'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /categories/tree:
    get:
      tags:
        - Categories
      summary: View Category Tree
      description: |
        **This is a required endpoint**

        **This endpoint is cached by Highstreet**

        Returns the full list of categories in a tree like structure.

        If a category should not be displayed in the app's navigation then the
        value of `hidden` can be set to `true`. Note that the category's sub
        categories will then also be hidden.
      operationId: ViewCategoryTree
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              example:
                id: root
                title: Women
                product_count: 155
                children:
                  - id: '4'
                    title: Tops
                    product_count: 51
                  - id: '9'
                    title: Bottoms
                    product_count: 87
                    children:
                      - id: '99'
                        title: Jeans
                        product_count: 54
                      - id: '105'
                        title: Chinos
                        product_count: 33
                  - id: '8'
                    title: Shoes
                    product_count: 17
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /stores:
    get:
      tags:
        - Stores
      summary: Find nearby stores (opt)
      description: |
        **Optional**

        Returns a list of nearby stores according to a set of coordinates and a
        maximum distance.
      operationId: FindNearbyStores
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: latitude
          in: query
          description: Latitude
          required: true
          schema:
            type: string
        - name: longitude
          in: query
          description: Longitude
          required: true
          schema:
            type: string
        - name: max_distance
          in: query
          description: The maximum distance from the latitude/longitude in kilometers.
          required: true
          schema:
            type: number
        - name: cursor
          in: query
          description: The position of the cursor
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: The number of items to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreList'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadStoreRequest'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /stores/{id}:
    get:
      tags:
        - Stores
      summary: Get Store Details (opt)
      description: |
        **Optional**

        Finds a store's details by ID.
      operationId: FindStorebyId
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /baskets/{id}:
    get:
      tags:
        - Basket
      summary: View Basket
      description: |
        **This is a required endpoint**

        Fetches the basket by ID.
      operationId: ViewBasket
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    delete:
      tags:
        - Basket
      summary: Delete Basket
      description: |
        **This is a required endpoint**

        Deletes a customer's basket by id.
      operationId: DeleteBasket
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /baskets:
    post:
      tags:
        - Basket
      summary: Create Basket
      description: |
        **This is a required endpoint**

        Creates an empty basket for a customer. Customers are allowed to have 1
        Basket at a time.
      operationId: CreateBasket
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '403':
          description: Customer already has a Basket
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - basket_id
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: An error code
                        enum:
                          - too_many_baskets
                      basket_id:
                        type: string
                        description: The id of the already existing basket
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /baskets/{id}/shipping_address:
    put:
      tags:
        - Basket
      summary: Update Shipping Address
      description: >
        **This is a required endpoint**


        Sets and updates the shippping address of the basket.


        *NOTE* It may be possible that only a partial address is initially
        provided. This is the case

        when the customer pays with ApplePay for example. Initially the device
        will only have access

        to a partial address, once the customer authorises the payment this
        endpoint will be called

        again before finalising the order. As such many fields are optional and
        if any address

        validation takes places it should be done when the `POST /orders`
        endpoint is called to

        finalize the order. As it is garanteed that the address will be complete
        once that endpoint has

        been called.
      operationId: UpdateBasketShippingAddress
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        description: A Basket Address
        content:
          application/json:
            schema:
              required:
                - address
              type: object
              properties:
                address:
                  $ref: '#/components/schemas/BasketAddress'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: basket_address
  /baskets/{id}/billing_address:
    put:
      tags:
        - Basket
      summary: Update Billing Address
      description: >
        **This is a required endpoint**


        Sets and updates the billing address of the basket.


        *NOTE* It may be possible that only a partial address is initially
        provided. This is the case

        when the customer pays with ApplePay for example. Initially the device
        will only have access

        to a partial address, once the customer authorises the payment this
        endpoint will be called

        again before finalising the order. As such many fields are optional and
        if any address

        validation takes places it should be done when the `POST /orders`
        endpoint is called to

        finalize the order. As it is garanteed that the address will be complete
        once that endpoint has

        been called.
      operationId: UpdateBasketBillingAddress
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        description: A Basket Address
        content:
          application/json:
            schema:
              required:
                - address
              type: object
              properties:
                address:
                  $ref: '#/components/schemas/BasketAddress'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: basket_address
  /baskets/{id}/shipping_methods:
    get:
      tags:
        - Basket
      summary: Get Shipping Methods
      description: >
        **This is a required endpoint**


        Gets a list of Shipping methods for a basket. Only applicable shipping
        methods

        should be returned. For example a US specific shipping method should not
        be

        returned for a basket with a shipping address in the Netherlands.


        *NOTES*


        If the shipping address has not been set yet it's expected that the list
        will be empty.


        Regarding pick up in store. If the e-commerce platform supports pick up
        in store then a shipping

        method with the code `pick_up_in_store` should be returned. The app will
        then recognise this

        method and make a request to the `/stores` endpoint to get a list of the
        available stores.

        The store id's will then be used as the suboptions for the
        `pick_up_in_store` option.
      operationId: GetBasketShippingMethods
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethods'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    put:
      tags:
        - Basket
      summary: Update Shipping Method
      description: |
        **This is a required endpoint**

        Sets and updates the Shipping method of the basket.
      operationId: UpdateBasketShippingMethod
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        description: A Shipping Method object
        content:
          application/json:
            schema:
              type: object
              properties:
                shipping_method:
                  $ref: '#/components/schemas/ShippingMethodRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '422':
          description: Can't process the request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: An error code
                        enum:
                          - option_required
                          - unknown_code
                          - unknown_option
                          - invalid_code
                          - invalid_option
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: Shipping Method
  /baskets/{id}/payment_methods:
    get:
      tags:
        - Basket
      summary: Get Payment Methods
      description: |
        **This is a required endpoint**

        Gets a list of applicable payment methods for a basket.
      operationId: GetBasketPaymentMethods
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    put:
      tags:
        - Basket
      summary: Update Payment Method
      description: |
        **This is a required endpoint**

        Sets and updates the Payment method of the basket.
      operationId: UpdateBasketPaymentMethod
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        description: A Payment Method object
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method:
                  $ref: '#/components/schemas/PaymentMethodRequest'
        required: true
      responses:
        '200':
          description: Successfully updated the payment method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '422':
          description: Can't process the request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: An error code
                        enum:
                          - option_required
                          - unknown_code
                          - unknown_option
                          - invalid_code
                          - invalid_option
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: Payment Method
  /baskets/{id}/items:
    post:
      tags:
        - Basket
      summary: Add Line Item
      description: |
        **This is a required endpoint**

        Add a line item to the basket.
      operationId: AddBasketItems
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - item
              type: object
              properties:
                item:
                  $ref: '#/components/schemas/BasicLineItem'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '422':
          description: Item cannot be added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketItemUpdateError'
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: Line item
  /baskets/{id}/items/{item_id}:
    put:
      tags:
        - Basket
      summary: Update a Line Item
      description: |
        **This is a required endpoint**

        Updates a line item by either changing the quantity or product id.
      operationId: UpdateLineItem
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: item_id
          in: path
          description: Unique identifier of the item.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - item
              type: object
              properties:
                item:
                  $ref: '#/components/schemas/BasicLineItem'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '404':
          description: Item does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Item cannot be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketItemUpdateError'
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: Line item
    delete:
      tags:
        - Basket
      summary: Delete Line Item
      description: >
        **This is a required endpoint**


        Removes a line item from the basket. If the item does not exist the
        operation

        should be considered successful.
      operationId: DeleteLineItem
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: item_id
          in: path
          description: Unique identifier of the item.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '403':
          description: Item cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketItemDeletionError'
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /baskets/{id}/coupons:
    post:
      tags:
        - Basket
      summary: Add Coupon
      description: |
        **This is a required endpoint**

        Applies a coupon to the basket.
      operationId: AddCoupons
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - coupon
              type: object
              properties:
                coupon:
                  $ref: '#/components/schemas/CouponItem'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '422':
          description: Coupon code cannot be added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                      - coupon_code
                    type: object
                    properties:
                      coupon_code:
                        type: string
                        description: The code of the invalid coupon
                      code:
                        type: string
                        description: An error code
                        enum:
                          - unknown_coupon
                          - expired_coupon
                          - too_many_coupons
                          - already_redeemed
                          - already_in_basket
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: Coupon item
  /baskets/{id}/coupons/{coupon_code}:
    delete:
      tags:
        - Basket
      summary: Remove a coupon
      description: |
        **This is a required endpoint**

        Removes a coupon from the basket
      operationId: RemoveCoupon
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: coupon_code
          in: path
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /baskets/{id}/vouchers:
    post:
      tags:
        - Basket
      summary: Add Voucher (opt)
      description: |
        **This is an optional endpoint**

        Applies a voucher to the basket.
      operationId: AddVoucher
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - voucher
              type: object
              properties:
                voucher:
                  $ref: '#/components/schemas/VoucherItem'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '422':
          description: Voucher cannot be added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                      - voucher_id
                    type: object
                    properties:
                      voucher_id:
                        type: string
                        description: The id of the invalid voucher
                      code:
                        type: string
                        description: An error code
                        enum:
                          - unknown_voucher_id
                          - expired_voucher
                          - too_many_vouchers
                          - already_redeemed
                          - already_in_basket
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: Voucher item
  /baskets/{id}/vouchers/{voucher_id}:
    delete:
      tags:
        - Basket
      summary: Remove a Voucher (opt)
      description: |
        **This is an optional endpoint**

        Removes a Voucher from the basket
      operationId: RemoveVoucher
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: voucher_id
          in: path
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /baskets/{id}/customer:
    put:
      tags:
        - Basket
      summary: Update Customer Details
      description: |
        **This is a required endpoint**

        Updates the customer's details on the basket.
      operationId: UpdateBasketCustomer
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - customer
              type: object
              properties:
                customer:
                  $ref: '#/components/schemas/BasicCustomer'
              description: Customer Information
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      x-codegen-request-body-name: Customer
  /countries:
    get:
      tags:
        - Miscellaneous
      summary: Get Countries
      description: >
        **This is a required endpoint**


        Fetches information about the possible countries that the locale ships
        too. Only countries that

        are valid for the specified country should be returned.


        This information is used in the address input fields.
      operationId: GetCountries
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Countries'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /orders:
    post:
      tags:
        - Basket
      summary: Finalize a basket
      description: >
        **This is a required endpoint**


        Converts a basket into an Order. This means that no changes can be made
        to

        the basket anymore. This is the final step in the checkout flow and
        means

        that the app is now waiting on the customer to complete the payment.
      operationId: CreateOrder
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                basket_id:
                  type: string
                  description: The id of the basket
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadBasketRequest'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: An error code
                        enum:
                          - basket_missing_errors
        '500':
          description: An error occured finalizing the basket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketFinalizeError'
      x-codegen-request-body-name: basket_id
  /order/{id}:
    get:
      tags:
        - Miscellaneous
      summary: Get Order
      description: |
        **This is a required endpoint**
      operationId: GetOrderByID
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the resource.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: The request body contained invalid or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /product_search:
    get:
      tags:
        - Products
      summary: Search
      description: >
        **This is a required endpoint**


        **This endpoint is cached by Highstreet**


        The Product Search endpoint provides product search and filtering. It is

        used on product lister pages and the product search page.


        There are several query string parameters to restrict the number of
        search

        results. The following parameters are supported:


        * The parameter `q` can be used to find all products matching a
        particular
          search term. Customers can use this to search for a product by name, for
          example.
        * The parameter `cat` can be used to find all product that are assigned
        to a
          specific category.
        * Filter parameters can be used to filter products based on a predefined
          list of attributes. Filter parameters take the form `{attr}:{type}`.

          See the Filtering section below for more details.

        When none of the query string parameters are given it is expected that
        all

        available products are returned.


        It should be possible to combine query string parameters. This allows a

        customer to search for a product by name within a specific category, for

        example.


        **Example**: Find Polo Shirts in the category Men with a price between

        €25 and €75.


        ```

        GET /product_search?q=Polo+shirt&cat=men&price:range=25,75

        ```


        ### Filtering

        Highstreet supports filtering products by a predefined list of
        attributes

        and their possible values. This list is provided by you in the `filters`

        property of a product search response.


        Applying a filter is done through a query string parameter.


        Two filter types are currently supported:


        * A **set membership filter** (type `in`) only yields products where the
          value of a given attribute is present in a set of given values.

          Example: `color:in=black|yellow` finds all products with the color black
          or yellow.

        * The **range filter** (`range`) only yields products where the value of
          a particular attribute falls between a minimum and maximum.

          Example: `price:range=50,100` filters on products in the price range
          50 to 100.

        **NOTE**: The list of available filters should be updated when a filter
        is

        applied.


        ### Search Results

        Product search results consist of two product IDs:


        * The `display_id` tells Highstreet which product to display on product
          list views. Usually this is the ID of a product of type *variant*.
        * The `details_id` tells Highstreet which product to use to fetch the
          details. Usually this is the ID of a product of type *variable*.

        **Example**: A customer searches for the term "Scarf" and filters on the

        "color" attribute with the value "blue".


        A *variable product* available in both blue and yellow matches these

        criteria.

        ![Scarfs](scarfs.svg "Scarfs")

        To ensure the app displays the blue scarf the search result would look

        as follows:


        ```javascript

        {
          "details_id": "746382",
          "display_id": "746382-004"
        }

        ```


        ### Sorting

        Highstreet supports sorting of product search results predefined list of
        attributes sorting

        options. This list is provided by you in the `sorting_options` property
        of a product search

        response.


        Applying a sorting option is done through a query string parameter
        (`sort`).


        Example: `sort=price-low-to-high` sorts the serach results by price in
        ascending order.


        **NOTE**: For the sake of simplicty invalid sorting_options are expected
        to be ignored.


        ## Implementation notes


        * It is recommended to exclude products that are (no longer) available
        from
          search results.
        * The query string parameters `q` and `cat` are required to be
        implemented.
          The filter parameters are optional.
        * This endpoint is used by the barcode scanner in the app. The product's
        EAN will be contained in
          the `q` parameter.
      operationId: FetchProductSearchResults
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
        - name: cat
          in: query
          description: >
            The ID of the category to search in.


            When given the results should be restricted to products falling
            under

            a certain category (including its child categories).
          schema:
            type: string
        - name: q
          in: query
          description: |
            A free-form search query.

            When given the results should be restricted to products it matching
            the search query.
          schema:
            type: string
        - name: sort
          in: query
          description: An id of a sorting option.
          schema:
            type: string
        - name: cursor
          in: query
          description: The position of the cursor
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: The number of items to return
          required: true
          schema:
            type: string
        - name: suggest_filters
          in: query
          description: |
            When `true` the list of suggested filters (`filters`) is expected
            in the response.
          required: true
          schema:
            type: boolean
        - name: '{attr}:in'
          in: query
          description: >
            Set membership filter. Replace `{attr}` with an attribute code.
            Values

            are separated by a pipe (`|`).
          schema:
            type: string
        - name: '{attr}:range'
          in: query
          description: >
            Range filter. Replace `{attr}` with an attribute code. The minimum
            and

            maximum are separated by a comma (`,`).
          schema:
            type: string
            format: ^[0-9]+,[0-9]+$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchResultSet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchError'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: Internal Server Error
          content: {}
  /product_details:
    get:
      tags:
        - Products
      summary: Details
      description: >
        **This is a required endpoint**


        **This endpoint is cached by Highstreet**


        The Details endpoint provides product information by product ID. This

        endpoint is used on all screens showing product data.


        By default only the **required** properties are expected in the
        response.

        When the query string parameter `full_details` is set to `true` *all*

        available properties are expected.


        `full_details` is only set to `true` when requesting products to display
        on the product detail

        page(PDP)


        ### Caching


        Product data is cached by Highstreet by product ID.
      operationId: FetchProductDetails
      parameters:
        - name: ids
          in: query
          description: A list of max. 50 product IDs separated by commas (`,`).
          required: true
          schema:
            type: string
        - name: full_details
          in: query
          description: Request the full product details
          required: true
          schema:
            type: boolean
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailSet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsError'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: Internal Server Error
          content: {}
  /product_availabilities:
    get:
      tags:
        - Products
      summary: Availability
      description: |
        **This is a required endpoint**

        The Availability endpoint provides up-to-date availability and pricing
        data by product ID. It is used on product detail pages.
      operationId: FetchProductAvailabilities
      parameters:
        - name: ids
          in: query
          description: A list of max. 50 product IDs separated by commas (`,`).
          required: true
          schema:
            type: string
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAvailabilitySet'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /product_related:
    get:
      tags:
        - Products
      summary: Related
      description: >
        **This is a required endpoint**


        **This endpoint is cached by Highstreet**


        The Related Products endpoint provides a list recommended products by

        product ID. Multiple types of relations are supported:


        * `cross-sell`: products that add additional value when bought together
          with the product being viewed.
        * `up-sell`: products that could be bought instead of the product being
          viewed.
        * `general`: products with a general relation to the product being
        viewed.

        * `accessories`: products that would be great as an accessory to the
          product being viewed.

        The Related Products endpoint is used on product detail pages.
      operationId: FetchRelatedProducts
      parameters:
        - name: id
          in: query
          description: A Product id.
          required: true
          schema:
            type: string
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelatedProductSet'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: Internal Server Error
          content: {}
  /product_store_availabilities:
    get:
      tags:
        - Products
      summary: Store Availability
      description: >
        The Store Availability endpoint provides up-to-date in-store
        availability

        data. It is used to check if a particular product is available in one or

        more particular stores.


        The provided store IDs must be the same store IDs used with the

        [Stores endpoints](#tag/Stores).
      operationId: FetchProductStoreAvailabilities
      parameters:
        - name: product_ids
          in: query
          description: A list of max. 50 product IDs separated by commas (`,`).
          required: true
          schema:
            type: string
        - name: store_ids
          in: query
          description: A list of max. 50 store IDs separated by commas (`,`).
          required: true
          schema:
            type: string
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: The identifier of the currency
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductStoreAvailabilitySet'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - invalid_hs_token
                    description: An authentication error
              example:
                code: invalid_hs_token
                message: invalid or expired token
        '500':
          description: An internal server error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /wishlists/{id}:
    get:
      tags:
        - Wishlists
      summary: Fetch wishlist
      description: |
        Finds a wishlist details by ID.
      operationId: GetWishlistById
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the wishlist
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlist'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /wishlists/{id}/items:
    post:
      tags:
        - Wishlists
      summary: Add wishlist item
      description: |
        Adds a product to a wishlist. The items is added at the end of the
        existing wishlist.
      operationId: AddWishlistItem
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the wishlist
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      requestBody:
        description: Wishlist item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWishlistItemRequest'
        required: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistItem'
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Item cannot be added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddWishlistItemError'
      x-codegen-request-body-name: Wishlist item
  /wishlists/{id}/items/{item_id}:
    delete:
      tags:
        - Wishlists
      summary: Delete wishlist item
      description: |
        Delete an item from a wishlist. If the item doesn't exist on the server
        the operations is treated as a success.
      operationId: RemoveWishlistItem
      parameters:
        - name: X-Hs-Api-Token
          in: header
          description: >-
            An authorization token provided by the e-commerce platform used for
            authentication
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >
            The customer's access token with the type bearer prefix eg: `Bearer
`
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the wishlist
          required: true
          schema:
            type: string
        - name: item_id
          in: path
          description: Unique identifier of an item on a wishlist
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: The identifier of the locale
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          content: {}
        '401':
          description: API key or access token is missing, invalid or expired.
          headers:
            WWW-Authenticate:
              description: Reason for failure.
              schema:
                type: string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Err'
                  - required:
                      - code
                    type: object
                    properties:
                      code:
                        type: string
                        description: The error code
                        enum:
                          - expired_oauth_token
                          - invalid_oauth_token
                          - invalid_api_key
                    description: An authentication error
              example:
                code: invalid_oauth_token
                message: invalid or expired token
        '404':
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
components:
  schemas:
    Err:
      type: object
      properties:
        message:
          type: string
          description: Developer friendly error message.
      description: Error envelope
    ServerError:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - server_error
          description: An internal server error
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - not_found
          description: A not found error
    InputError:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - missing
                - invalid
                - duplicate
            field:
              type: string
              description: The offending field name
          description: An error related to writing data to a resource
    AccountError:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - missing
                - invalid
                - already_exists
            field:
              type: string
              description: The offending field name
          description: An error updating custoemr info
    AccountVerificationError:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - verification_required
          description: An error while creating a customer
    CurrencyCode:
      maxLength: 3
      minLength: 3
      type: string
      description: >-
        An three character [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        currency code.
      example: EUR
    Customer:
      required:
        - addresses
        - first_name
        - handle
        - id
        - last_name
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the customer
        handle:
          type: string
          description: The login identifier, usually an e-mail address.
        email:
          type: string
          description: The customer's e-mail address.
          format: email
        default_billing_address_id:
          type: string
          description: specifies the id of the customer's default/preferred address
        first_name:
          type: string
          description: Customer's first name
        last_name:
          type: string
          description: Customer's last name
        custom:
          type: object
          properties: {}
          description: Custom customer attributes
        points_balance:
          type: number
          description: The number of points the customer has
        membership_level:
          required:
            - id
            - title
          type: object
          properties:
            title:
              type: string
              description: The human readable name of the membership level
            id:
              type: string
              description: The id of the membership level
          description: >
            Defines configuration/properties related to a customer's membership
            level
        basket_id:
          type: string
          description: >
            The id of the customer's existing basket. Can be null if the
            customer does not yet have a

            basket
        barcode:
          required:
            - type
            - value
          type: object
          properties:
            type:
              type: string
              description: The barcode type.
              enum:
                - code128
            value:
              minLength: 1
              type: string
              description: >
                The value to encode as a barcode. In theory any string can be
                used here.

                However the longer the string the bigger the barcode. This
                barcode has

                to be scaled down to fit within the app. Therefore a long value

                (30+ characters) may result in a barcode that is not scannable
          description: The number and type of a barcode for use in the customer card
        addresses:
          type: array
          description: List of customer addresses
          items:
            $ref: '#/components/schemas/Address'
        wishlist_id:
          type: string
          description: >
            The identifier of the customer's wishlist. This will be used to
            interact

            with the Wishlist endpoints.
        user_segments:
          type: array
          description: >
            A list of user segment identifiers that the customer has been
            assigned to.
          items:
            type: string
            description: A user segment ID
      example:
        id: 57982b5fecc2
        handle: han@thefalcon.com
        email: han@thefalcon.com
        first_name: Han
        default_billing_address_id: home
        last_name: Solo
        points_balance: 50
        membership_level:
          id: gld_1
          title: Gold
        basket_id: '12345'
        barcode:
          type: code128
          value: '701729857201987409127'
        addresses:
          - id: home
            first_name: Han
            last_name: Solo
            street: Hooghiemstraplein
            house_number: '154'
            postal_code: 3514 AZ
            city: Utrecht
            country_id: NL
            telephone: 030-2769165
          - id: work
            first_name: Han
            last_name: Solo
            street: Biltstraat
            house_number: '1'
            postal_code: 1234 TP
            city: Utrecht
            country_id: NL
            telephone: 030-2769165
        custom: {}
        wishlist_id: b8703c50
        user_segments:
          - loyalty_member
          - early_access
    CustomerUpdateBody:
      type: object
      properties:
        first_name:
          type: string
          description: First name
          example: Han
        last_name:
          type: string
          description: Last name
          example: Solo
        custom:
          type: object
          properties: {}
          description: Custom customer attributes
    CustomerCreateBody:
      required:
        - first_name
        - handle
        - last_name
        - password
      type: object
      properties:
        handle:
          type: string
          description: The login identifier, usually an e-mail address.
          example: han@thefalcon.com
        email:
          type: string
          description: E-mail address
          format: email
          example: han@thefalcon.com
        password:
          type: string
          description: Desired password
          format: password
          example: password
        first_name:
          type: string
          description: First name
          example: Han
        last_name:
          type: string
          description: Last name
          example: Solo
        custom:
          type: object
          properties: {}
          description: Custom customer attributes
    AddressFields:
      type: object
      properties:
        first_name:
          type: string
          description: The recipient's first name
        last_name:
          type: string
          description: The recipient's last name
        company:
          type: string
          description: The company name of the recipient
        street:
          type: string
          description: Street name
        house_number:
          type: string
          description: House number
        addition:
          type: string
          description: Addition
        postal_code:
          type: string
          description: Postal or ZIP code
        city:
          type: string
          description: The city name
        state:
          type: string
          description: The state code.
        country_id:
          maxLength: 2
          type: string
          description: >-
            A two character [ISO 3166-1
            Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country
            code
        telephone:
          type: string
          description: The phone number of the recipient
        custom:
          type: object
          properties: {}
          description: Custom address attributes
      description: An address
    Addresses:
      type: object
      properties:
        addresses:
          type: array
          description: An array of Addresses
          items:
            $ref: '#/components/schemas/Address'
    Address:
      allOf:
        - $ref: '#/components/schemas/AddressFields'
        - type: object
          properties:
            id:
              type: string
              description: The identifier of the address, eg home
        - type: object
    AddressRequest:
      allOf:
        - $ref: '#/components/schemas/AddressFields'
        - type: object
    Category:
      required:
        - id
        - title
      type: object
      properties:
        id:
          type: string
          description: The id of the Category
        title:
          type: string
          description: The localised human readable name of the category
        image:
          type: string
          description: |
            A url to an image of the category. Currently this is not used
        product_count:
          type: integer
          description: |
            The number of products that can be found in this category. This is
            currently always set to 8
        hide_in_app:
          type: boolean
          description: |
            Should this category be hidden in the app?
          default: false
        children:
          type: array
          description: List of sub categories
          items:
            $ref: '#/components/schemas/Category'
      description: A category
    CouponItem:
      required:
        - code
      type: object
      properties:
        code:
          minLength: 1
          type: string
          description: The coupon code
      description: A Coupon.
      example:
        code: 10OFF
    VoucherItem:
      required:
        - id
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: The Voucher id
      description: A Voucher.
      example:
        id: 1234-8796-1234-7789
    Wishlist:
      required:
        - item_count
        - items
      type: object
      properties:
        items:
          type: array
          description: List of items on the wishlist
          items:
            $ref: '#/components/schemas/WishlistItem'
        item_count:
          type: number
          description: Total number of items in the wishlist
          example: 1
      description: A wishlist
    WishlistItem:
      required:
        - id
        - product_id
      type: object
      properties:
        id:
          type: string
          description: Identifier of the item
        product_id:
          type: string
          description: >-
            The product ID of the product being displayed. The attributes,
            media, pricing, etc are taken from this product.
      description: An item on a wishlist
    AddWishlistItemRequest:
      required:
        - item
      type: object
      properties:
        item:
          required:
            - product_id
          type: object
          properties:
            product_id:
              type: string
              description: The ID of the product to add to the wishlist
          description: Item to add to the wishlist
      example:
        item:
          product_id: 1234_AB/S
    AddWishlistItemError:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - invalid
                - unknown_product
          description: Unknown product
    Countries:
      type: object
      properties:
        countries:
          type: array
          items:
            $ref: '#/components/schemas/Country'
      description: >-
        An three character [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        currency code.
    Country:
      required:
        - code
        - name
      type: object
      properties:
        name:
          type: string
          description: The localised name of the country
        code:
          type: string
          description: >-
            The two character [ISO 3166-1
            Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country
            code
        states:
          type: array
          description: >-
            An array of all states. Can be empty if the country does not have or
            does not require any states
          items:
            $ref: '#/components/schemas/State'
      example:
        name: United States
        code: US
        states:
          - name: Colorado
            code: CO
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - invalid
                - missing
          description: A bad request error
    BadStoreRequest:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - invalid_coordinates
                - invalid_maxdistance
                - invalid_pagination
          description: A bad request error
    Barcode:
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: The barcode type.
          enum:
            - code128
        value:
          minLength: 1
          type: string
          description: The value to encode as a barcode.
      description: Description of a barcode.
      example:
        type: code128
        value: '987982019'
    BasicLineItem:
      required:
        - product_id
        - quantity
      type: object
      properties:
        product_id:
          minLength: 1
          type: string
          description: Product identifier
        quantity:
          minimum: 0
          type: number
          description: Quantity
      description: A line item
      example:
        product_id: 1234_AB/S
        quantity: 1
    BasicCustomer:
      required:
        - email
      type: object
      properties:
        email:
          type: string
          description: The customer's e-mail address.
          format: email
      example:
        email: han@thefalcon.com
    BasicItem:
      required:
        - code
      type: object
      properties:
        code:
          minLength: 1
          type: string
          description: The unique identifer
        option:
          type: string
          description: The selected suboption
      description: The selected method.
    ShippingMethodRequest:
      required:
        - code
      type: object
      properties:
        code:
          minLength: 1
          type: string
          description: The unique identifer
        option:
          type: string
          description: The selected suboption
      description: The selected method.
    PaymentMethodRequest:
      required:
        - code
      type: object
      properties:
        code:
          minLength: 1
          type: string
          description: The unique identifer
        option:
          type: string
          description: The selected suboption
      description: The selected method.
    BasketAddress:
      allOf:
        - $ref: '#/components/schemas/AddressFields'
    BasketItemUpdateError:
      description: An error related to an item in the basket
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - product_not_found
                - insufficient_quantity
                - too_many_items
    BasketItemDeletionError:
      description: An error related to deleting an item in the basket
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - product_is_promotional
    BasketError:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The error type
        message:
          type: string
          description: A developer friendly error message
      description: An error relating to the basket
      discriminator:
        propertyName: type
    basket_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - basket_full
          description: An error related to the Basket as a whole
    basket_item_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
            - item_id
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - insufficient_quantity
            item_id:
              type: string
              description: ID of the item causing the error
          description: An error related to an item in the Basket
    voucher_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
            - voucher_id
          type: object
          properties:
            voucher_id:
              type: string
              description: The id of the invalid voucher
            code:
              type: string
              description: An error code
              enum:
                - expired
                - already_redeemed
          description: An error related to a voucher in the Basket
    coupon_code_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - expired_coupon
                - unknown_coupon
                - already_redeemed
          description: An error related to a coupon code in the Basket
    customer_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - missing
          description: An error related to the Basket's customer data
    billing_address_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - missing
          description: An error related to the Basket's billing address
    shipping_address_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - missing
          description: An error related to the Basket's shipping address
    payment_method_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - missing
                - invalid
          description: An error related to the Basket's payment method
    shipping_method_error:
      allOf:
        - $ref: '#/components/schemas/BasketError'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - missing
                - invalid
          description: An error related to the Basket's shipping method
    BasketCustomer:
      type: object
      properties:
        email:
          type: string
          description: The customer's email address
        id:
          type: string
          description: The customer's id on the e-commerce platform
      description: Details of the customer associated to the basket
    BasketFinalizeError:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - stock_error
          description: An error occurred finalizing the basket
    OAuthRequest:
      required:
        - grant_type
      type: object
      properties:
        grant_type:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
      description: OAuth 2.0 request
      discriminator:
        propertyName: grant_type
    Order:
      required:
        - billing_address
        - currency_code
        - customer_email
        - customer_id
        - items
        - number
        - shipments
        - totals
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Unique identifier of the order.
          example: PNZfEiFcNM
        number:
          minLength: 1
          type: string
          description: Order number.
          example: EU000027546
        customer_id:
          minLength: 1
          type: string
          description: Unique identifier of the customer that made the order.
          example: 1234-6789-1234-0986
        customer_email:
          minLength: 1
          type: string
          description: The email address associated to this order
          example: han@therepublic.com
        creation_date:
          type: string
          description: An ISO 8601 timestamp
          example: 2018-08-17 14:53:00 UTC
        source:
          type: string
          description: Source of the order.
          example: app
          enum:
            - app
            - web
            - store
        status:
          type: string
          description: Order status
          enum:
            - created
            - confirmed
            - cancelled
            - returned
            - completed
            - unknown
        items:
          minItems: 1
          type: array
          description: List of purchased items.
          items:
            $ref: '#/components/schemas/OrderItem'
        billing_address:
          type: object
          allOf:
            - $ref: '#/components/schemas/Address'
            - type: object
              description: The billing address associated with the order
        payments:
          type: array
          description: List of payments associated with the order.
          items:
            $ref: '#/components/schemas/Payment'
        shipments:
          type: array
          description: List of shipments associated with the order.
          items:
            $ref: '#/components/schemas/Shipment'
        totals:
          $ref: '#/components/schemas/Totals'
        prices_include_tax:
          type: boolean
          description: Do the prices include tax? Applies to *all* prices for the order.
          default: true
        currency_code:
          type: object
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
            - type: object
              description: >-
                The three character [ISO
                4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for
                the currency the order was made with.
        tracking_url:
          type: string
          description: >
            A URL to a web page where the customer can track the delivery of the
            order.
      description: An order
    refresh_token:
      allOf:
        - $ref: '#/components/schemas/OAuthRequest'
        - required:
            - refresh_token
          type: object
          properties:
            refresh_token:
              type: string
              description: |
                A refresh token that was previously provided
    password:
      allOf:
        - $ref: '#/components/schemas/OAuthRequest'
        - required:
            - password
            - username
          type: object
          properties:
            username:
              type: string
              description: >
                The customer's username. Usually this will be their email
                address
            password:
              type: string
              description: |
                The users password
    guest:
      allOf:
        - $ref: '#/components/schemas/OAuthRequest'
        - type: object
    sign_in_with_apple:
      allOf:
        - $ref: '#/components/schemas/OAuthRequest'
        - required:
            - token
          type: object
          properties:
            token:
              type: string
              description: |
                **NOTE**: This `grant_type` is **optional**.

                The Apple identity token. This is a signed JWT that should be
                validated.
    OAuthToken:
      required:
        - access_token
        - token_type
      type: object
      properties:
        access_token:
          type: string
          description: The access token
        token_type:
          type: string
          description: Token type
          enum:
            - bearer
        expires_in:
          minimum: 0
          type: integer
          description: |
            The number of seconds the access token is valid for. Unnecessary if
            the access token cannot expire.
        refresh_token:
          type: string
          description: |
            A refresh token that can be used to obtain a new access token.

            **Implementation notes**

            * If a `refresh_token` is given the app stores it and exchanges it
              for a new access token when the current access token is expired.
            * When refreshing a token and no *new* `refresh_token` is given the
              app assumes the original refresh token is still valid.
      description: Standard OAuth 2.0 Access Token Response
    State:
      required:
        - code
        - name
      type: object
      properties:
        name:
          type: string
          description: The localised name of the State
        code:
          type: string
          description: A code for the state
      example:
        name: Colorado
        code: CO
    StoreList:
      required:
        - reference_location
        - stores
      type: object
      properties:
        reference_location:
          type: object
          allOf:
            - $ref: '#/components/schemas/Coordinates'
            - type: object
              description: The location that was used to find nearby stores
        stores:
          type: array
          description: |
            List of stores sorted by the proximity to the reference location
          items:
            $ref: '#/components/schemas/Store'
      description: List of stores
    Store:
      required:
        - address
        - coordinates
        - id
        - name
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Unique identifier of the store
        name:
          minLength: 1
          type: string
          description: Name of the store
        address:
          type: object
          properties:
            street:
              minLength: 1
              type: string
              description: Street name
            house_number:
              minLength: 1
              type: string
              description: House number
            addition:
              minLength: 1
              type: string
              description: Addition
            postal_code:
              minLength: 1
              type: string
              description: Postal or ZIP code
            city:
              minLength: 1
              type: string
              description: The city name
            state:
              minLength: 1
              type: string
              description: The state code.
            country_id:
              maxLength: 2
              minLength: 2
              type: string
              description: >-
                A two character [ISO 3166-1
                Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
                country code
          description: The address of the store
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        distance:
          minimum: 0
          type: number
          description: Distance from the reference location in kilometres
        image:
          type: string
          description: Image of the store
          format: uri
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        content_extensions:
          type: array
          items:
            $ref: '#/components/schemas/ContentExtension'
        opening_hours:
          $ref: '#/components/schemas/OpeningHours'
        contact_details:
          $ref: '#/components/schemas/ContactDetails'
      description: Description of a brick and mortar store
      example:
        id: ff5e5f52-d62e-e511-80c8-02bfac10024b
        name: Flag Ship Store
        address:
          street: Hooghiemstraplein
          house_number: '154'
          postal_code: 3514 AZ
          city: Utrecht
          country_id: NL
          telephone: 00 31 303004120
        coordinates:
          latitude: 5.1197
          longitude: 52.09123
        distance: 0.9
        opening_hours:
          - - open: '09:00'
              close: '12:00'
            - open: '15:00'
              close: '19:00'
          - - open: '09:00'
              close: '12:00'
            - open: '15:00'
              close: '19:00'
          - - open: '09:00'
              close: '12:00'
            - open: '15:00'
              close: '19:00'
          - - open: '09:00'
              close: '12:00'
            - open: '15:00'
              close: '19:00'
          - - open: '09:00'
              close: '12:00'
            - open: '15:00'
              close: '19:00'
          - - open: '09:00'
              close: '12:00'
            - open: '15:00'
              close: '19:00'
          - - open: '09:00'
              close: '12:00'
            - open: '15:00'
              close: '19:00'
    Coordinates:
      required:
        - latitude
        - longitude
      type: object
      properties:
        latitude:
          maximum: 90
          minimum: -90
          type: number
          description: Latitude
        longitude:
          maximum: 180
          minimum: -180
          type: number
          description: Longitude
      description: GPS coordinates
      example:
        latitude: 52.0986345
        longitude: 5.1251368
    OpeningHours:
      type: object
      properties:
        mon:
          $ref: '#/components/schemas/OpeningHour'
        tue:
          $ref: '#/components/schemas/OpeningHour'
        wed:
          $ref: '#/components/schemas/OpeningHour'
        thu:
          $ref: '#/components/schemas/OpeningHour'
        fri:
          $ref: '#/components/schemas/OpeningHour'
        sat:
          $ref: '#/components/schemas/OpeningHour'
        sun:
          $ref: '#/components/schemas/OpeningHour'
      additionalProperties: false
      description: >
        Opening hours of the store. The keys are the days of the week, where 0
        is

        monday. A missing key means the store is *closed*.
    OpeningHour:
      required:
        - close
        - open
      type: object
      properties:
        open:
          pattern: ^[012][0-9]:[0-5][0-9]$
          type: string
          description: Opening time
          example: '600'
        close:
          pattern: ^[012][0-9]:[0-5][0-9]$
          type: string
          description: Closing time
          example: '960'
      description: An opening hour timeslot.
    OrderList:
      type: object
      properties:
        total:
          type: integer
          description: The total number of orders the customer has
        count:
          type: integer
          description: The number of orders in the response
        cursor:
          type: integer
          description: The Index of the next order in the list
        orders:
          type: array
          items:
            $ref: '#/components/schemas/CustomerOrder'
    ContactDetails:
      type: object
      properties:
        telephone:
          type: string
          description: The Telephone Number of the store
        email:
          type: string
          description: The Email Address of the store
      additionalProperties: false
      description: |
        The contact details of the Store
    Tag:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag, to be used for searching
        name:
          type: string
          description: The display name of the tag, to be displayed to the user
      additionalProperties: false
      description: |
        A Tag item used for searching and display
    ContentExtension:
      type: object
      properties:
        id:
          type: string
          description: The ID of the content extension
        content_type:
          type: string
          description: Whether the content is URL or HTML
          enum:
            - url
            - html
        name:
          type: string
          description: The Content Name
        content:
          type: string
          description: A URL or blob of HTML to rendered or redirected to
      additionalProperties: false
      description: |
        A Content Extension used to display to the user
    CustomerOrder:
      required:
        - billing_address
        - currency_code
        - customer_email
        - customer_id
        - items
        - number
        - shipments
        - totals
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Unique identifier of the order.
          example: PNZfEiFcNM
        number:
          minLength: 1
          type: string
          description: Order number.
          example: EU000027546
        customer_id:
          minLength: 1
          type: string
          description: Unique identifier of the customer that made the order.
          example: 1234-6789-1234-0986
        customer_email:
          minLength: 1
          type: string
          description: The email address associated to this order
          example: han@therepublic.com
        creation_date:
          type: string
          description: An ISO 8601 timestamp
          example: 2018-08-17 14:53:00 UTC
        source:
          type: string
          description: Source of the order.
          example: app
          enum:
            - app
            - web
            - store
        status:
          type: string
          description: Order status
          enum:
            - created
            - confirmed
            - cancelled
            - returned
            - completed
            - unknown
        items:
          minItems: 1
          type: array
          description: List of purchased items.
          items:
            $ref: '#/components/schemas/OrderItem'
        billing_address:
          type: object
          allOf:
            - $ref: '#/components/schemas/Address'
            - type: object
              description: The billing address associated with the order
        payments:
          type: array
          description: List of payments associated with the order.
          items:
            $ref: '#/components/schemas/Payment'
        shipments:
          type: array
          description: List of shipments associated with the order.
          items:
            $ref: '#/components/schemas/Shipment'
        totals:
          $ref: '#/components/schemas/Totals'
        prices_include_tax:
          type: boolean
          description: Do the prices include tax? Applies to *all* prices for the order.
          default: true
        currency_code:
          type: object
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
            - type: object
              description: >-
                The three character [ISO
                4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for
                the currency the order was made with.
        tracking_url:
          type: string
          description: >
            A URL to a web page where the customer can track the delivery of the
            order.
      description: An order
    OrderItem:
      required:
        - full_price
        - product_id
        - product_image
        - product_name
        - quantity
        - tax
      type: object
      properties:
        product_id:
          minLength: 1
          type: string
          description: Unique identifier of the purchased product.
        product_name:
          minLength: 1
          type: string
          description: The display name of the purchased product.
        product_image:
          minLength: 1
          type: string
          description: URL of the image to display for the purchased product.
          format: uri
        quantity:
          minimum: 0
          type: number
          description: The quantity the customer specified for this item.
        tax:
          minimum: 0
          type: number
          description: The VAT paid on this item.
        full_price:
          minimum: 0
          type: number
          description: >-
            The final price of the item. The quantity and item discounts should
            be taken into account.
        configuration:
          type: array
          description: A list of product attributes.
          items:
            $ref: '#/components/schemas/OrderItemAttribute'
      description: A purchased item
      example:
        product_id: 1234_001-M
        product_name: Basic T-Shirt
        product_image: https://images.com/basic-tshirt.jpg
        quantity: 2
        full_price: 19.99
        configuration:
          - name: color
            value: white
          - name: size
            value: M
    OrderItemAttribute:
      required:
        - name
        - value
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the product attribute.
        value:
          minLength: 1
          type: string
          description: The value of the product attribute.
      description: A product attribute.
      example:
        name: color
        value: black
    Payment:
      required:
        - method_name
        - status
      type: object
      properties:
        amount:
          minimum: 0
          type: number
          description: Amount paid.
          example: 19.99
        method_name:
          minLength: 1
          type: string
          description: Name of the payment method.
          example: iDeal (ING)
        status:
          type: string
          description: Status of the payment
          example: paid
          enum:
            - paid
            - not_paid
            - refunded
      description: A payment
    Shipment:
      required:
        - address
        - method_name
        - status
      type: object
      properties:
        address:
          type: object
          allOf:
            - $ref: '#/components/schemas/Address'
            - type: object
              description: The shipping address associated with the shipment.
        method_name:
          minLength: 1
          type: string
          description: Name of the shipping method
          example: UPS Ground Shipping
        status:
          type: string
          description: Status of the shipment
          example: shipped
          enum:
            - not_shipped
            - shipped
            - delivered
      description: A shipment
    Totals:
      required:
        - discount
        - grand_total
        - sub_total
        - tax
      type: object
      properties:
        discount:
          minimum: 0
          type: number
          description: The total amount of order discount
        sub_total:
          minimum: 0
          type: number
          description: >
            The sub total.


            Discounts, shipping costs and payment costs should **not** be
            included in the sub total.
        tax:
          minimum: 0
          type: number
          description: >
            The total amount the customer paid in taxes. This can include sales
            tax or "VAT"
        shipping_costs:
          minimum: 0
          type: number
          description: The total amount of shipping costs
        payment_costs:
          minimum: 0
          type: number
          description: The total amount of the payment costs
        grand_total:
          minimum: 0
          type: number
          description: The final amount the customer paid
        custom:
          type: object
          additionalProperties:
            minimum: 0
            type: number
            description: A custom total price
          description: >
            One or more custom totals that can be used to build custom
            functionality.

            Not visible in the apps by default.
      description: A break down of the totals
      example:
        discount: 20
        sub_total: 100
        tax: 0
        shipping_costs: 1.5
        payment_costs: 0
        grand_total: 81.5
        custom:
          colorado_sales_tax: 0.27
    BasketTotals:
      required:
        - discount
        - grand_total
        - sub_total
        - tax
      type: object
      properties:
        discount:
          minimum: 0
          type: number
          description: The total amount of order discount
        sub_total:
          minimum: 0
          type: number
          description: >
            The sub total.


            Discounts, shipping costs and payment costs should **not** be
            included in the sub total.
        tax:
          minimum: 0
          type: number
          description: >
            The total amount the customer paid in taxes. This can include sales
            tax or "VAT"
        shipping_costs:
          minimum: 0
          type: number
          description: The total amount of shipping costs
        payment_costs:
          minimum: 0
          type: number
          description: The total amount of the payment costs
        grand_total:
          minimum: 0
          type: number
          description: The final amount the customer paid
        custom:
          type: object
          additionalProperties:
            minimum: 0
            type: number
            description: A custom total price
          description: >
            One or more custom totals that can be used to build custom
            functionality.

            Not visible in the apps by default.
      description: A break down of the totals
      example:
        discount: 20
        sub_total: 100
        tax: 0
        shipping_costs: 1.5
        payment_costs: 0
        grand_total: 81.5
        custom:
          colorado_sales_tax: 0.27
    Basket:
      required:
        - _errors
        - id
        - includes_tax
        - totals
      type: object
      properties:
        _errors:
          type: array
          description: An array of basket errors
          items:
            $ref: '#/components/schemas/BasketError'
        id:
          type: string
          description: Basket identifier
        billing_address:
          $ref: '#/components/schemas/BasketAddress'
        shipping_address:
          $ref: '#/components/schemas/BasketAddress'
        customer:
          $ref: '#/components/schemas/BasketCustomer'
        includes_tax:
          type: boolean
          description: >
            Defines if a tax line should be shown in the totals of the
            cart.checkout in the app. If false

            then the app will show a tax line in the cart/checkout totals
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        shipping_method:
          type: object
          allOf:
            - $ref: '#/components/schemas/ShippingMethod'
        items:
          type: array
          description: List of items
          items:
            $ref: '#/components/schemas/BasketItem'
        totals:
          $ref: '#/components/schemas/BasketTotals'
        coupons:
          type: array
          items:
            $ref: '#/components/schemas/CouponItem'
        vouchers:
          type: array
          items:
            $ref: '#/components/schemas/VoucherItem'
        custom:
          type: object
          properties: {}
          description: >
            Custom data that can be used to build custom functionality. Not
            visible in

            the apps by default.
    PaymentMethod:
      required:
        - code
        - title
      type: object
      properties:
        code:
          minLength: 1
          type: string
          description: The unique identifier of the payment method
        price:
          minimum: 0
          type: number
          description: Fee for using this payment method
        title:
          type: string
          description: The display name of the payment method
        image:
          type: string
          description: A URL to a logo of the payment method
        options:
          type: array
          description: An array of sub options
          items:
            required:
              - code
              - title
            type: object
            properties:
              title:
                type: string
                description: The display name of the suboption
              code:
                minLength: 1
                type: string
                description: The unique identifier of sub option
              price:
                minimum: 0
                type: number
                description: Fee for using this sub option
      description: A Payment Method to be used in the checkout
    PaymentMethods:
      required:
        - payment_methods
      type: object
      properties:
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
      description: A list of Payment methods
    ShippingMethod:
      required:
        - code
        - title
      type: object
      properties:
        title:
          type: string
          description: The display name of the Shipping method
        code:
          minLength: 1
          type: string
          description: The unique identifier of the shipping method
        price:
          minimum: 0
          type: number
          description: Fee for using this Shipping method
        image:
          type: string
          description: A URL to a logo/icon of the Shipping Method
        options:
          type: array
          description: An array of sub options
          items:
            required:
              - code
              - title
            type: object
            properties:
              title:
                type: string
                description: The display name of the suboption
              code:
                minLength: 1
                type: string
                description: The unique identifier of the suboption
              price:
                minimum: 0
                type: number
                description: Fee for using this sub option
      description: A shipping method to be used in the checkout
    ShippingMethods:
      required:
        - shipping_methods
      type: object
      properties:
        shipping_methods:
          type: array
          description: List of shipping methods
          items:
            $ref: '#/components/schemas/ShippingMethod'
      description: A list of shipping methods
      example:
        shipping_methods:
          - code: postnl
            title: Post NL
          - code: dhl
            title: DHL
            options:
              - code: morning
                title: Morning Delivery
              - code: evening
                title: Evening Delivery
                price: 2.95
    BasketItem:
      required:
        - prices
        - product_id
        - promotional
        - quantity
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Unique identifier of the item.
        promotional:
          type: boolean
          description: >
            Describes wether the item is a promotional cart item. A promotional
            item

            is one that has not been added by the user. But one that is included
            in 

            the basket. For example and free tote bag with a pair of shoes.
          default: false
        product_id:
          minLength: 1
          type: string
          description: Product identifier
        prices:
          $ref: '#/components/schemas/BasketItemPrices'
        quantity:
          minimum: 0
          type: number
          description: Quantity
      description: A cart item.
    BasketItemPrices:
      required:
        - effective
        - original
      type: object
      properties:
        unit_original:
          type: number
          description: Original price of the product at the unit level
        unit_effective:
          type: number
          description: Effective price of the product at the unit level (taxes included)
        unit_effective_tax_free:
          type: number
          description: Effective price of the product at the unit level (taxes excluded)
        original:
          type: number
          description: >-
            Price of the line item before any discounts (quantity *
            unit_effective)
        effective:
          type: number
          description: >-
            Effective price of the line item (quantity * unit_effective -
            discounts)
        custom:
          type: object
          properties: {}
          description: Map of custom prices
      description: List of prices
    BasketItemConfiguration:
      required:
        - child_product_id
      type: object
      properties:
        child_product_id:
          minLength: 1
          type: string
          description: Product identifier of the child product
      description: The configured attributes for configurable products.
      example:
        child_product_id: 6f5e4d3c2b1a
    Vouchers:
      required:
        - vouchers
      type: object
      properties:
        vouchers:
          type: array
          description: Alist of vouchers that the customer can redeem
          items:
            $ref: '#/components/schemas/Voucher'
    Voucher:
      required:
        - description
        - id
        - reward
        - validity
      type: object
      properties:
        id:
          type: string
          description: >-
            Unique identifier for the voucher. Identifiers are *not* displayed
            to the customer.
        description:
          $ref: '#/components/schemas/RewardDescription'
        validity:
          type: object
          allOf:
            - type: object
              description: The time period the voucher is valid for.
            - $ref: '#/components/schemas/Period'
        barcode:
          $ref: '#/components/schemas/Barcode'
        reward:
          $ref: '#/components/schemas/Reward'
      description: A voucher.
      example:
        id: '1000000192'
        description:
          long: This is the long description
          short: This is a summary
          title: 20% discount on your next order
          image: http://images.com/voucher-1000000192.jpg
        validity:
          start: 2018-12-31 23:00:00 UTC
          end: 2019-12-31 23:00:00 UTC
        barcode:
          type: code128
          value: '1000000192'
        reward:
          type: bonus_product
          product_id: 1234_A-B
    Campaigns:
      required:
        - campaigns
      type: object
      properties:
        campaigns:
          type: array
          description: A list of active campaigns.
          items:
            $ref: '#/components/schemas/Campaign'
    Campaign:
      required:
        - description
        - id
        - reward
      type: object
      properties:
        id:
          type: string
          description: >-
            Unique identifier for the campaign. Identifiers are *not* displayed
            to the customer.
        description:
          $ref: '#/components/schemas/RewardDescription'
        validity:
          type: object
          allOf:
            - type: object
              description: The time period the campaign is valid for.
            - $ref: '#/components/schemas/Period'
        reward:
          $ref: '#/components/schemas/Reward'
        conditions:
          type: array
          description: >-
            A set of conditions the customer has to fulfill in order to collect
            the reward. Set this to an empty array (`[]`) if there are no
            conditions.
          items:
            $ref: '#/components/schemas/CollectionCondition'
      description: A Campaign.
      example:
        id: '1000000192'
        description:
          long: This is the long description
          short: This is a summary
          title: 20% discount on your next order
          image: http://images.com/voucher-1000000192.jpg
        validity:
          start: 2018-12-31 23:00:00 UTC
          end: 2019-12-31 23:00:00 UTC
        reward:
          type: bonus_product
          product_id: 1234_A-B
    Period:
      required:
        - start
      type: object
      properties:
        start:
          type: string
          description: An ISO 8601 timestamp marking the start of the period.
        end:
          type: string
          description: >-
            An ISO 8601 timestamp marking the end of the period. When omitted
            the period is assumed to last "forever".
      description: A period of time.
      example:
        start: 2018-12-31 23:00:00 UTC
        end: 2019-12-31 23:00:00 UTC
    Reward:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of reward.
          enum:
            - bonus_product
            - money
            - percentage
      description: Description of a reward.
      discriminator:
        propertyName: type
    RewardDescription:
      required:
        - long
        - short
        - title
      type: object
      properties:
        title:
          minLength: 1
          type: string
          description: A **localised** title for the voucher.
        short:
          minLength: 1
          type: string
          description: A **localised** short summary describing the voucher.
        long:
          minLength: 1
          type: string
          description: A **localised** detailed description of the voucher.
        image:
          minLength: 1
          type: string
          description: >
            A URL for the voucher's image. Dimensions are 1242x510 pixels.


            Note that voucher images *may* contain text, which must be
            localised.
          format: uri
        wide_image:
          minLength: 1
          type: string
          description: >
            A URL for the wide version of the voucher's image. Dimensions are
            2048x510 pixels.


            Note that voucher images *may* contain text, which must be
            localised.
          format: uri
      description: User-facing description of a reward.
    CollectionCondition:
      required:
        - threshold
        - type
      type: object
      properties:
        type:
          minLength: 1
          type: string
          description: >
            The entity to collect. Currently the only supported entity is
            `points_balance`.


            Additional entities may be supported in the future.
          enum:
            - points_balance
        threshold:
          minimum: 0
          type: number
          description: The numeric threshold the customer has to reach
      description: >-
        A collection threshold describes an entity the customer has to collect
        to receive the reward.
      example:
        type: points_balance
        threshold: 500
    bonus_product:
      allOf:
        - $ref: '#/components/schemas/Reward'
        - required:
            - product_id
          type: object
          properties:
            product_id:
              minLength: 1
              type: string
              description: Identifier of the bonus product.
          description: A reward of type "bonus_product".
          example:
            product_id: 1234_A-B
    money:
      allOf:
        - $ref: '#/components/schemas/Reward'
        - required:
            - amount
            - currency_code
          type: object
          properties:
            amount:
              minimum: 0
              type: number
              description: The amount of discount.
            currency_code:
              $ref: '#/components/schemas/CurrencyCode'
    percentage:
      allOf:
        - $ref: '#/components/schemas/Reward'
        - required:
            - percentage
          type: object
          properties:
            percentage:
              maximum: 100
              minimum: 1
              type: number
              description: The disount percentage.
          example:
            percentage: 30
    ProductAttributes:
      type: object
      properties:
        name:
          type: string
          description: Localized name of the product.
        caption:
          type: string
          description: Localized caption for the product.
        description:
          type: string
          description: >
            Identifier of a product description. If absent the description with
            ID

            `default` should be used.
          default: default
        specifications:
          type: string
          description: |
            Identifier of a product specification. If absent the specification
            with ID `default` should be used.
          default: default
        available:
          type: boolean
          description: >
            Is the product available? The data on the availability endpoint
            should

            be preferred over this data.
        media_group:
          type: string
          description: |
            Identifies which media group to use for display purposes. If absent
            the media group with ID `default` should be used.
          default: default
        size_chart_url:
          type: string
          description: URL of a webpage that contains the sizechart.
          format: uri
        web_url:
          type: string
          description: Website URL the product is available on.
          format: uri
        custom_attribute_values:
          type: object
          properties: {}
          description: |
            Values of custom attributes. Keys are the custom attribute IDs and
            values one of the possible value IDs.

            TODO: Shorter name? Will be repeated many times.
          example:
            brand: zee
    ProductDescription:
      required:
        - id
        - text
      type: object
      properties:
        id:
          type: string
          description: Identifier of the description
        text:
          type: string
          description: A localized product description. May contain HTML.
      example:
        id: default
        text:
You
can read me if you want to.
    ProductSpecification:
      required:
        - id
        - text
      type: object
      properties:
        id:
          type: string
          description: Identifier of the specification
        text:
          type: string
          description: A localized product specification. May contain HTML.
      example:
        id: default
        text: Usually a list of specifications like height, width and materials.
    Variant:
      required:
        - id
        - product_attributes
        - variation_attribute_values
      type: object
      properties:
        id:
          type: string
          description: The product ID of the variant
        sku:
          type: string
          description: Stock Keeping Unit
        product_attributes:
          $ref: '#/components/schemas/ProductAttributes'
        pricing:
          $ref: '#/components/schemas/Pricing'
        variation_attribute_values:
          type: object
          properties: {}
          description: |
            Values of the variation attributes. Keys are the variation attribute
            IDs and values one of the possible values.
      description: >
        A variant is a product representing a fully configured "variable
        product".

        Note that most properties are optional. When a property is not present
        the

        value in the `#/product_attributes` key should be assumed.
      example:
        id: 1234_S-001
        sku: '8718955593363'
        product_attributes:
          web_url: https://merchant.com/products/1234_S%2F001.html
        variation_attribute_values:
          color: '001'
          size: S
    CustomAttribute:
      required:
        - id
        - name
        - values
      type: object
      properties:
        id:
          type: string
          description: Identifier of the attribute
        name:
          type: string
          description: Localized display name of the attribute
        values:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/CustomAttributeValue'
      description: Describes a custom attribute a product.
      example:
        id: manufacturer
        name: Merk
        values:
          - id: zee
            name: Zeeman
    CustomAttributeValue:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: Identifier of the custom attribute value
        name:
          type: string
          description: Localized display name of the custom attribute value
      description: Value of a custom attribute
      example:
        id: zee
        name: Zeeman
    ProductSearchResult:
      required:
        - product_id
      type: object
      properties:
        product_id:
          type: string
          description: >
            The product ID of the product being displayed. The attributes,
            media,

            pricing, etc are taken from this product.
      description: A single product search result
      example:
        product_id: 1234_AB-S
    MediaGroup:
      required:
        - id
        - media
      type: object
      properties:
        id:
          type: string
          description: Identifier of the media group
        media:
          minItems: 1
          type: array
          description: List of media items
          items:
            $ref: '#/components/schemas/MediaItem'
      example:
        id: default
        media:
          - type: img
            url: https://merchant.imgix.net/blue-shirt-front.jpg
          - type: img
            url: https://merchant.imgix.net/blue-shirt-back.jpg
          - type: vimeo
            video_id: '74921923'
    MediaItem:
      type: object
      properties:
        type:
          type: string
          description: The media item type
      example:
        url: https://merchant.com/images/blue-shirt.jpg
      discriminator:
        propertyName: type
    img:
      allOf:
        - $ref: '#/components/schemas/MediaItem'
        - required:
            - url
          type: object
          properties:
            url:
              type: string
              description: >
                The URL to a product image. Apps can assume images are hosted on
                a

                server that supports dynamic resizing.
              format: uri
    vimeo:
      allOf:
        - $ref: '#/components/schemas/MediaItem'
        - required:
            - video_id
          type: object
          properties:
            video_id:
              type: string
              description: The video ID of a Vimeo video.
    Filter:
      required:
        - code
        - name
        - type
        - values
      type: object
      properties:
        type:
          type: string
          description: The filter type
          enum:
            - in
            - range
            - equality
        name:
          type: string
          description: Localized display name of the filter
        code:
          type: string
          description: Code of the attribute to filter on
        values:
          minItems: 1
          type: array
          description: List of available options
          items:
            $ref: '#/components/schemas/FilterValue'
      description: A filter with its available options
      example:
        type: in
        name: Size
        code: c_size
        values:
          - name: Small
            value: S
            product_count: 9
          - name: Medium
            value: 29/32
            product_count: 14
          - name: Large
            value: 29/32
            product_count: 17
    FilterValue:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
          description: Localized display text
        value:
          type: string
          description: The value
        product_count:
          minimum: 0
          type: integer
          description: |
            Number of expected search results when this filter is applied
      example:
        name: 29/30
        value: 29/30
        product_count: 14
    RelatedProductSet:
      required:
        - related_product_groups
      type: object
      properties:
        related_product_groups:
          type: array
          items:
            $ref: '#/components/schemas/RelatedProductGroup'
    ProductSearchError:
      allOf:
        - $ref: '#/components/schemas/Err'
    invalid_category:
      allOf:
        - $ref: '#/components/schemas/ProductSearchError'
        - type: object
          properties:
            code:
              type: string
              description: The specified category ID is invalid or does not exist
    invalid_filter:
      allOf:
        - $ref: '#/components/schemas/ProductSearchError'
        - type: object
          properties:
            code:
              type: string
              description: One or more filter parameters are invalid.
    invalid_pagination:
      allOf:
        - $ref: '#/components/schemas/ProductSearchError'
        - type: object
          properties:
            code:
              type: string
              description: >
                This error should be returned when one of the pagination
                parameters (`size` or `cursor`)

                are missing, or when they do not contain a number. Note this
                error should not be returned

                when the cursor is out of bounds. Instead an empty list of
                results should be returned.
    ProductDetailsError:
      allOf:
        - $ref: '#/components/schemas/Err'
    invalid_ids:
      allOf:
        - $ref: '#/components/schemas/ProductDetailsError'
        - type: object
          properties:
            code:
              type: string
              description: Invalid list of product IDs
    Product:
      required:
        - caption
        - id
        - media
        - name
        - pricing
        - type
      type: object
      properties:
        type:
          type: string
          description: The product type
        id:
          type: string
          description: The product ID. This must be url safe
          example: '1234'
        sku:
          type: string
          description: The SKU (Stock Keeping Unit)
          example: CF-1234
        name:
          type: string
          description: The (localized) product name.
          example: Polo
        caption:
          type: string
          description: The (localized) product subtitle.
          nullable: true
          example: Summer collection
        description:
          type: string
          description: The (localized) product description. May contain HTML.
        specification:
          type: string
          description: The (localized) product specifications. May contain HTML.
        stock_notifications_enabled:
          type: boolean
          description: >
            Are "back in stock" notifications enabled for this product? Back in 

            stock notifications are an optional feature that requires an
            additional

            integration.
          default: true
        store_availability_enabled:
          type: boolean
          description: >
            Is the store availability check feature enabled for this product?
            Store

            availability is an optional feature that requires the

            [Stores endpoints](#tag/Stores) and the

            [Store Availability
            endpoint](#operation/FetchProductStoreAvailabilities)

            to be implemented.
          default: true
        available:
          type: boolean
          description: Is the product available?
          default: true
        size_chart_url:
          type: string
          description: URL to a webpage that contains a sizechart
          format: uri
        web_url:
          type: string
          description: The product's URL on the website
          format: uri
        media:
          type: array
          description: A list of product images.
          items:
            $ref: '#/components/schemas/MediaItem'
        pricing:
          $ref: '#/components/schemas/Pricing'
        labels:
          type: array
          description: A list of labels
          items:
            $ref: '#/components/schemas/Label'
        additional_attributes:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalAttribute'
        swatches:
          type: object
          properties:
            attribute_id:
              type: string
              description: Name of the attribute
              example: style
              default: style
            values:
              type: array
              description: List of product swatches
              items:
                $ref: '#/components/schemas/SwatchesItem'
          description: Describes the swatches of a product
      discriminator:
        propertyName: type
    fixed:
      allOf:
        - $ref: '#/components/schemas/Product'
    variable:
      allOf:
        - $ref: '#/components/schemas/Product'
        - required:
            - variant_ids
            - variation_attributes
          type: object
          properties:
            variation_attributes:
              maxItems: 3
              minItems: 1
              type: array
              description: |
                A set of max. 3 variation attributes and their possible values.
              items:
                $ref: '#/components/schemas/VariationAttribute'
            variant_ids:
              type: array
              description: |
                A list of product IDs of the variants belonging to this variable
                product.
              items:
                type: string
                description: A variant product ID
    variant:
      allOf:
        - $ref: '#/components/schemas/Product'
        - required:
            - variable_product_id
            - variation_attribute_values
          type: object
          properties:
            variation_attribute_values:
              type: object
              properties: {}
              description: >
                Values of the variation attributes. Keys are the variation
                attribute

                IDs and values the id of one of the possible variation attribute
                values.
            variable_product_id:
              type: string
              description: The ID of the variable product this variant belongs to
    AdditionalAttribute:
      required:
        - id
        - name
        - value
      type: object
      properties:
        id:
          type: string
          description: Identifier of the attribute
        name:
          type: string
          description: Localized display name of the attribute
        value:
          type: object
          description: An attribute value
      description: Describes an additional attribute of a product.
      example:
        id: brand
        name: Merk
        value: Highstreet
    VariationAttribute:
      required:
        - id
        - name
        - values
      type: object
      properties:
        id:
          type: string
          description: Identifier of the attribute
        name:
          type: string
          description: Display name of the variation attribute (localized)
        values:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/VariationAttributeValue'
      description: |
        Describes an attribute a product can be varied on, e.g. size or color.
      example:
        id: color
        name: Kleur
        values:
          - id: '001'
            name: Blauw
          - id: '002'
            name: Rood
    VariationAttributeValue:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: Identifier of the variation attribute value
        name:
          type: string
          description: Display name of the variation attribute value (localized)
        swatch:
          type: string
          description: |
            URL to a color swatch or preview of variations with this variation
            attribute value.
          format: uri
      description: Value of a variation attribute
      example:
        id: '001'
        name: Blauw
        swatch: https://img.com/swatches/blue.jpg
    SortingOption:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: >
            A unique url safe identifier of the the sorting option. This is used
            as the value of the

            `sort` query parameter when making a product search request
        name:
          type: string
          description: >-
            The localized display name of the sorting option. This is displayed
            in the app
      example:
        id: price-asc
        name: Price (Low to High)
    ProductSearchResultSet:
      required:
        - filters
        - results
        - sorting_options
      type: object
      properties:
        results:
          type: array
          description: Product search results
          example:
            - details_id: '1234'
              display_id: 1234_AB-S
            - details_id: '5678'
              display_id: 5678_CD-M
          items:
            $ref: '#/components/schemas/ProductPlaceholder'
        filters:
          type: array
          description: Filters to refine search results.
          items:
            $ref: '#/components/schemas/SuggestedFilter'
        sorting_options:
          type: array
          description: Options by which to sort the result
          items:
            $ref: '#/components/schemas/SortingOption'
        product_count:
          minimum: 0
          type: integer
          description: >-
            Total number of products for that match the query. Ignoring
            pagination.
          example: 528
      description: Product search results
    ProductPlaceholder:
      required:
        - details_id
        - display_id
      type: object
      properties:
        details_id:
          type: string
          description: |
            The product ID to use when getting the details for this product.
        display_id:
          type: string
          description: |
            The product ID of the product to display. The attributes, media,
            pricing, etc are taken from this product.
      description: A single product search result
      example:
        details_id: '1234'
        display_id: 1234_AB-S
    Pricing:
      required:
        - effective
      type: object
      properties:
        effective:
          type: number
          description: Effective price of the product
        original:
          type: number
          description: Original price of the product
        custom:
          minProperties: 1
          type: object
          additionalProperties:
            minimum: 0
            type: number
            description: A custom price.
          description: Custom prices.
      description: Describes the pricing of a product
      example:
        effective: 45
        original: 109.99
        custom:
          member_effective: 45
          member_original: 89.99
    Label:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: |
            Label identifier. The labels `new` and `sale` are standard labels.
        display_text:
          type: string
          description: Localized text to display to the customer.
        text_color:
          $ref: '#/components/schemas/RGBA'
        background_color:
          $ref: '#/components/schemas/RGBA'
        user_segments:
          type: array
          description: >
            A list of user segment identifiers. The label will only be shown in
            the 

            app if:


            1. The app has implemented display logic for this specific label
            (apps
               implement different display logic for different label IDs).
            2. The customer is assigned to at least of the the listed user
            segments.
          items:
            type: string
      description: |
        A label to be displayed in the app.
      example:
        id: new
        display_text: Nieuw!
    SwatchesItem:
      type: object
      properties:
        image:
          type: string
          description: URL to a swatches image file
          format: uri
          example: >-
            https://img1.g-star.com/image/private/c_fill,f_auto,h_24,q_80/v1622042603/D20145-C072-996-M07.jpg
      description: A single swatch item
    SuggestedFilter:
      required:
        - code
        - name
        - type
        - values
      type: object
      properties:
        type:
          type: string
          description: The filter type
          enum:
            - in
            - range
        name:
          type: string
          description: Localized display name of the filter
        code:
          type: string
          description: Code of the attribute to filter on
        values:
          minItems: 1
          type: array
          description: List of available options
          items:
            $ref: '#/components/schemas/SuggestedFilterValue'
      description: |
        A filter with its available options. When the `type` is `range` only two
        `values` are expected: a minimum and maximum value.
      example:
        type: in
        name: Size
        code: c_size
        values:
          - name: Small
            value: S
            product_count: 9
          - name: Medium
            value: 29/32
            product_count: 14
          - name: Large
            value: 29/32
            product_count: 17
    SuggestedFilterValue:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
          description: Localized display text
        value:
          type: string
          description: The value
        product_count:
          minimum: 0
          type: integer
          description: |
            Number of expected search results when this filter is applied
      example:
        name: 29/30
        value: 29/30
        product_count: 14
    RelatedProductGroup:
      required:
        - results
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of relation (e.g. `cross-sell`).
          example: cross-sell
          enum:
            - cross-sell
            - up-sell
            - general
            - accessories
        results:
          type: array
          description: List of product search results
          items:
            $ref: '#/components/schemas/ProductPlaceholder'
      description: A list of related products grouped by type.
    ProductRelatedSet:
      required:
        - related_product_groups
      type: object
      properties:
        related_product_groups:
          type: array
          description: |
            A list of related product lists grouped by type.
          items:
            $ref: '#/components/schemas/RelatedProductGroup'
    ProductDetailSet:
      required:
        - results
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      description: A list of Products
    ProductAvailabilitySet:
      required:
        - availabilities
      type: object
      properties:
        availabilities:
          type: array
          items:
            $ref: '#/components/schemas/ProductAvailability'
      description: Lists the availability of a product and its variants
    ProductAvailability:
      required:
        - available
        - id
        - pricing
        - qty
      type: object
      properties:
        id:
          type: string
          description: A product ID
        available:
          type: boolean
          description: |
            Can this product be ordered?

            Note that product may be available even if it's out of stock due to
            backorders.
        availability_class:
          type: string
          description: >
            Indicator for the stock status. This may be used to display
            available

            stock instead of the exact available quantity.
          enum:
            - available
            - low
            - unavailable
        message:
          type: string
          description: A short, localized availability message.
        qty:
          minimum: 0
          type: number
          description: The available quantity
        pricing:
          $ref: '#/components/schemas/Pricing'
        qty_min:
          minimum: 0
          type: number
          description: >
            The minimum order quantity. The default value is assumed when
            absent.
        qty_increment:
          type: number
          description: |
            The number to increment the quantity with. Can be used for products
            that are only sold in pairs, for example. The default value is
            assumed when absent.
      description: Describes the availability of a product
      example:
        id: 1234_AB-S
        available: true
        availability_class: available
        message: Delivered in two weeks
        qty: 23
        pricing:
          effective: 14.95
        qty_max: 3
    ProductStoreAvailabilitySet:
      required:
        - store_availabilities
      type: object
      properties:
        store_availabilities:
          type: array
          items:
            $ref: '#/components/schemas/ProductStoreAvailability'
      description: Lists the store availabilities of one or more products
    ProductStoreAvailability:
      required:
        - product_id
        - quantity
        - store_id
      type: object
      properties:
        product_id:
          type: string
          description: A product ID
        store_id:
          type: string
          description: A store ID
        quantity:
          type: number
          description: The available quantity
        message:
          type: string
          description: A short, localized availability message.
        availability_class:
          type: string
          description: >
            Indicator for the stock status. This may be used to display
            available

            stock instead of the exact available quantity.
          enum:
            - available
            - low
            - unavailable
      description: Describes the availability of a product in a particular store
      example:
        product_id: 1234_AB-S
        store_id: ff5e5f52-d62e-e511-80c8-02bfac10024b
        quantity: 2
        message: Low on stock. Order quick!
        availability_class: low
    BadCustomerRequestError:
      allOf:
        - $ref: '#/components/schemas/Err'
    invalid_email:
      allOf:
        - type: object
          properties:
            code:
              type: string
              description: The email address is invalid or missing
        - $ref: '#/components/schemas/BadCustomerRequestError'
    invalid_handle:
      allOf:
        - $ref: '#/components/schemas/BadCustomerRequestError'
        - type: object
          properties:
            code:
              type: string
              description: The handle is invalid or missing
    invalid_first_name:
      allOf:
        - $ref: '#/components/schemas/BadCustomerRequestError'
        - type: object
          properties:
            code:
              type: string
              description: |
                The customer's first name is invalid or missing
    invalid_password:
      allOf:
        - $ref: '#/components/schemas/BadCustomerRequestError'
        - type: object
          properties:
            code:
              type: string
              description: |
                The customer's password is invalid or missing
    invalid_last_name:
      allOf:
        - $ref: '#/components/schemas/BadCustomerRequestError'
        - type: object
          properties:
            code:
              type: string
              description: |
                The customer's last name is missing
    email_already_exists:
      allOf:
        - $ref: '#/components/schemas/BadCustomerRequestError'
        - type: object
          properties:
            code:
              type: string
              description: >
                The customer's email address already exists on the e-commerce
                platform
    BadAddressRequest:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - invalid_postal_code
                - invalid_house_number
                - invalid_city
                - invalid_telephone
                - invalid_country_id
                - invalid_street
                - invalid_first_name
                - invalid_last_name
                - invalid_addition
                - invalid_state
          description: A bad request error
    BadBasketRequest:
      allOf:
        - $ref: '#/components/schemas/Err'
        - required:
            - code
          type: object
          properties:
            code:
              type: string
              description: An error code
              enum:
                - invalid_address
                - invalid_payment_method
                - invalid_shipping_method
                - invalid_item
                - invalid_coupon
                - invalid_email
                - invalid_customer_id
                - invalid_basket_id
          description: A bad request error
    RGBA:
      type: object
      properties:
        red:
          multipleOf: 1
          maximum: 255
          minimum: 0
          type: number
          description: The red colour value
        green:
          multipleOf: 1
          maximum: 255
          minimum: 0
          type: number
          description: The green colour value
        blue:
          multipleOf: 1
          maximum: 255
          minimum: 0
          type: number
          description: The blue colour value
        alpha:
          maximum: 1
          minimum: 0
          type: number
          description: alpha (opacity)
      description: A representation of a colour including opacity
  responses:
    invalid_token:
      description: API key or access token is missing, invalid or expired.
      headers:
        WWW-Authenticate:
          description: Reason for failure.
          schema:
            type: string
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Err'
              - required:
                  - code
                type: object
                properties:
                  code:
                    type: string
                    description: The error code
                    enum:
                      - expired_oauth_token
                      - invalid_oauth_token
                      - invalid_api_key
                description: An authentication error
          example:
            code: invalid_oauth_token
            message: invalid or expired token
    invalid_oauth_token:
      description: Access token is missing, invalid or expired.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Err'
              - required:
                  - code
                type: object
                properties:
                  code:
                    type: string
                    description: The error code
                    enum:
                      - expired_oauth_token
                      - invalid_oauth_token
                description: An authentication error
          example:
            code: invalid_oauth_token
            message: invalid or expired token
    invalid_api_key:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Err'
              - required:
                  - code
                type: object
                properties:
                  code:
                    type: string
                    description: The error code
                    enum:
                      - invalid_hs_token
                description: An authentication error
          example:
            code: invalid_hs_token
            message: invalid or expired token
    server_error:
      description: An internal server error occured
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerError'
    bad_request:
      description: The request body contained invalid or missing data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    bad_store_request:
      description: The request body contained invalid or missing data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadStoreRequest'
    bad_address_request_error:
      description: The request body contained invalid or missing data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadAddressRequest'
    bad_basket_request:
      description: The request body contained invalid or missing data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadBasketRequest'
    basket_finalize_error:
      description: An error occured finalizing the basket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasketFinalizeError'
    not_found:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    oauth_bad_request:
      description: Bad Request
      content:
        application/json:
          schema:
            required:
              - error
            type: object
            properties:
              error:
                type: string
                description: >
                  An error code. See
                  https://tools.ietf.org/html/rfc6749#section-5.2

                  for in-depth explanations of each error code.
                enum:
                  - invalid_request
                  - invalid_client
                  - invalid_grant
                  - unauthorized_client
                  - unsupported_grant_type
                  - invalid_scope
              error_description:
                type: string
                description: Description of the error intended for developers
              error_uri:
                type: string
                description: URL to a human-readable web page with error information
                format: uri
            description: Standard OAuth 2.0 Error Response
          example:
            error: invalid_grant
            error_description: The user or authorization server denied the request
  parameters:
    access_token:
      name: Authorization
      in: header
      description: >
        The customer's access token with the type bearer prefix eg: `Bearer
`
      required: true
      schema:
        type: string
    id:
      name: id
      in: path
      description: Unique identifier of the resource.
      required: true
      schema:
        type: string
    item_id:
      name: item_id
      in: path
      description: Unique identifier of the item.
      required: true
      schema:
        type: string
    api_token:
      name: X-Hs-Api-Token
      in: header
      description: >-
        An authorization token provided by the e-commerce platform used for
        authentication
      required: true
      schema:
        type: string
    locale:
      name: locale
      in: query
      description: The identifier of the locale
      required: true
      schema:
        type: string
    currency:
      name: currency
      in: query
      description: The identifier of the currency
      required: true
      schema:
        type: string
    coupon_code:
      name: coupon_code
      in: path
      required: true
      schema:
        type: string
    cursor:
      name: cursor
      in: query
      description: The position of the cursor
      required: true
      schema:
        type: string
    size:
      name: size
      in: query
      description: The number of items to return
      required: true
      schema:
        type: string
    category_id:
      name: cat
      in: query
      description: |
        The ID of the category to search in.

        When given the results should be restricted to products falling under
        a certain category (including its child categories).
      schema:
        type: string
    search_term:
      name: q
      in: query
      description: |
        A free-form search query.

        When given the results should be restricted to products it matching
        the search query.
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: An id of a sorting option.
      schema:
        type: string
    product_ids:
      name: ids
      in: query
      description: A list of max. 50 product IDs separated by commas (`,`).
      required: true
      schema:
        type: string
    store_ids:
      name: store_ids
      in: query
      description: A list of max. 50 store IDs separated by commas (`,`).
      required: true
      schema:
        type: string
    product_id:
      name: id
      in: query
      description: A Product id.
      required: true
      schema:
        type: string
    full_details:
      name: full_details
      in: query
      description: Request the full product details
      required: true
      schema:
        type: boolean
    voucher_id:
      name: voucher_id
      in: path
      required: true
      schema:
        type: string
    wishlist_id:
      name: id
      in: path
      description: Unique identifier of the wishlist
      required: true
      schema:
        type: string
    wishlist_item_id:
      name: item_id
      in: path
      description: Unique identifier of an item on a wishlist
      required: true
      schema:
        type: string
  requestBodies:
    cart_item:
      content:
        application/json:
          schema:
            required:
              - item
            type: object
            properties:
              item:
                $ref: '#/components/schemas/BasicLineItem'
      required: true
    coupon_item:
      content:
        application/json:
          schema:
            required:
              - coupon
            type: object
            properties:
              coupon:
                $ref: '#/components/schemas/CouponItem'
      required: true
    customer_info:
      content:
        application/json:
          schema:
            required:
              - customer
            type: object
            properties:
              customer:
                $ref: '#/components/schemas/BasicCustomer'
            description: Customer Information
      required: false
    address:
      description: An address
      content:
        application/json:
          schema:
            required:
              - address
            type: object
            properties:
              address:
                $ref: '#/components/schemas/AddressRequest'
      required: true
    basket_address:
      description: A Basket Address
      content:
        application/json:
          schema:
            required:
              - address
            type: object
            properties:
              address:
                $ref: '#/components/schemas/BasketAddress'
      required: true
    voucher_item:
      content:
        application/json:
          schema:
            required:
              - voucher
            type: object
            properties:
              voucher:
                $ref: '#/components/schemas/VoucherItem'
      required: true
    wishlist_item:
      description: Wishlist item
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddWishlistItemRequest'
      required: true
x-tagGroups:
  - name: Usage Guide
    tags:
      - Authentication
      - Errors
      - Response Codes
      - Data
      - Pagination
      - Notes
  - name: Endpoints
    tags:
      - Authorization
      - Basket
      - Categories
      - Customer
      - Miscellaneous
      - Products
      - Stores
      - Wishlists
  - name: Changelog
    tags:
      - v0.10-rc3
      - v0.10-rc2
      - v0.10-rc1
      - v0.10
      - v0.9-rc14
      - v0.9-rc13
      - v0.9-rc12
      - v0.9-rc11
      - v0.9-rc10
      - v0.9-rc9
      - v0.9-rc8
      - v0.9-rc7
      - v0.9-rc6
      - v0.9-rc5
      - v0.9-rc4
      - v0.9-rc3
      - v0.9-rc2
      - v0.9-rc1
      - v0.8
x-original-swagger-version: '2.0'