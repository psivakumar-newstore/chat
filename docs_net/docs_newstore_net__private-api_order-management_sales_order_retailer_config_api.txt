API to manage sales order configurations | NewStore Documentation
Skip to main content
ðŸš€ User docs have moved
to a new docs experience platform!
.
This site will now host ONLY the API docs
.
API Explorer
Search
Dummy API
Associate App
Catalog and imports
Shopping App
Customer and clienteling
Shipping
Event Stream
Inventory and fulfillment
Omnichannel Manager
Order management
Capture Order
External Order API
Sales order historic import API
Order Injection configuration
Order line internal APIs
Service Level API
Customer Care Order Support API
Fulfillment App API
NewStore Checkout API
Order status notifications API
Support API
Sales Order Support API
External OMS Config API
API to manage sales order configurations
Shopping API
Swap products in order
Payments
Promotions and coupons
Stock
Other support APIs
get
Get order ID sequence parameters
post
Set order ID sequence parameters
get
Get grace period for orders
post
Create grace period for orders
get
List locations from which orders can be canceled
post
Set locations from which orders can be canceled
get
Get limits on items for large orders
post
Set limits on items for large orders
API docs by Redocly
API to manage sales order configurations
(
v0
)
Download OpenAPI specification
:
Download
Use these APIs to manage order configurations in the NewStore platform.
Get order ID sequence parameters
Retrieves order ID sequence parameters, that are used to generate human-readable order
identifiers. These are required for order processing, as unique IDs are assigned to orders
in the NewStore platform via these parameters.
Authorizations:
newStoreAccessToken
Responses
200
Parameters of the sequence used for generating human-readable order identifiers.
404
Config key does not exist (it is not a case when key exists but just not set)
500
Internal Server Error.
get
/config/sales_order/sales_order_generator_sequence
/v0
/config/sales_order/sales_order_generator_sequence
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"prefix"
:
"NS"
,
"size"
:
16
,
"start"
:
1
,
"step"
:
2
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Set order ID sequence parameters
Sets or creates order ID sequence parameters for the retailer, that are used to generate human-readable order
identifiers. These are required for order processing, as unique IDs are assigned to orders
in the NewStore platform via these parameters.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
object
prefix
string
Prefix for human-readable order identifiers.
size
integer
Size of human-readable order identifiers.
start
integer
Start of human-readable order identifiers, any value greater than 0.
step
integer
Step of human-readable order identifiers, any value greater than 0.
Responses
200
Parameters of the sequence used for generating human-readable order identifiers.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
post
/config/sales_order/sales_order_generator_sequence
/v0
/config/sales_order/sales_order_generator_sequence
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"prefix"
:
"NS"
,
"size"
:
16
,
"start"
:
1
,
"step"
:
2
}
}
Response samples
200
400
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"prefix"
:
"NS"
,
"size"
:
16
,
"start"
:
1
,
"step"
:
2
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Get grace period for orders
Retrieves the
grace period
for orders in your business.
This is the duration for an on hold order in seconds, after which it is routed for fulfillment.
Authorizations:
newStoreAccessToken
Responses
200
Timer duration for on hold orders.
404
Config key does not exist (This is different from when the config key has not been set).
500
Internal Server Error.
get
/config/sales_order/on_hold_timer_duration
/v0
/config/sales_order/on_hold_timer_duration
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"schema"
:
{
"title"
:
"Schema for setting timer duration for on hold orders"
,
"type"
:
"object"
,
"required"
:
[
"value"
,
"updated_at"
]
,
"properties"
:
{
"value"
:
{
"description"
:
"Timer duration in seconds"
,
"type"
:
"integer"
}
,
"updated_at"
:
{
"type"
:
"string"
,
"format"
:
"date-time"
}
}
}
,
"value"
:
20
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Create grace period for orders
Sets the
grace period
for orders in your business.
This is the duration for an on hold order in seconds, after which it is routed for fulfillment.
Note
: You can also set the grace period for orders via the
fulfillment configuration
set up for your business.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
integer
Timer duration in seconds
Responses
200
Parameters of the sequence used for generating human-readable order identifiers.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
post
/config/sales_order/on_hold_timer_duration
/v0
/config/sales_order/on_hold_timer_duration
Request samples
Payload
Content type
application/json
Copy
{
"value"
:
20
}
Response samples
200
400
500
Content type
application/json
Copy
{
"value"
:
20
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
List locations from which orders can be canceled
Retrieves the locations from which orders in your business can be canceled.
Note
: By default, orders routed to stores can be canceled by all retailers, unless it is
excluded from this configuration. If not specified in a configuration, orders cannot be
canceled from
DCs
.
Authorizations:
newStoreAccessToken
Responses
200
Defines from which location type orders can be cancelled.
404
Config key does not exist (it is not a case when key exists but just not set)
500
Internal Server Error.
get
/config/sales_order/cancellation_allowed_from
/v0
/config/sales_order/cancellation_allowed_from
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"schema"
:
{
"title"
:
"Schema for setting location types from which orders can be cancelled"
,
"type"
:
"object"
,
"required"
:
[
"value"
,
"updated_at"
]
,
"properties"
:
{
"value"
:
{
"description"
:
"Defines from which location type orders can be canceled. By default (if no config is set) orders routed to stores can be canceled by every tenant, unless it is excluded from this list."
,
"type"
:
"array"
,
"minItems"
:
1
,
"items"
:
{
"type"
:
"string"
,
"enum"
:
[
"store"
,
"dc"
]
}
}
,
"updated_at"
:
{
"type"
:
"string"
,
"minLength"
:
1
,
"format"
:
"date-time"
}
}
}
,
"value"
:
[
"store"
,
"dc"
]
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Set locations from which orders can be canceled
Sets the locations from which orders in your business can be canceled.
Note
: By default, orders routed to stores can be canceled by all retailers, unless it is
excluded from this configuration. If not specified in a configuration, orders cannot be
canceled from
DCs
.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
Array of
strings
non-empty
[ items
non-empty
]
Items
Enum
:
"store"
"dc"
Defines from which location type orders can be canceled. By default (if no config is set) orders routed to stores can be canceled by every tenant, unless it is excluded from this list.
Responses
200
Array of providers which allow cancellation.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
post
/config/sales_order/cancellation_allowed_from
/v0
/config/sales_order/cancellation_allowed_from
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
[
"store"
,
"dc"
]
}
Response samples
200
400
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
[
"store"
,
"dc"
]
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Get limits on items for large orders
Retrieves the order item limits that determine if the order is routed or is considered a
big order and placed on hold.
You can set specific limits for items that orders can contain in your business. For example,
you can specify the maximum number of items an order can contain (such as 300 items), exceeding which
it is put on hold.
Authorizations:
newStoreAccessToken
Responses
200
The order item limits that determine if the order is routed or is considered a big order and placed on hold.
404
Config key does not exist (it is not a case when key exists but just not set)
500
Internal Server Error.
get
/config/sales_order/big_sales_order
/v0
/config/sales_order/big_sales_order
Response samples
200
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"soft_limit_for_big_orders"
:
300
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Set limits on items for large orders
Specifies the order item limits that determine if the order is routed or is considered a big order
and placed on hold.
You can set specific limits for items that orders can contain in your business. For example,
you can specify the maximum number of items an order can contain (such as 300 items), exceeding which
it is put on hold.
Authorizations:
newStoreAccessToken
Request Body schema:
application/json
value
required
object
soft_limit_for_big_orders
required
integer
The order item limits that determine if the order is routed or is considered a big order and placed on hold. If the limit if not set, 100 is used as the default value.
Responses
200
The order item limits that determine if the order is routed or is considered a big order and placed on hold.
400
Incorrect payload for config (validation failed).
409
Update failed for config due to lost race.
500
Internal Server Error.
post
/config/sales_order/big_sales_order
/v0
/config/sales_order/big_sales_order
Request samples
Payload
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"soft_limit_for_big_orders"
:
300
}
}
Response samples
200
400
500
Content type
application/json
Copy
Expand all
Collapse all
{
"value"
:
{
"soft_limit_for_big_orders"
:
300
}
,
"updated_at"
:
"2021-07-13T20:18:25Z"
}
Previous
External OMS Config API
Next
Shopping API
Copyright Â© 2025 NewStore, Inc.