openapi: 3.0.3
info:
  title: (Legacy) User Management API
  version: v0
  description: >
    Use this API to manage the retailer's identity and user management
    configurations within the NewStore platform.
**Warning:**
This API version is **deprecated** and will be
    **sunset on January 12th, 2024**.
We recommend that all existing integrations use the latest [User Management
    API](https://docs.p.newstore.partners/#/http/identity-management/users/list-users).
servers:
  - url: https://dodici.x.newstore.net/api/v1/org/identity
paths:
  /config:
    get:
      deprecated: true
      responses:
        '200':
          description: Returns the identity configuration, such as identity providers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_config_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >-
        Retrieves the retailer's identity configuration, such as identity
        providers.
      summary: Get identity configuration
      operationId: GetConfig
  /users:
    get:
      deprecated: true
      responses:
        '200':
          description: Returns all users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_users_response'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >-
        Retrieves all available user accounts for the retailer. Searches if the
        query parameter is used.
      summary: List user accounts
      security:
        - newStoreAccessToken: []
      operationId: GetUserAccounts
      parameters:
        - name: q
          in: query
          required: false
          description: Query the resulting list by first/last name or email address.
          schema:
            type: string
        - name: offset
          in: query
          required: false
          description: The offset to be used for the resulting user account list.
          schema:
            type: integer
            minimum: 0
        - name: count
          in: query
          required: false
          description: The number of requested user accounts.
          schema:
            type: integer
            minimum: 0
    post:
      deprecated: true
      responses:
        '201':
          description: The user account is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '409':
          description: The provided email address is already in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '412':
          description: One or more user roles used were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >
        Creates a new user account.


        To assign roles to a new user account, provide the IDs of the relevant
        roles in the `roles` property.

        To retrieve the role IDs, use the [List roles
        method](#operation/ListRoles).


        If the `external_directory` property is set to `false`, the user account
        is created

        in Auth0 as well and an email with password setup instructions is sent.
        The user can then use these

        credentials to log into NewStore.


        **Note:** If the user has no roles assigned, they will be able to log in
        to NOM but will not be able to interact

        with NOM until you assign roles to the user to allow them to interact
        with the various apps. See the

        [Create user role](#operation/CreateRole) method.
      summary: Create user account
      security:
        - newStoreAccessToken: []
      operationId: CreateUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_users_request'
        required: true
  /users/{id}:
    get:
      deprecated: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: Retrieves the user account with the specified ID.
      summary: Get user account
      operationId: GetUserAccount
    put:
      deprecated: true
      responses:
        '200':
          description: The updated user account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User account was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '412':
          description: One or more user roles used were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >
        Updates the user account with the specified ID.


        If the `external_directory` property is changed to `false`, the user
        account will be created in

        Auth0 as well and an email with password setup instructions will be
        send. The user can then use

        these credentials to log into NewStore.


        **Note:** If the user has no roles assigned, they will be able to log in
        to NOM but will not be able to interact

        with NOM until you assign roles to the user to allow them to interact
        with the various apps. See the

        [Create user role](#operation/CreateRole) method..


        If the `external_directory` property is changed to `true`, the user
        account will be deleted from Auth0.

        The user then can login with the enterprise directory credentials.
      summary: Update user account
      operationId: UpdateUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_users_by_id_request'
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: The deletion request was sucessful.
        '404':
          description: User account was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >
        Deletes the user account with the specified ID.


        If the `external_directory` property is set to `false`, the user account
        will be deleted in Auth0 as well.


        If the `external_directory` property is set to `true`, the user account
        will not be deleted from the

        respective enterprise directory.
      summary: Delete user account
      security:
        - newStoreAccessToken: []
      operationId: DeleteUserAccount
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: The user account ID.
  /userinfo:
    get:
      deprecated: true
      responses:
        '200':
          description: >-
            Returns information and permissions of the current user identified
            by the bearer token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_userinfo_response'
        '400':
          description: >-
            Bad Request, for example due to the request of an invalid
            application.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >-
        Retrieves information and permissions of the user identified by the
        bearer token.
      summary: List permissions for a user
      security:
        - newStoreAccessToken: []
      operationId: UserInfo
      parameters:
        - name: application
          in: query
          description: Filter the users permission by application.
          schema:
            type: string
            enum:
              - nom
              - aa
              - fa
  /permissions:
    get:
      deprecated: true
      responses:
        '200':
          description: Returns all permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_permissions_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: Lists all the user permissions available for the retailer.
      summary: List user permissions
      security:
        - newStoreAccessToken: []
      operationId: ListPermissions
  /roles:
    get:
      deprecated: true
      responses:
        '200':
          description: Returns all roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_roles_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >-
        Lists all available user roles for the retailer. Search if the query
        parameter is used.
      summary: List user roles
      security:
        - newStoreAccessToken: []
      operationId: ListRoles
      parameters:
        - name: q
          in: query
          description: |
            Query the resulting list by name.
          schema:
            type: string
    post:
      deprecated: true
      responses:
        '201':
          description: The role is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '409':
          description: The provided name is already in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '412':
          description: One or more permissions used were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: Creates a new role.
      summary: Create user role
      security:
        - newStoreAccessToken: []
      operationId: CreateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_roles_request'
        required: true
  /roles/{id}:
    get:
      deprecated: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '404':
          description: Role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: Retrieves the user role with the specified ID.
      summary: Get user role
      security:
        - newStoreAccessToken: []
      operationId: GetRole
    put:
      deprecated: true
      responses:
        '200':
          description: The updated role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '403':
          description: Cannot update a read-only role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Role was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '412':
          description: One or more user roles used were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: Updates the user role with the specified ID.
      summary: Update user role
      security:
        - newStoreAccessToken: []
      operationId: UpdateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_roles_by_id_request'
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: The deletion request was sucessful.
        '403':
          description: Cannot delete a read-only role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Role was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >
        Deletes the user role with the specified ID.


        Once deleted, the user role is unassigned from all associated user
        accounts.
      summary: Delete user role
      security:
        - newStoreAccessToken: []
      operationId: DeleteRole
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: The role ID.
  /roles/{id}/users:
    get:
      deprecated: true
      responses:
        '200':
          description: Returns all users by role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_users_by_role_response'
        '404':
          description: Role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: >-
        Retrieves all user accounts that have been assigned the specified user
        role.
      summary: List user accounts for a user role
      security:
        - newStoreAccessToken: []
      operationId: GetUserAccountsByRole
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: The role ID.
  /webhooks/keycloak/events:
    post:
      deprecated: true
      responses:
        '204':
          description: The event got processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      description: Sends Keycloak events to the NewStore platform.
      summary: Send Keycloak events to the platform
      operationId: WebhookKeycloak
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_keycloak_events'
        required: true
components:
  securitySchemes:
    newStoreAccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    get_config_response:
      type: object
      title: Identity configuration
      description: Identity configuration.
      properties:
        issuer:
          description: >-
            The URI of the issuer, for example:
            'https://id.s.newstore.net/auth/realms/dodici'.
          type: string
        providers:
          description: A list of all brokered identity providers.
          type: array
          items:
            type: object
            properties:
              provider:
                description: 'The provider, one of: ''auth0'', ''microsoft-azure-ad''.'
                type: string
                enum:
                  - auth0
                  - microsoft-azure-ad
              alias:
                description: The alias as specified in Keycloak.
                type: string
      required:
        - issuer
        - providers
    error_response:
      type: object
      title: Error Response
      description: >-
        Error response send if a request to an customer endpoint failed due to
        an external or internal error.
      required:
        - message
      properties:
        error_code:
          type: string
          description: Custom error code which provides more details about the error.
        message:
          type: string
          description: Contains the reason of the error.
        request_id:
          type: string
          description: >-
            Unique request identifier which caused the error. Can be used to
            further debug the root causes of this error.
    role_item:
      title: User role
      description: Needed for granting permissions per group not individually.
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Identifier of the role.
        name:
          type: string
          description: Name of the role.
        is_readonly:
          type: boolean
          description: The role is read-only and not editable.
        updated_at:
          type: string
          format: date-time
    user:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the user.
        associate_id:
          type: string
          description: >-
            External identifier for the NewStore plattform. Formerly known as
            "newstore_id".
        email:
          type: string
          format: email
          description: Email address of the user.
        first_name:
          type: string
          description: First name of the user.
        last_name:
          type: string
          description: Last name of the user.
        phone:
          type: string
          description: Telephone number of the user.
        avatar_url:
          type: string
          description: DEPRECATED; always empty.
        external_directory:
          type: boolean
          description: User is managed by an external directory.
        is_active:
          type: boolean
          description: Whether the user can login or not.
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        last_login_at:
          type: string
          format: date-time
          description: >-
            Shows last login time of the user. If user never logged in the
            property is not presence.
        roles:
          type: array
          description: List of roles the user is assigned to.
          items:
            $ref: '#/components/schemas/role_item'
    paginated_response:
      type: object
      description: Contains default fields for paginatable APIs.
      required:
        - count
        - total
        - offset
      properties:
        count:
          description: Contains the count of returned elements.
          type: integer
        total:
          description: Contains the total count of elements.
          type: integer
        offset:
          description: Contains the current offset.
          type: integer
    get_users_response:
      title: Returns a list of users
      description: Gets all users
      type: array
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/user'
        pagination_info:
          $ref: '#/components/schemas/paginated_response'
    post_users_request:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address of the user.
        first_name:
          type: string
          description: First name of the user.
        last_name:
          type: string
          description: Last name of the user.
        phone:
          type: string
          description: Telephone number of the user.
        avatar_url:
          type: string
          description: DEPRECATED; will be ignored.
        external_directory:
          type: boolean
          description: User is managed by an external directory.
        is_active:
          type: boolean
          description: Whether the user can login or not.
        roles:
          type: array
          description: List of role IDs the user is assigned to.
          items:
            type: string
    put_users_by_id_request:
      type: object
      required:
        - first_name
        - last_name
        - phone
        - avatar_url
        - external_directory
        - is_active
        - roles
      properties:
        first_name:
          type: string
          description: First name of the user.
        last_name:
          type: string
          description: Last name of the user.
        phone:
          type: string
          description: Telephone number of the user.
        avatar_url:
          type: string
          description: DEPRECATED; will be ignored.
        external_directory:
          type: boolean
          description: User is managed by an external directory.
        is_active:
          type: boolean
          description: Whether the user can login or not.
        roles:
          type: array
          description: List of role IDs the user is assigned to.
          items:
            type: string
    permission:
      title: System permission
      description: List of all available system permissions.
      type: object
      required:
        - name
        - application
        - children
      properties:
        name:
          type: string
          description: Name of the permission.
        application:
          type: string
          description: Abbrevation of the application this permission belongs to.
          enum:
            - nom
            - aa
            - fa
        children:
          type: array
          description: Nested list of child permissions.
          items:
            $ref: '#/components/schemas/permission'
            description: A child permission, same layout as the parent permission.
    get_userinfo_response:
      description: Returns user information including permissions.
      type: object
      properties:
        id:
          type: string
          description: Identifier of the user.
        associate_id:
          type: string
          description: >-
            External identifier for the NewStore plattform. Formerly known as
            "newstore_id".
        email:
          type: string
          format: email
          description: Email address of the user.
        first_name:
          type: string
          description: First name of the user.
        last_name:
          type: string
          description: Last name of the user.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/permission'
    get_permissions_response:
      description: Returns a list of available permissions the system provides.
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/permission'
    get_roles_response:
      description: Returns a list of roles.
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/role_item'
    post_roles_request:
      title: User role
      description: Needed for granting permissions per group not individually.
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
          description: Name of the role. To be valid, it can't include slashes ('/').
          pattern: ^[^/]+$
        directory_mapping:
          type: array
          description: Maps external directory groups to this role.
          items:
            type: string
        permissions:
          description: List of permissions.
          type: array
          items:
            type: object
            required:
              - name
              - application
            properties:
              name:
                type: string
                description: Name of the permission.
              application:
                type: string
                description: Abbrevation of the application this permission belongs to.
                enum:
                  - nom
                  - aa
                  - fa
          minItems: 1
    role:
      title: User role
      description: Needed for granting permissions per group not individually.
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Identifier of the role.
        name:
          type: string
          description: Name of the role.
        is_readonly:
          type: boolean
          description: The role is read-only and not editable.
        directory_mapping:
          type: array
          description: Maps external directory groups to this role.
          items:
            type: string
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        permissions:
          description: List of permissions which are assigned to the role.
          type: array
          items:
            $ref: '#/components/schemas/permission'
    put_roles_by_id_request:
      title: User role
      description: Needed for granting permissions per group not individually.
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
          description: Name of the role. To be valid, it can't include slashes ('/').
          pattern: ^[^/]+$
        directory_mapping:
          type: array
          description: Maps external directory groups to this role.
          items:
            type: string
        permissions:
          description: List of permissions.
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Name of the permission.
              application:
                type: string
                description: Abbrevation of the application this permission belongs to.
                enum:
                  - nom
                  - aa
                  - fa
          minItems: 1
    get_users_by_role_response:
      title: Returns a list of users
      description: Gets all users by role
      type: array
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/user'
    post_keycloak_events:
      title: Keycloak event
      type: object
      required:
        - realm
        - operation
        - resource_id
      properties:
        realm:
          type: string
          description: Realm of the incoming event.
        operation:
          type: string
          description: Operation type done on the given resource. e.g. `create`
        resource_id:
          type: string
          description: Identifier of the given resource.
        resource_name:
          type: string
          description: Name of the given resource. e.g. `user`
        error:
          type: string
          description: Something went wrong on keycloak site to emit the event.